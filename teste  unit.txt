import { TestBed } from '@angular/core/testing';
import { MyComponent } from './my-component'; // Replace with your actual component
import { MapValueMultipartUpload } from './map-value-multipart-upload.model'; // Replace with the correct model

describe('MyComponent', () => {
  let component: MyComponent;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [MyComponent],
    });

    component = TestBed.inject(MyComponent);
  });

  it('should return true if a file is too large', () => {
    // Arrange: Set up the max file size limit
    component.megabytesLimitPerFile = 5; // Example: 5 MB

    const largeFileMock = {
      bodyMultipartRequest: {
        fullFile: { size: 6 * 1024 * 1024 } // 6 MB
      }
    } as MapValueMultipartUpload;

    const smallFileMock = {
      bodyMultipartRequest: {
        fullFile: { size: 3 * 1024 * 1024 } // 3 MB
      }
    } as MapValueMultipartUpload;

    const mapMultipartUpload = new Map<string, MapValueMultipartUpload[]>();
    mapMultipartUpload.set('file1', [largeFileMock]);
    mapMultipartUpload.set('file2', [smallFileMock]);

    // Act: Call the method
    const result = component.hasFileTooLarge(mapMultipartUpload);

    // Assert: Expect the result to be true
    expect(result).toBe(true);
  });

  it('should return false if no files are too large', () => {
    // Arrange: Set up the max file size limit
    component.megabytesLimitPerFile = 5; // Example: 5 MB

    const smallFileMock1 = {
      bodyMultipartRequest: {
        fullFile: { size: 3 * 1024 * 1024 } // 3 MB
      }
    } as MapValueMultipartUpload;

    const smallFileMock2 = {
      bodyMultipartRequest: {
        fullFile: { size: 4 * 1024 * 1024 } // 4 MB
      }
    } as MapValueMultipartUpload;

    const mapMultipartUpload = new Map<string, MapValueMultipartUpload[]>();
    mapMultipartUpload.set('file1', [smallFileMock1]);
    mapMultipartUpload.set('file2', [smallFileMock2]);

    // Act: Call the method
    const result = component.hasFileTooLarge(mapMultipartUpload);

    // Assert: Expect the result to be false
    expect(result).toBe(false);
  });
});
