import org.junit.jupiter.api.Test;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipOutputStream;

import static org.junit.jupiter.api.Assertions.*;

class ArquivoValidatorTest {

    @Test
    void deveLancarExcecaoQuandoZipEstiverVazio() throws IOException {
        // Arrange: cria um ZIP vazio temporário
        File zipVazio = File.createTempFile("arquivo_vazio", ".zip");
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipVazio))) {
            // não adiciona nenhum entry → zip ficará vazio
        }

        // Act + Assert: ao validar, deve lançar exceção do if isZipVazio
        IllegalArgumentException ex = assertThrows(
            IllegalArgumentException.class,
            () -> ArquivoValidator.validarArquivoDados(zipVazio.getAbsolutePath())
        );

        assertEquals("O arquivo ZIP está vazio.", ex.getMessage());
    }
}



teste 2

import org.junit.jupiter.api.Test;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;

class ArquivoValidatorTest {

    @Test
    void deveLancarExcecaoQuandoJsonNaoForValido() throws IOException {
        // Arrange: cria arquivo .json com conteúdo inválido
        File jsonInvalido = File.createTempFile("metadados", ".json");
        try (FileWriter writer = new FileWriter(jsonInvalido)) {
            writer.write("{ chaveSemAspas: valor }"); // JSON malformado
        }

        // Act + Assert: espera IllegalArgumentException no segundo if
        IllegalArgumentException ex = assertThrows(
            IllegalArgumentException.class,
            () -> ArquivoValidator.validarArquivoMetadados(jsonInvalido.getAbsolutePath())
        );

        assertEquals("O arquivo JSON não é válido.", ex.getMessage());
    }
}



teste 5


import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.jupiter.api.Assertions.*;

class ArquivoValidatorTest {

    @Test
    void deveRetornarTrueParaArquivoZipValido() throws IOException {
        // Arrange: cria um arquivo ZIP válido temporário
        File zipFile = File.createTempFile("teste", ".zip");
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))) {
            zos.putNextEntry(new ZipEntry("teste.txt"));
            zos.write("conteudo".getBytes());
            zos.closeEntry();
        }

        // Act
        boolean resultado = ArquivoValidator.isArquivoZip(zipFile.getAbsolutePath());

        // Assert
        assertTrue(resultado);
    }

    @Test
    void deveRetornarFalseParaArquivoNaoZip() throws IOException {
        // Arrange: cria um arquivo .txt qualquer
        File txtFile = File.createTempFile("teste", ".txt");
        Files.writeString(txtFile.toPath(), "isso não é um zip");

        // Act
        boolean resultado = ArquivoValidator.isArquivoZip(txtFile.getAbsolutePath());

        // Assert
        assertFalse(resultado);
    }

    @Test
    void deveRetornarFalseQuandoArquivoNaoExiste() {
        // Act
        boolean resultado = ArquivoValidator.isArquivoZip("caminho/inexistente.zip");

        // Assert
        assertFalse(resultado);
    }
}



- ver incidentes
- testes unitários, e subir código 
- avisar lucas sobre mandate
- ver com lucas como gera a url pre assinada
- tentar falar com Luan sobre BG ou KMS
- abrir gmud ecs
- ver casos SG com Andressa pra ver se vai pegar, se não falar com rapaz de dados 
- ver com Thiago sobre as contas devtools
- ver sobre chamado para GT para uso da url pre assinada
- ver com Luan sobre kms


--------------------------

na sexta 

- passei boa parte do dia com o pessoal do chamado do stackspot, estávamos fazendo uns testes 
parece q agora vai dar certo os apontamentos das infras geradas pelo stackspot
Hoje já vou subir em prod pra ve se vai refletir certinho
- na sexta tbm ajustei 6 glue Jobs com apontamentos q estvam pedindo no iuconfia
- tem uns SG q são gerados por alguns glue Jobs, q precisa atualizar, vi q o time do igor vianna estavam mexendo neles, ai ele disse q o alguns ajustes o time dele vai ajustar
e outros vou ter q ver aqui de ajustar
- ia ate ver com vcs pq tem uns apontamentos em varias policys q precisam de ajustes, mas 
- sobre o erro que estava tomando de timeout na api do framework ao baixar a url pre assinada rodando pela cloud da aws , coloquei vários logs pra ver oq tava acontecendo 
nada fazia sentido, até perguntei o Pedrao se ele tinha algo em mente, ele tbm disse não , mas a gente pesquisando vimos q não é possível o uso de urls pre assinadas no banco, para fazer tem q levar no GT 
- ajuda time Edgar com caso de nova integração que estão precisando fazer 
- hoje vou ta atuando nessa subida pra prod com a correção dos apontamentos da stack do ecs
- vou ta vendo esses security group com o time do do Igao






Nos testes de ponta a ponta identifiquei erro de timeout no download via URL pré-assinada. Analisei bastante e vi que se trata de uma questão de governança, que precisa de aprovação do comitê antes de avançar.”



- estudar inglês 
- terminar curso esteira 
- agentforce
- fazer curso italo



- Passei boa parte do dia em tratativas com o pessoal do chamado do Stackspot. Fizemos diversos testes complexos para validar os apontamentos das infraestruturas geradas automaticamente pelo Stackspot. Depois de várias tentativas, finalmente conseguimos
 chegar a um cenário que deve refletir corretamente. Hoje mesmo vou realizar a subida em produção para confirmar se os ajustes
- Na sexta-feira, realizei ajustes em 6 Glue Jobs que estavam com apontamentos pendentes no IUConfia. 
- Identifiquei também que alguns Glue Jobs geram Security Groups automaticamente, os quais precisam de atualização. O time do Igor Vianna já está cuidando de parte dessas correções, mas outras ficarão sob minha responsabilidade, 
  exigindo análise detalhada das permissões para evitar impacto em produção. Eu tenho até uma call com a moça do time dele agora as 10:30 pra entender oq eles estão fazendo 
- Em paralelo, continuei investigando o erro de timeout na API do framework ao tentar baixar arquivos via URL pré-assinada rodando pela cloud da AWS. Para conseguir visibilidade, inseri diversos logs, mas nada fazia sentido. 
Até pinguei o Pedrão, que também não tinha pistas. Mas ai fizemos uma call e descobrimos que não é possível utilizar URLs pré-assinadas diretamente no banco