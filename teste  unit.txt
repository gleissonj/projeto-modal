import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of } from 'rxjs';
import { MyComponent } from './my-component.component';
import { MultipartUploadService } from './multipart-upload.service';

describe('MyComponent', () => {
  let component: MyComponent;
  let fixture: ComponentFixture<MyComponent>;
  let mockMultipartUploadService: any;

  beforeEach(() => {
    mockMultipartUploadService = {
      getJson: jest.fn()
    };

    TestBed.configureTestingModule({
      declarations: [MyComponent],
      providers: [
        { provide: MultipartUploadService, useValue: mockMultipartUploadService }
      ]
    });

    fixture = TestBed.createComponent(MyComponent);
    component = fixture.componentInstance;
  });

  it('should download the JSON file', () => {
    // Mock the JSON data
    const mockData = { key: 'value' };
    mockMultipartUploadService.getJson.mockReturnValue(of(mockData));

    // Spy on document.createElement and element interactions
    const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
      setAttribute: jest.fn(),
      click: jest.fn(),
      style: { display: '' },
      remove: jest.fn()
    } as any);

    const appendChildSpy = jest.spyOn(document.body, 'appendChild').mockImplementation();
    const removeChildSpy = jest.spyOn(document.body, 'removeChild').mockImplementation();

    // Call the method
    component.baixarJson();

    // Expect that getJson was called
    expect(mockMultipartUploadService.getJson).toHaveBeenCalled();

    // Expect createElement to have been called with 'a'
    expect(createElementSpy).toHaveBeenCalledWith('a');

    // Verify attributes on the created element
    const createdElement = createElementSpy.mock.results[0].value;
    expect(createdElement.setAttribute).toHaveBeenCalledWith(
      'href',
      'data:text/json;charset=UTF-8,' + encodeURIComponent(JSON.stringify(mockData))
    );
    expect(createdElement.setAttribute).toHaveBeenCalledWith('download', 'exemplo.json');

    // Ensure appendChild, click, and removeChild were called
    expect(appendChildSpy).toHaveBeenCalledWith(createdElement);
    expect(createdElement.click).toHaveBeenCalled();
    expect(removeChildSpy).toHaveBeenCalledWith(createdElement);
  });
});
