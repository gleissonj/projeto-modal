import { ComponentFixture, TestBed } from '@angular/core/testing';
import { YourComponent } from './your-component.component';

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [YourComponent],
      // Adicione outros módulos necessários, como FormsModule, HttpClientModule, etc.
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
  });

  it('deve redefinir typeFunc e exibir mensagem de erro se não tiver permissão', () => {
    // Mock da função verificaPermissaoUpload
    jest.spyOn(component, 'verificaPermissaoUpload').mockReturnValue(false);
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    component.alteraVisualizacao(1, 'funcNaoPermitida');

    // Verifica se typeFunc foi redefinido
    expect(component.typeFunc).toBe(0);
    // Verifica se showMessage foi chamado com os argumentos corretos
    expect(showMessageSpy).toHaveBeenCalledWith(
      'Você não possui a permissao para upload dessa funcionalidade, favor entrar em contato com o ADM',
      'error'
    );
  });

  it('deve atualizar typeFunc, nameFunc e selectedTeam se tiver permissão', () => {
    // Mock da função verificaPermissaoUpload
    jest.spyOn(component, 'verificaPermissaoUpload').mockReturnValue(true);

    component.alteraVisualizacao(2, 'funcPermitida');

    // Verifica se as propriedades foram atualizadas corretamente
    expect(component.typeFunc).toBe(2);
    expect(component.nameFunc).toBe('funcPermitida');
    expect(component.selectedTeam).toBe('information');
  });
});
