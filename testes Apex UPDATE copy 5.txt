import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { FileService } from './file.service';
import { S3Service } from './s3.service';  // Supondo que o S3Service esteja em s3.service.ts
import { of, throwError } from 'rxjs';

describe('FileService', () => {
  let service: FileService;
  let s3Service: jasmine.SpyObj<S3Service>;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    const s3ServiceSpy = jasmine.createSpyObj('S3Service', ['listFiles']);

    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [
        FileService,
        { provide: S3Service, useValue: s3ServiceSpy }
      ]
    });

    service = TestBed.inject(FileService);
    s3Service = TestBed.inject(S3Service) as jasmine.SpyObj<S3Service>;
    httpMock = TestBed.inject(HttpTestingController);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should resolve when listFiles is successful', (done) => {
    const mockResponse = ['file1.txt', 'file2.txt'];
    s3Service.listFiles.and.returnValue(of(mockResponse));

    service.loadFiles('bucketName', 'prefix').then((response) => {
      expect(response).toEqual(mockResponse);
      done();
    });

    // Verifique se a requisição HTTP foi realizada corretamente
    const req = httpMock.expectOne('mocked-api-url'); // Ajuste com o URL real que o S3Service utiliza
    expect(req.request.method).toBe('GET');
    req.flush(mockResponse);
  });

  it('should reject when listFiles fails', (done) => {
    const mockError = 'Error loading files';
    s3Service.listFiles.and.returnValue(throwError(() => new Error(mockError)));

    service.loadFiles('bucketName', 'prefix').catch((error) => {
      expect(error.message).toBe(mockError);
      done();
    });

    // Verifique se a requisição HTTP foi realizada corretamente
    const req = httpMock.expectOne('mocked-api-url'); // Ajuste com o URL real que o S3Service utiliza
    expect(req.request.method).toBe('GET');
    req.flush(mockError, { status: 500, statusText: 'Server Error' });
  });

  afterEach(() => {
    httpMock.verify();
  });
});
