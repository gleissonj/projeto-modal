import { ComponentFixture, TestBed } from '@angular/core/testing';
import { MyComponent } from './my-component.component'; // Adjust the path
import { environment } from 'src/environments/environment'; // Adjust the path

describe('MyComponent', () => {
  let component: MyComponent;
  let fixture: ComponentFixture<MyComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [MyComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(MyComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should call startMultiplesStepFunction with stepFunctionProspectBacen and stepFunctionProspectBase if selectedTeam is "base"', () => {
    // Arrange
    component.selectedTeam = 'base';
    
    // Spy on startMultiplesStepFunction to monitor its calls
    const startMultiplesSpy = jest.spyOn(component, 'startMultiplesStepFunction');

    // Act
    component.startStepFunctionProspect();

    // Assert
    const expectedStepFunctions = [
      environment.stepFunctionProspectBacen, 
      environment.stepFunctionProspectBase
    ];
    expect(startMultiplesSpy).toHaveBeenCalledWith(expectedStepFunctions);
  });

  it('should call startMultiplesStepFunction with stepFunctionProspectRelacionamento if selectedTeam is "relacionamento"', () => {
    // Arrange
    component.selectedTeam = 'relacionamento';

    // Spy on startMultiplesStepFunction to monitor its calls
    const startMultiplesSpy = jest.spyOn(component, 'startMultiplesStepFunction');

    // Act
    component.startStepFunctionProspect();

    // Assert
    const expectedStepFunctions = [environment.stepFunctionProspectRelacionamento];
    expect(startMultiplesSpy).toHaveBeenCalledWith(expectedStepFunctions);
  });

  it('should not call startMultiplesStepFunction if selectedTeam is neither "base" nor "relacionamento"', () => {
    // Arrange
    component.selectedTeam = 'unknown';

    // Spy on startMultiplesStepFunction to monitor its calls
    const startMultiplesSpy = jest.spyOn(component, 'startMultiplesStepFunction');

    // Act
    component.startStepFunctionProspect();

    // Assert
    expect(startMultiplesSpy).not.toHaveBeenCalled();
  });
});
