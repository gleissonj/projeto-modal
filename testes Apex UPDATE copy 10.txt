import { ComponentFixture, TestBed } from '@angular/core/testing';
import { YourComponent } from './your-component'; // ajuste o caminho conforme seu projeto
import { MsalService, MSAL_GUARD_CONFIG, MsalGuardConfiguration } from '@azure/msal-angular';

describe('YourComponent - Método login()', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;

  // Mock do MsalService com os métodos que podem ser chamados
  const msalServiceMock = {
    loginRedirect: jest.fn(),
    logoutRedirect: jest.fn() // incluso aqui se você usar em outro ponto
  };

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MsalService, useValue: msalServiceMock },
        {
          provide: MSAL_GUARD_CONFIG,
          useValue: {
            authRequest: {
              scopes: ['user.read'],
              extraQueryParameters: { prompt: 'select_account' }
            }
          } as MsalGuardConfiguration
        }
      ]
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('deve chamar loginRedirect com authRequest quando definido', () => {
    component.login();

    expect(msalServiceMock.loginRedirect).toHaveBeenCalledWith(
      expect.objectContaining({
        scopes: ['user.read'],
        extraQueryParameters: { prompt: 'select_account' }
      })
    );
  });

  it('deve chamar loginRedirect sem parâmetros quando authRequest não está definido', () => {
    // Simula authRequest undefined
    component.msalGuardConfig.authRequest = undefined;

    component.login();

    expect(msalServiceMock.loginRedirect).toHaveBeenCalledWith();
  });
});
