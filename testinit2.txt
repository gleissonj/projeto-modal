describe('convertFileToBase64', () => {
  let component: YourComponent;

  beforeEach(() => {
    component = new YourComponent();
  });

  it('should resolve with Base64 string when file is read successfully', async () => {
    const mockFile = new File(['test content'], 'test.txt', { type: 'text/plain' });
    const base64String = 'data:text/plain;base64,dGVzdCBjb250ZW50'; // Example Base64 for 'test content'

    // Mock FileReader behavior
    const fileReaderMock = {
      readAsDataURL: jest.fn(),
      onload: null as unknown as () => void,
      onerror: null as unknown as () => void,
      result: base64String
    };

    // Spy on the FileReader constructor and return the mock object
    const fileReaderSpy = jest.spyOn(window as any, 'FileReader').mockImplementation(() => fileReaderMock);

    // Invoke the method
    const promise = component.convertFileToBase64(mockFile);

    // Simulate the successful read
    fileReaderMock.onload!();

    // Wait for the promise to resolve
    await expect(promise).resolves.toBe(base64String);

    // Ensure readAsDataURL was called with the correct file
    expect(fileReaderMock.readAsDataURL).toHaveBeenCalledWith(mockFile);

    // Restore the original FileReader implementation
    fileReaderSpy.mockRestore();
  });

  it('should reject when file reading fails', async () => {
    const mockFile = new File(['test content'], 'test.txt', { type: 'text/plain' });
    const error = new Error('File reading failed');

    // Mock FileReader behavior
    const fileReaderMock = {
      readAsDataURL: jest.fn(),
      onload: null as unknown as () => void,
      onerror: null as unknown as () => void
    };

    // Spy on the FileReader constructor and return the mock object
    const fileReaderSpy = jest.spyOn(window as any, 'FileReader').mockImplementation(() => fileReaderMock);

    // Invoke the method
    const promise = component.convertFileToBase64(mockFile);

    // Simulate a read error
    fileReaderMock.onerror!(error);

    // Wait for the promise to reject
    await expect(promise).rejects.toBe(error);

    // Ensure readAsDataURL was called with the correct file
    expect(fileReaderMock.readAsDataURL).toHaveBeenCalledWith(mockFile);

    // Restore the original FileReader implementation
    fileReaderSpy.mockRestore();
  });
});
