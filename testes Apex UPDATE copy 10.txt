import { TestBed, ComponentFixture } from '@angular/core/testing';
import { YourComponent } from './your-component'; // ajuste
import { MsalService } from '@azure/msal-angular';
import { of } from 'rxjs';

describe('YourComponent - Método setLoginDisplay()', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;

  const mockAccount = {
    username: 'user@test.com',
    idTokenClaims: {
      employeeid: '12345'
    }
  };

  const msalServiceMock = {
    instance: {
      getAllAccounts: jest.fn(),
    },
    acquireTokenSilent: jest.fn()
  };

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MsalService, useValue: msalServiceMock }
      ]
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;

    // Spy no localStorage
    jest.spyOn(window.localStorage.__proto__, 'setItem');
    jest.spyOn(window.localStorage.__proto__, 'clear');
    jest.spyOn(component, 'login'); // caso vá testar chamada ao login()
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('deve limpar o localStorage e chamar login quando não há contas', () => {
    msalServiceMock.instance.getAllAccounts.mockReturnValue([]);

    component.setLoginDisplay();

    expect(localStorage.clear).toHaveBeenCalled();
    expect(component.login).toHaveBeenCalled();
    expect(component.loginDisplay).toBe(false);
  });

  it('deve definir loginDisplay, salvar userLog e token quando há conta', () => {
    msalServiceMock.instance.getAllAccounts.mockReturnValue([mockAccount]);
    msalServiceMock.acquireTokenSilent.mockReturnValue(of({ idToken: 'fake-token' }));

    component.setLoginDisplay();

    expect(component.loginDisplay).toBe(true);
    expect(localStorage.setItem).toHaveBeenCalledWith('userLog', JSON.stringify('12345'));
    expect(localStorage.setItem).toHaveBeenCalledWith('token', 'fake-token');
  });
});
