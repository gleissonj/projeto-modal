import { createElement } from 'lwc';
import MyComponent from 'c/myComponent'; // Adjust this import according to your actual component's path
import { LightningElement } from 'lwc';

// Mock the `lightning-datatable` component
jest.mock('lightning/datatable', () => {
    return {
        LightningDatatable: LightningElement
    };
});

describe('c-my-component', () => {
    let element;

    beforeEach(() => {
        element = createElement('c-my-component', { is: MyComponent });
        document.body.appendChild(element);
    });

    afterEach(() => {
        // Cleanup DOM after each test
        document.body.removeChild(element);
    });

    it('renders the modal header correctly', () => {
        const header = element.shadowRoot.querySelector('.modal-header');
        expect(header).not.toBeNull();
        expect(header.querySelector('h4.title').textContent).toBe('Selecao');
    });

    it('shows the spinner when isLoading is true', async () => {
        element.isLoading = true;
        await element.updateComplete;

        const spinner = element.shadowRoot.querySelector('lightning-spinner');
        expect(spinner).not.toBeNull();
    });

    it('does not show the spinner when isLoading is false', async () => {
        element.isLoading = false;
        await element.updateComplete;

        const spinner = element.shadowRoot.querySelector('lightning-spinner');
        expect(spinner).toBeNull();
    });

    it('renders the lightning-datatable when isLoading is false and withoutLeads is false', async () => {
        element.isLoading = false;
        element.withoutLeads = false;
        await element.updateComplete;

        const datatable = element.shadowRoot.querySelector('lightning-datatable');
        expect(datatable).not.toBeNull();
    });

    it('renders the message when withoutLeads is true', async () => {
        element.isLoading = false;
        element.withoutLeads = true;
        await element.updateComplete;

        const message = element.shadowRoot.querySelector('.title.slds-text-align_center');
        expect(message).not.toBeNull();
        expect(message.textContent).toBe('Esse prospect nao possui');
    });

    it('renders the footer buttons correctly', async () => {
        element.isLoading = false;
        element.withoutLeads = false;
        await element.updateComplete;

        const cancelButton = element.shadowRoot.querySelector('button.slds-button_neutral');
        expect(cancelButton).not.toBeNull();
        expect(cancelButton.textContent).toBe('Cancel');

        const deleteButton = element.shadowRoot.querySelector('button.slds-button_brand');
        expect(deleteButton
