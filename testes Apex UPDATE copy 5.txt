import { ComponentFixture, TestBed } from '@angular/core/testing';
import { DownloadFileComponent } from './download-file.component';
import { S3Service } from './s3.service';
import { HttpClient } from '@angular/common/http';
import { of, throwError } from 'rxjs';

// Mockando o HttpClient
const httpClientMock = {
  get: jest.fn()
};

jest.mock('./s3.service');  // Mockando o S3Service

describe('DownloadFileComponent', () => {
  let component: DownloadFileComponent;
  let fixture: ComponentFixture<DownloadFileComponent>;
  let s3ServiceMock: jest.Mocked<S3Service>;

  beforeEach(() => {
    // Criando o mock do S3Service
    s3ServiceMock = {
      listFiles: jest.fn()
    } as any;

    TestBed.configureTestingModule({
      declarations: [DownloadFileComponent],  // Declarando o componente a ser testado
      providers: [
        { provide: S3Service, useValue: s3ServiceMock },  // Usando o mock do S3Service
        { provide: HttpClient, useValue: httpClientMock }  // Usando o mock do HttpClient
      ]
    })
    .compileComponents();  // Compilando o componente

    fixture = TestBed.createComponent(DownloadFileComponent);  // Criando a instância do componente
    component = fixture.componentInstance;
  });

  it('should be created', () => {
    expect(component).toBeTruthy();  // Teste para garantir que o componente foi criado
  });

  it('should resolve when listFiles is successful', (done) => {
    const mockResponse = ['file1.txt', 'file2.txt'];  // Simulando a resposta do método listFiles

    // Simulando a resposta de listFiles com sucesso
    s3ServiceMock.listFiles.mockReturnValue(of(mockResponse));

    component.loadFiles('myBucket', 'myPrefix')
      .then(response => {
        expect(response).toEqual(mockResponse);  // Verificando se a resposta foi a esperada
        done();
      })
      .catch(done.fail);  // Se houver erro, o teste falhará
  });

  it('should reject when listFiles fails', (done) => {
    const mockError = 'Error loading files';  // Simulando um erro no método listFiles

    // Simulando a falha do método listFiles
    s3ServiceMock.listFiles.mockReturnValue(throwError(() => new Error(mockError)));

    component.loadFiles('myBucket', 'myPrefix')
      .catch(error => {
        expect(error.message).toBe(mockError);  // Verificando se o erro foi o esperado
        done();
      })
      .catch(done.fail);  // Se houver erro, o teste falhará
  });
});
