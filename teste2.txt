import { ComponentFixture, TestBed } from '@angular/core/testing';
import { MyComponent } from './my-component.component'; // Adjust the path as necessary

describe('MyComponent', () => {
  let component: MyComponent;
  let fixture: ComponentFixture<MyComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [MyComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(MyComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should return false and set valueNotFind when no files match', () => {
    // Arrange
    component.valuesNameFile = ['file1', 'file2'];
    component.selectedFiles = [
      { name: 'nonMatchingFile1.txt' },
      { name: 'nonMatchingFile2.txt' }
    ] as any[]; // Simulate FileList with an array of file-like objects

    // Act
    const result = component.validaNameArquivo();

    // Assert
    expect(result).toBe(false);
    expect(component.valueNotFind).toBe('file1'); // It stops at the first non-match
  });

  it('should return true when all files match the values', () => {
    // Arrange
    component.valuesNameFile = ['file1', 'file2'];
    component.selectedFiles = [
      { name: 'file1.txt' },
      { name: 'file2.txt' }
    ] as any[]; // Simulate FileList with an array of file-like objects

    // Act
    const result = component.validaNameArquivo();

    // Assert
    expect(result).toBe(true);
    expect(component.valueNotFind).toBeUndefined();
  });

  it('should return false and set valueNotFind when only some files match', () => {
    // Arrange
    component.valuesNameFile = ['file1', 'file2', 'file3'];
    component.selectedFiles = [
      { name: 'file1.txt' },
      { name: 'file3.txt' }
    ] as any[]; // Simulate FileList with an array of file-like objects

    // Act
    const result = component.validaNameArquivo();

    // Assert
    expect(result).toBe(false);
    expect(component.valueNotFind).toBe('file2'); // The first missing value
  });
});
