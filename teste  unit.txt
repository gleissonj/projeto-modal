import { TestBed } from '@angular/core/testing';
import { MatSnackBar } from '@angular/material/snack-bar';
import { YourComponent } from './your-component';
import { of } from 'rxjs'; // For mocking observables if needed

describe('YourComponent', () => {
  let component: YourComponent;
  let snackBar: MatSnackBar;

  beforeEach(() => {
    const snackBarMock = {
      open: jest.fn()
    };

    TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [{ provide: MatSnackBar, useValue: snackBarMock }],
    }).compileComponents();

    const fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
    snackBar = TestBed.inject(MatSnackBar);
  });

  it('should set loading to false and call snackBar.open with correct arguments for info type', () => {
    const message = 'Info message';
    const type = 'info';

    component.showMessage(message, type);

    expect(component.loading).toBe(false);
    expect(snackBar.open).toHaveBeenCalledWith(message, 'Ok', {
      duration: 3000,
      horizontalPosition: 'end',
      verticalPosition: 'bottom',
      panelClass: ['info-snackbar'],
    });
  });

  it('should set loading to false and call snackBar.open with correct arguments for error type', () => {
    const message = 'Error message';
    const type = 'error';

    component.showMessage(message, type);

    expect(component.loading).toBe(false);
    expect(snackBar.open).toHaveBeenCalledWith(message, 'Ok', {
      duration: 3000,
      horizontalPosition: 'end',
      verticalPosition: 'bottom',
      panelClass: ['error-snackbar'],
    });
  });
});
