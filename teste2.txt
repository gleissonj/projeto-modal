describe('alteraVisualizacao', () => {
    let instance: YourClass; // Substitua `YourClass` pelo nome da classe onde `alteraVisualizacao` está implementado

    beforeEach(() => {
        instance = new YourClass();
        jest.spyOn(instance, 'verificaPermissaoUpload');
        jest.spyOn(instance, 'showMessage');
    });

    it('deve definir typeFunc como 0 e exibir mensagem de erro se o usuário não tiver permissão', () => {
        // Mocka verificaPermissaoUpload para retornar false
        (instance.verificaPermissaoUpload as jest.Mock).mockReturnValue(false);

        // Chama o método
        instance.alteraVisualizacao(2, 'Prospect');

        // Verifica se typeFunc foi definido como 0
        expect(instance.typeFunc).toBe(0);
        // Verifica se showMessage foi chamado com os parâmetros corretos
        expect(instance.showMessage).toHaveBeenCalledWith(
            'Voce nao possui a permissao para upload, favor entrar em contato com o ADM',
            'errror'
        );
    });

    it('deve definir typeFunc, nameFunc e selectedTeam corretamente se o usuário tiver permissão', () => {
        // Mocka verificaPermissaoUpload para retornar true
        (instance.verificaPermissaoUpload as jest.Mock).mockReturnValue(true);

        // Chama o método
        instance.alteraVisualizacao(2, 'Prospect');

        // Verifica se typeFunc, nameFunc e selectedTeam foram definidos corretamente
        expect(instance.typeFunc).toBe(2);
        expect(instance.nameFunc).toBe('Prospect');
        expect(instance.selectedTeam).toBe('information');
        // Verifica que showMessage não foi chamado
        expect(instance.showMessage).not.toHaveBeenCalled();
    });
});
