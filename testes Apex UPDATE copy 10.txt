import { ComponentFixture, TestBed } from '@angular/core/testing';
import { YourComponent } from './your-component';
import { MultipartUploadService } from 'path-to-service';
import { of } from 'rxjs';

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let multipartUploadServiceMock: any;

  // Mock manual do localStorage
  const localStorageMock = (() => {
    let store: Record<string, string> = {};

    return {
      getItem: (key: string) => store[key] || null,
      setItem: (key: string, value: string) => { store[key] = value; },
      removeItem: (key: string) => { delete store[key]; },
      clear: () => { store = {}; },
    };
  })();

  beforeAll(() => {
    // Sobrescreve o localStorage do navegador com nosso mock
    Object.defineProperty(window, 'localStorage', {
      value: localStorageMock,
    });
  });

  beforeEach(() => {
    // Prepara o conteúdo do "localStorage"
    window.localStorage.setItem('gruposAcessos', JSON.stringify(['admin']));

    multipartUploadServiceMock = {
      responseWithSuccessOrError$: of({ message: 'Erro ao processar' }),
    };

    TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MultipartUploadService, useValue: multipartUploadServiceMock }
      ]
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;

    // Espiando métodos do componente
    jest.spyOn(component, 'verificaAutorizacao');
    jest.spyOn(component, 'verificaUserOportunidades');
    jest.spyOn(component, 'startStepFunctionProspect');
    jest.spyOn(component, 'showMessage');

    // Estado necessário para o teste
    component.nameFunc = 'Prospect';
    component.selectedFiles = [];
  });

  afterEach(() => {
    window.localStorage.clear(); // Limpa o "localStorage" entre testes
    jest.clearAllMocks();        // Limpa todos os spies/mocks
  });

  it('deve executar ngOnInit corretamente para Prospect', (done) => {
    component.ngOnInit();

    expect(component.verificaAutorizacao).toHaveBeenCalled();
    expect(component.verificaUserOportunidades).toHaveBeenCalled();
    expect(component.gruposAcessos).toEqual(['admin']);

    setTimeout(() => {
      expect(component.startStepFunctionProspect).toHaveBeenCalled();
      expect(component.showMessage).toHaveBeenCalledWith('Erro ao processar', 'error');
      done();
    }, 5100); // Espera o setTimeout do showMessage
  });
});





import { fakeAsync, tick } from '@angular/core/testing';

it('deve executar ngOnInit corretamente para Prospect', fakeAsync(() => {
  component.ngOnInit();

  expect(component.verificaAutorizacao).toHaveBeenCalled();
  expect(component.verificaUserOportunidades).toHaveBeenCalled();

  // Simula o tempo passando
  tick(5100);

  expect(component.startStepFunctionProspect).toHaveBeenCalled();
  expect(component.showMessage).toHaveBeenCalledWith('Erro ao processar', 'error');
}));
