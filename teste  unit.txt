import { createElement } from 'lwc';
import MyComponent from 'c/myComponent'; // Replace with the actual component path

describe('c-my-component', () => {
    let element;

    beforeEach(() => {
        element = createElement('c-my-component', { is: MyComponent });
        document.body.appendChild(element);

        // Mock the showError method
        element.showError = jest.fn();
    });

    afterEach(() => {
        // Clean up the DOM after each test
        document.body.removeChild(element);
        jest.clearAllMocks();
    });

    it('calls showError and returns true when selectedLeads contains a lead with falsy HU7_IdEQ3__c', () => {
        // Arrange: Mock the selectedLeads array with a lead having a falsy HU7_IdEQ3__c
        element.selectedLeads = [
            { Prospect__r: { HU7_IdEQ3__c: null } }, // Falsy value
            { Prospect__r: { HU7_IdEQ3__c: 'some_value' } } // Truthy value
        ];

        // Act: Call the method
        const result = element.checkIdEq3();

        // Assert: Check if showError was called with the correct argument
        expect(element.showError).toHaveBeenCalledWith('Nao Ã© possivel enviar o convite');
        // Assert: Check the return value
        expect(result).toBe(true);
    });

    it('does not call showError and returns false when all leads have truthy HU7_IdEQ3__c', () => {
        // Arrange: Mock the selectedLeads array with all leads having a truthy HU7_IdEQ3__c
        element.selectedLeads = [
            { Prospect__r: { HU7_IdEQ3__c: 'value1' } },
            { Prospect__r: { HU7_IdEQ3__c: 'value2' } }
        ];

        // Act: Call the method
        const result = element.checkIdEq3();

        // Assert: Check if showError was not called
        expect(element.showError).not.toHaveBeenCalled();
        // Assert: Check the return value
        expect(result).toBe(false);
    });
});
