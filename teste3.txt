describe('verificaPermissaoUpload', () => {
    let instance: YourClass; // Substitua YourClass pelo nome da classe onde a função está implementada

    beforeEach(() => {
        instance = new YourClass();
    });

    it('deve retornar true se a permissão necessária estiver em gruposAcessos', () => {
        instance.gruposAcessos = ['permission1', 'permission2', environment.permissionsProspect];
        expect(instance.verificaPermissaoUpload('Prospect')).toBe(true);
    });

    it('deve retornar false se a permissão necessária não estiver em gruposAcessos', () => {
        instance.gruposAcessos = ['permission1', 'permission2'];
        expect(instance.verificaPermissaoUpload('Prospect')).toBe(false);
    });

    it('deve retornar false se gruposAcessos for undefined e a permissão necessária existir', () => {
        instance.gruposAcessos = undefined;
        expect(instance.verificaPermissaoUpload('Prospect')).toBe(false);
    });

    it('deve retornar true se nameFunc não requer permissão especial', () => {
        instance.gruposAcessos = ['permission1', 'permission2'];
        expect(instance.verificaPermissaoUpload('nonExistingNameFunc')).toBe(true);
    });
});
