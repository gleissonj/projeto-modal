validaNameArquivo(namesFile: string[]): boolean {
  for (const name of namesFile) {
    if (!this.selectedFiles.some(file => file.name.includes(name))) {
      this.valueNotFind = name;
      return false;
    }
  }
  return true;
}

async uploadArquivoAWS() {
  if (this.nameFunc !== "OPP" && this.nameFunc !== "territorios") {
    return this.updateFileOne();
  }

  const validationRules = {
    OPP: {
      expectedFileCount: 5,
      expectedFileNames: ["analitico", "consolidado", "teste1", "teste2", "teste3"],
    },
    hierarquia_comercial: {
      expectedFileCount: 5,
      expectedFileNames: ["teste5", "teste6", "teste7", "teste8", "teste9", "teste10"],
    },
    reestruturacao: {
      expectedFileCount: 2,
      expectedFileNames: ["teste11", "teste12"],
    },
  };

  const rules = validationRules[this.nameFunc];

  if (rules) {
    // Valida a quantidade de arquivos
    if (this.selectedFiles.length !== rules.expectedFileCount) {
      return this.showMessage(
        `Você deve anexar ${rules.expectedFileCount} arquivo(s)`,
        "error"
      );
    }

    // Valida os nomes dos arquivos
    const isValidName = this.validaNameArquivo(rules.expectedFileNames);

    if (!isValidName) {
      return this.showMessage(
        `O nome do arquivo enviado não corresponde ao nome esperado: ${this.valueNotFind}`,
        "error"
      );
    }

    // Atualiza múltiplos arquivos
    return this.updateFileMultiple();
  }
}
