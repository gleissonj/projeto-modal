import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of, Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { MyComponent } from './my-component.component'; // Adjust the path as necessary
import { InteractionStatus } from '@azure/msal-browser';

describe('MyComponent', () => {
  let component: MyComponent;
  let fixture: ComponentFixture<MyComponent>;
  let broadcastServiceMock: any;
  let destroying$: Subject<void>;

  beforeEach(async () => {
    // Mock the broadcastService and its inProgress$ observable
    broadcastServiceMock = {
      inProgress$: new Subject<InteractionStatus>()
    };

    destroying$ = new Subject<void>();

    await TestBed.configureTestingModule({
      declarations: [MyComponent],
      providers: [
        { provide: 'BroadcastService', useValue: broadcastServiceMock },
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(MyComponent);
    component = fixture.componentInstance;
    component._destroying$ = destroying$; // Assign the destroying subject to the component
    fixture.detectChanges();
  });

  afterEach(() => {
    // Complete the destroying$ subject to clean up
    destroying$.next();
    destroying$.complete();
  });

  it('should call setLoginDisplay when InteractionStatus is None', () => {
    // Spy on the setLoginDisplay method
    const setLoginDisplaySpy = jest.spyOn(component, 'setLoginDisplay');

    // Emit the InteractionStatus.None value
    broadcastServiceMock.inProgress$.next(InteractionStatus.None);

    // Assert that setLoginDisplay is called
    expect(setLoginDisplaySpy).toHaveBeenCalled();
  });

  it('should not call setLoginDisplay when InteractionStatus is not None', () => {
    // Spy on the setLoginDisplay method
    const setLoginDisplaySpy = jest.spyOn(component, 'setLoginDisplay');

    // Emit a different InteractionStatus (e.g., InteractionStatus.Login)
    broadcastServiceMock.inProgress$.next(InteractionStatus.Login);

    // Assert that setLoginDisplay is not called
    expect(setLoginDisplaySpy).not.toHaveBeenCalled();
  });
});
