using Amazon.CloudWatchEvents;
using Amazon.CloudWatchEvents.Model;
using Moq;
using System.Threading.Tasks;
using Xunit;

public class YourClassTests
{
    [Fact]
    public async Task AlteraCronStep_ShouldUpdateRule_WithModifiedScheduleExpression()
    {
        // Arrange
        var mockClient = new Mock<IAmazonCloudWatchEvents>();

        var ruleName = "YourCloudWatchRuleName";
        var stateMachineArn = "fdfd";
        var originalScheduleExpression = "rate(5 minutes)";
        var modifiedScheduleExpression = "rate(10 minutes)"; // Assuming ModifyRule changes it to this.

        mockClient.Setup(c => c.DescribeRuleAsync(It.Is<DescribeRuleRequest>(r => r.Name == ruleName), default))
            .ReturnsAsync(new DescribeRuleResponse
            {
                Name = ruleName,
                ScheduleExpression = originalScheduleExpression
            });

        mockClient.Setup(c => c.PutRuleAsync(It.IsAny<PutRuleRequest>(), default))
            .Returns(Task.CompletedTask);

        var yourClass = new YourClass(mockClient.Object);

        // Act
        await yourClass.AlteraCronStep();

        // Assert
        mockClient.Verify(c => c.DescribeRuleAsync(It.Is<DescribeRuleRequest>(r => r.Name == ruleName), default), Times.Once);
        mockClient.Verify(c => c.PutRuleAsync(It.Is<PutRuleRequest>(r => 
            r.Name == ruleName && r.ScheduleExpression == modifiedScheduleExpression), default), Times.Once);
    }
}

public class YourClass
{
    private readonly IAmazonCloudWatchEvents _client;

    public YourClass(IAmazonCloudWatchEvents client)
    {
        _client = client;
    }

    public async Task AlteraCronStep()
    {
        var ruleName = "YourCloudWatchRuleName";
        var stateMachineArn = "fdfd";

        var getRuleResponse = await _client.DescribeRuleAsync(new DescribeRuleRequest
        {
            Name = ruleName
        });

        var updateRule = ModifyRule(getRuleResponse.ScheduleExpression, stateMachineArn);

        await _client.PutRuleAsync(new PutRuleRequest
        {
            Name = ruleName,
            ScheduleExpression = updateRule
        });
    }

    private string ModifyRule(string scheduleExpression, string stateMachineArn)
    {
        // Logic to modify the schedule expression
        return "rate(10 minutes)";
    }
}
