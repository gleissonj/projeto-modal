import { LightningElement, track, api } from 'lwc';
import getApontamento from '@salesforce/apex/ApontamentoController.getApontamento';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class SearchApontamento extends LightningElement {
    dataWithOptions = [
        {
            name: 'John Doe',
            cpf: '123.456.789-10',
            phones: [
                { value: '1111-11115', type: 'mobile' },
                { value: '2222-2222', type: 'home' }
            ],
            emails: [
                { value: 'john@email.com', type: 'personal' },
                { value: 'doe@email.com', type: 'work' }
            ]
        },
        {
            name: 'Jane Doe',
            cpf: '987.654.321-00',
            phones: [
                { value: '3333-3333', type: 'mobile' },
                { value: '4444-4444', type: 'home' }
            ],
            emails: [
                { value: 'jane@email.com', type: 'personal' },
                { value: 'jane.doe@email.com', type: 'work' }
            ]
        }
    ];

    // Variável que armazenará a estrutura com opções para cada item
    processedData = [];

    connectedCallback() {
        // Processa os dados de forma dinâmica
        this.processData();
    }

    processData() {
       // Itera sobre cada item da dataWithOptions e adiciona os campos necessários
       this.processedData = this.dataWithOptions.map((item, index) => ({
        ...item,  // Mantém os dados originais
        id: `${item.name}-${index}`,  // ID único para cada linha
        selectedPhone: '',  // Inicializa com vazio (sem telefone selecionado)
        selectedEmail: '',  // Inicializa com vazio (sem email selecionado)
        telefoneOptions: item.phones.map(p => ({ label: p.value, value: p.value })),
        emailOptions: item.emails.map(e => ({ label: e.value, value: e.value }))
    }));
    }

    handleSelectChange(event) {
        const rowId = event.target.dataset.id;  // Obtém o id da linha
    const selectedValue = event.target.value;  // Obtém o valor selecionado no combobox
    
    console.log('Evento disparado para linha:', rowId);
    console.log('Valor selecionado:', selectedValue);
    
    // Encontre a linha pelo id e atualize o valor selecionado
    const index = this.processedData.findIndex(row => row.id == rowId);
    
    if (index !== -1) {
        // Verifica se o campo é o 'selectedPhone' ou 'selectedEmail'
        const fieldName = event.target.name === 'selectedPhone' ? 'selectedPhone' :
                          event.target.name === 'selectedEmail' ? 'selectedEmail' : '';
        
        if (fieldName) {
            // Atualiza o valor do campo no processedData
            this.processedData[index][fieldName] = selectedValue;
            console.log('Estado atualizado do processedData:', JSON.stringify(this.processedData));
        }
    }
    }

    handleConfirm() {
        console.log('Seleções confirmadas:', JSON.stringify(this.processedData));
        this.closeModal();  // Fechar o modal após confirmar
    }
}