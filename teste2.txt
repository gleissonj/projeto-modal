import { YourComponent } from './your-component.component';

describe('YourComponent - getValueNameOperation', () => {
  let component: YourComponent;

  beforeEach(() => {
    component = new YourComponent();
  });

  it('deve retornar a substring antes do primeiro ponto', () => {
    const name = 'arquivo.teste.txt';
    const result = component.getValueNameOperation(name);
    expect(result).toBe('arquivo');
  });

  it('deve retornar a string inteira se não houver ponto', () => {
    const name = 'arquivoSemPonto';
    const result = component.getValueNameOperation(name);
    expect(result).toBe('arquivoSemPonto');
  });

  it('deve retornar uma string vazia se o nome for uma string vazia', () => {
    const name = '';
    const result = component.getValueNameOperation(name);
    expect(result).toBe('');
  });

  it('deve retornar undefined se o nome for null', () => {
    const name = null;
    const result = component.getValueNameOperation(name);
    expect(result).toBeUndefined();
  });

  it('deve retornar undefined se o nome for undefined', () => {
    const name = undefined;
    const result = component.getValueNameOperation(name);
    expect(result).toBeUndefined();
  });

  it('deve lidar com nomes contendo apenas um ponto no início', () => {
    const name = '.hiddenfile';
    const result = component.getValueNameOperation(name);
    expect(result).toBe('');
  });

  it('deve lidar com nomes contendo apenas um ponto no final', () => {
    const name = 'arquivo.';
    const result = component.getValueNameOperation(name);
    expect(result).toBe('arquivo');
  });
});
