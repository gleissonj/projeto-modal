import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of } from 'rxjs';
import { YourComponent } from './your.component'; // Replace with actual component
import { MultipartUploadService } from './multipart-upload.service'; // Replace with actual service

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let mockMultipartUploadService: Partial<MultipartUploadService>;
  let showMessageSpy: jest.SpyInstance;

  beforeEach(async () => {
    // Mock the multipartUploadService
    mockMultipartUploadService = {
      sendFilesToMultipartUpload: jest.fn(),
    };

    await TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MultipartUploadService, useValue: mockMultipartUploadService },
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;

    // Spy on showMessage method
    showMessageSpy = jest.spyOn(component, 'showMessage');
    fixture.detectChanges();
  });

  it('should show error if no file is selected', async () => {
    component.file = undefined;

    await component.uploadArquivoAWS();

    expect(showMessageSpy).toHaveBeenCalledWith('Você deve anexar um arquivo', 'error');
  });

  it('should show error if typeFunc is empty', async () => {
    component.file = new File([], 'example.txt');
    component.typeFunc = '';

    await component.uploadArquivoAWS();

    expect(showMessageSpy).toHaveBeenCalledWith('Você deve informar o nome da função', 'error');
  });

  it('should show error if typeSubFunc is empty', async () => {
    component.file = new File([], 'example.txt');
    component.typeFunc = 'SomeFunc';
    component.typeSubFunc = '';

    await component.uploadArquivoAWS();

    expect(showMessageSpy).toHaveBeenCalledWith('Você deve informar o nome da subfunção', 'error');
  });

  it('should call convertFileToBase64 and sendFilesToMultipartUpload on valid input', async () => {
    const mockFile = new File([], 'example.txt');
    component.file = mockFile;
    component.typeFunc = 'SomeFunc';
    component.typeSubFunc = 'SomeSubFunc';

    // Mock convertFileToBase64 to return a base64 string
    jest.spyOn(component, 'convertFileToBase64').mockResolvedValue('base64data');
    
    await component.uploadArquivoAWS();

    expect(component.loading).toBe(true);
    expect(component.subindoArquivo).toBe(true);
    expect(component.convertFileToBase64).toHaveBeenCalledWith(mockFile);
    expect(mockMultipartUploadService.sendFilesToMultipartUpload).toHaveBeenCalled();
  });
});
