using Moq;
using Amazon.S3;
using Amazon.S3.Model;
using System.IO;
using System.Threading.Tasks;
using Xunit;

public class S3ServiceTests
{
    [Fact]
    public async Task GetObjectAsync_Should_Return_Correct_Response()
    {
        // Arrange
        var mockS3Client = new Mock<IAmazonS3>();

        var expectedResponse = new GetObjectResponse
        {
            HttpStatusCode = System.Net.HttpStatusCode.OK,
            BucketName = "example-bucket",
            Key = "example-object-key",
            ResponseStream = GenerateSampleStream("sample data"), // Mocked response stream
            Metadata = new System.Collections.Generic.Dictionary<string, string>
            {
                { "key1", "value1" },
                { "key2", "value2" }
            }
        };

        mockS3Client
            .Setup(x => x.GetObjectAsync(It.Is<GetObjectRequest>(r =>
                r.BucketName == "example-bucket" &&
                r.Key == "example-object-key"), default))
            .ReturnsAsync(expectedResponse);

        var s3Service = new S3Service(mockS3Client.Object);

        // Act
        var response = await s3Service.GetObjectAsync("example-bucket", "example-object-key");

        // Assert
        Assert.NotNull(response);
        Assert.Equal(System.Net.HttpStatusCode.OK, response.HttpStatusCode);
        Assert.Equal("sample data", await new StreamReader(response.ResponseStream).ReadToEndAsync());
        Assert.Contains("key1", response.Metadata);
        Assert.Contains("value1", response.Metadata);
    }

    // Helper method to create a sample stream
    private Stream GenerateSampleStream(string data)
    {
        var stream = new MemoryStream();
        var writer = new StreamWriter(stream);
        writer.Write(data);
        writer.Flush();
        stream.Position = 0; // Reset the stream position to the beginning
        return stream;
    }
}
