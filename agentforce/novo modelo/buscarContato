public with sharing class BuscarContatosPorGrupoENome2 {

    public class Request {
        @InvocableVariable public Id accountId;
        @InvocableVariable public String nomeContato;
    }

    public class DadosContato {
        @InvocableVariable public String nomeContato;
        @InvocableVariable public String perfilContato;
        @InvocableVariable public String telefoneContato;
        @InvocableVariable public String emailContato;
        @InvocableVariable public String nomeGrupo;
        @InvocableVariable public String codigoGrupo;
        @InvocableVariable public String cargoContato;
    }

    public class Response {
        @InvocableVariable public List<DadosContato> dadoscontato;
    }

    @InvocableMethod(label='Buscar Contatos por Grupo e Nome2')
    public static List<Response> run(List<Request> requisicoes) {
        List<Response> respostas = new List<Response>();

        if (requisicoes == null || requisicoes.isEmpty()) return respostas;

        for (Request req : requisicoes) {
            List<AccountContactRelation__c> contatos = buscarContatos(req);
            List<DadosContato> contatosFiltrados = filtrarContatosParaRequest(contatos, req);

            Response resp = new Response();
            resp.dadoscontato = contatosFiltrados;
            respostas.add(resp);
        }

        return respostas;
    }

    // Refatorado: cada request gera sua query com base nos filtros presentes
    private static List<AccountContactRelation__c> buscarContatos(Request req) {
        String query = buildQuery(req);
        if (String.isBlank(query)) return new List<AccountContactRelation__c>();
        return Database.query(query);
    }

    // Método seguro para gerar a query dinamicamente
    private static String buildQuery(Request req) {
        List<String> conditions = new List<String>();

        if (!String.isBlank(req.nomeContato)) {
            String nomeEscapado = String.escapeSingleQuotes(req.nomeContato);
            conditions.add("Name LIKE '" + nomeEscapado + "%'");
        }

        if (req.accountId != null) {
            conditions.add("AccountId__c = '" + String.escapeSingleQuotes(String.valueOf(req.accountId)) + "'");
        }

        if (conditions.isEmpty()) return null;

        return 'SELECT AccountId__r.Name, AccountId__r.Hu7IDExterno__c, ' +
               'Name, Email__c, CPF__c, Cargo__c, Perfil__c ' +
               'FROM AccountContactRelation__c WHERE ' + String.join(conditions, ' AND ');
    }

    private static List<DadosContato> filtrarContatosParaRequest(List<AccountContactRelation__c> contatos, Request req) {
        List<DadosContato> resultado = new List<DadosContato>();

        Boolean filtrarPorId = req.accountId != null;
        Boolean filtrarPorNome = !String.isBlank(req.nomeContato);
        String nomeInputLower = filtrarPorNome ? req.nomeContato.toLowerCase() : null;

        for (AccountContactRelation__c rel : contatos) {
            if (filtrarPorId && rel.AccountId__c != req.accountId) continue;
            if (filtrarPorNome) {
                if (rel.Name == null || !rel.Name.toLowerCase().startsWith(nomeInputLower)) continue;
            }

            DadosContato contato = new DadosContato();
            contato.nomeContato     = rel.Name;
            contato.emailContato    = rel.Email__c;
            contato.telefoneContato = '123456'; // ⚠️ Ajuste aqui se tiver o campo real
            contato.perfilContato
