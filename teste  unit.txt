import { createElement } from 'lwc';
import MyComponent from 'c/myComponent'; // Replace with your actual component name

describe('c-my-component', () => {
    let element;

    beforeEach(() => {
        element = createElement('c-my-component', {
            is: MyComponent
        });
        document.body.appendChild(element);
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('displays the spinner when isLoading is true', async () => {
        // Set isLoading to true
        element.isLoading = true;
        await Promise.resolve(); // Wait for re-render

        // Check if spinner is present
        const spinner = element.shadowRoot.querySelector('lightning-spinner');
        expect(spinner).not.toBeNull();

        // Check that input fields are not rendered
        const inputFields = element.shadowRoot.querySelectorAll('lightning-input-field');
        expect(inputFields.length).toBe(0);
    });

    it('displays the input fields when isLoading is false', async () => {
        // Set isLoading to false
        element.isLoading = false;
        await Promise.resolve(); // Wait for re-render

        // Check that spinner is not present
        const spinner = element.shadowRoot.querySelector('lightning-spinner');
        expect(spinner).toBeNull();

        // Check if input fields are present
        const inputFields = element.shadowRoot.querySelectorAll('lightning-input-field');
        expect(inputFields.length).toBe(3); // Ensure all fields are rendered
    });

    it('calls handleLoad when the form is loaded', async () => {
        // Mock the handleLoad method
        element.handleLoad = jest.fn();
        await Promise.resolve(); // Wait for re-render

        // Simulate the onload event
        const form = element.shadowRoot.querySelector('lightning-record-edit-form');
        form.dispatchEvent(new CustomEvent('load'));

        // Check if handleLoad was called
        expect(element.handleLoad).toHaveBeenCalled();
    });

    it('calls handleSubmit when the form is submitted', async () => {
        // Mock the handleSubmit method
        element.handleSubmit = jest.fn();
        await Promise.resolve(); // Wait for re-render

        // Simulate the onsubmit event
        const form = element.shadowRoot.querySelector('lightning-record-edit-form');
        form.dispatchEvent(new CustomEvent('submit', {
            detail: { fields: {} }
        }));

        // Check if handleSubmit was called
        expect(element.handleSubmit).toHaveBeenCalled();
    });

    it('calls handleSuccess when the form submission is successful', async () => {
        // Mock the handleSuccess method
        element.handleSuccess = jest.fn();
        await Promise.resolve(); // Wait for re-render

        // Simulate the onsuccess event
        const form = element.shadowRoot.querySelector('lightning-record-edit-form');
        form.dispatchEvent(new CustomEvent('success'));

        // Check if handleSuccess was called
        expect(element.handleSuccess).toHaveBeenCalled();
    });

    it('calls
