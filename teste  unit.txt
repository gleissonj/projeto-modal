@isTest
private class ProcessApontamentoTest {
    
    @testSetup
    static void setupTestData() {
        // Create test data here
        // Example: inserting a record type
        RecordType rt = new RecordType(
            Name = 'Test Record Type',
            SObjectType = Lead.SObjectType.getDescribe().getName()
        );
        insert rt;
        
        // Example: inserting a Lead
        Lead existingLead = new Lead(
            FirstName = 'John',
            LastName = 'Doe',
            HU7_Cpf__c = '12345678901',
            Email = 'john.doe@example.com',
            RecordTypeId = rt.Id
        );
        insert existingLead;
    }
    
    @isTest
    static void testProcessApontamentoInsertNewLead() {
        // Arrange
        RecordType rt = [SELECT Id FROM RecordType WHERE Name = 'Test Record Type' LIMIT 1];
        Id recordIdPage = 'someRecordId'; // Replace with actual ID if needed
        FS1_ContactSocioResponse lead = new FS1_ContactSocioResponse();
        lead.cpf = '98765432100';
        lead.nome = 'Jane Doe';
        lead.emails = new List<EmailWrapper>{
            new EmailWrapper('jane.doe@example.com')
        };
        lead.telefones = new List<TelefoneWrapper>{
            new TelefoneWrapper('55', '11', '987654321')
        };
        lead.optOutTelefone = new OptOutTelefoneWrapper(false);
        
        // Act
        Test.startTest();
        MyClass.processApontamento(lead, rt.Id, recordIdPage);
        Test.stopTest();
        
        // Assert
        Lead insertedLead = [SELECT Id, FirstName, LastName, HU7_Cpf__c FROM Lead WHERE HU7_Cpf__c = :lead.cpf];
        System.assertNotEquals(null, insertedLead, 'New Lead should have been inserted');
        System.assertEquals('Jane', insertedLead.FirstName);
        System.assertEquals('Doe', insertedLead.LastName);
    }
    
    @isTest
    static void testProcessApontamentoUpdateExistingLead() {
        // Arrange
        Lead existingLead = [SELECT Id, FirstName, LastName, HU7_Cpf__c FROM Lead WHERE HU7_Cpf__c = '12345678901' LIMIT 1];
        RecordType rt = [SELECT Id FROM RecordType WHERE Name = 'Test Record Type' LIMIT 1];
        Id recordIdPage = 'someRecordId'; // Replace with actual ID if needed
        FS1_ContactSocioResponse lead = new FS1_ContactSocioResponse();
        lead.cpf = '12345678901';
        lead.nome = 'John Smith';
        lead.emails = new List<EmailWrapper>{
            new EmailWrapper('john.smith@example.com')
        };
        lead.telefones = new List<TelefoneWrapper>{
            new TelefoneWrapper('55', '11', '987654321')
        };
        lead.optOutTelefone = new OptOutTelefoneWrapper(false);
        
        // Act
        Test.startTest();
        MyClass.processApontamento(lead, rt.Id, recordIdPage);
        Test.stopTest();
        
        // Assert
        Lead updatedLead = [SELECT Id, FirstName, LastName, HU7_Cpf__c FROM Lead WHERE Id = :existingLead.Id];
        System.assertEquals('John', updatedLead.FirstName);
        System.assertEquals('Smith', updatedLead.LastName);
    }
}

// Helper classes for the test
private class EmailWrapper {
    public String valor_dado_cadastral;
    public EmailWrapper(String email) {
        this.valor_dado_cadastral = email;
    }
}

private class TelefoneWrapper {
    public String ddi;
    public String ddd;
    public String numero;
    public TelefoneWrapper(String ddi, String ddd, String numero) {
        this.ddi = ddi;
        this.ddd = ddd;
        this.numero = numero;
    }
}

private class OptOutTelefoneWrapper {
    public Boolean indicador_possui_telefone_bloqueado;
    public OptOutTelefoneWrapper(Boolean isBlocked) {
        this.indicador_possui_telefone_bloqueado = isBlocked;
    }
}
