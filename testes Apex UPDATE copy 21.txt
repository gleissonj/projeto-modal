import { createElement } from 'lwc';
import Jx1Asset from 'c/jx1Asset';
import { FlowAttributeChangeEvent } from 'lightning/flowSupport';

describe('c-jx1-asset', () => {
    let element;

    beforeEach(() => {
        // Cria uma nova instância do componente antes de cada teste
        element = createElement('c-jx1-asset', {
            is: Jx1Asset
        });
        document.body.appendChild(element);
    });

    it('deve inicializar com assets vazios', () => {
        // Verifique se o valor de _assets é um array vazio
        expect(element.assets).toEqual([]);
    });

    it('deve definir e obter assets corretamente', () => {
        const assetsData = [
            { Name: 'Ativo 1', Produto__c: 'Produto 1' },
            { Name: 'Ativo 2', Produto__c: 'Produto 2' }
        ];

        // Definindo o valor de assets via setter
        element.assets = assetsData;

        // Verificando se o getter retorna os valores corretamente
        expect(element.assets).toEqual(assetsData);
    });

    it('deve disparar FlowAttributeChangeEvent quando handlerRowSelection for chamado', () => {
        // Simula a seleção de linhas no evento
        const mockSelectedRows = [
            { Name: 'Ativo 1', Produto__c: 'Produto 1' },
            { Name: 'Ativo 2', Produto__c: 'Produto 2' }
        ];

        const event = {
            detail: { selectedRows: mockSelectedRows }
        };

        // Espia no dispatchEvent
        const flowEventSpy = jest.spyOn(element, 'dispatchEvent');

        // Chama o método handlerRowSelection
        element.handlerRowSelection(event);

        // Verifica se o evento foi disparado com os dados corretos
        expect(flowEventSpy).toHaveBeenCalled();
        expect(flowEventSpy).toHaveBeenCalledWith(
            expect.objectContaining({
                type: FlowAttributeChangeEvent.name,
                detail: { selectedRows: mockSelectedRows }
            })
        );
    });
});



// __mocks__/lightning/flowSupport.js

export class FlowAttributeChangeEvent {
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
}


// tests/jest-mocks/lightning/flowSupport.js

export class FlowAttributeChangeEvent {
  constructor(attributeName, value) {
    this.attributeName = attributeName;
    this.value = value;
    this.type = 'FlowAttributeChangeEvent';
  }
}



// tests/lwc/jx1AssetListToFlow/jx1AssetListToFlow.test.js

import { createElement } from 'lwc';
import Jx1AssetListToFlow from 'c/jx1AssetListToFlow';
import { FlowAttributeChangeEvent } from 'lightning/flowSupport';

describe('c-jx1-asset-list-to-flow', () => {
    let element;

    beforeEach(() => {
        element = createElement('c-jx1-asset-list-to-flow', {
            is: Jx1AssetListToFlow
        });
        document.body.appendChild(element);
    });

    it('deve iniciar com assets vazios', () => {
        expect(element.assets).toEqual([]);
    });

    it('deve definir e recuperar os assets corretamente', () => {
        const mockAssets = [
            { Name: 'Ativo 1', Produto__c: 'Produto A' },
            { Name: 'Ativo 2', Produto__c: 'Produto B' }
        ];

        element.assets = mockAssets;
        expect(element.assets).toEqual(mockAssets);
    });

    it('deve disparar FlowAttributeChangeEvent ao selecionar linhas', () => {
        const selectedRows = [
            { Name: 'Ativo X', Produto__c: 'Produto X' }
        ];

        const mockEvent = {
            detail: { selectedRows }
        };

        const dispatchSpy = jest.spyOn(element, 'dispatchEvent');
        element.handlerRowSelection(mockEvent);

        expect(dispatchSpy).toHaveBeenCalledWith(
            expect.objectContaining({
                type: 'FlowAttributeChangeEvent',
                attributeName: 'assetswithcheck',
                value: selectedRows
            })
        );
    });
});
