using Amazon.Glue;
using Amazon.Glue.Model;
using Moq;
using System.Threading.Tasks;
using Xunit;

public class YourClassTests
{
    [Fact]
    public async Task StartJobRunAsync_WithSpecificRequest_ReturnsMockedResponse()
    {
        // Arrange
        var mockAmazonGlueClient = new Mock<IAmazonGlue>();

        // Create a specific StartJobRunRequest
        var startJobRunRequest = new StartJobRunRequest
        {
            JobName = "TestJob",
            Arguments = new Dictionary<string, string>
            {
                { "--arg1", "value1" }
            }
        };

        // Create a mock StartJobRunResponse
        var mockResponse = new StartJobRunResponse
        {
            JobRunId = "mockJobRunId"
        };

        // Setup the mock to return the mock response when StartJobRunAsync is called with the specific request
        mockAmazonGlueClient.Setup(client => client.StartJobRunAsync(It.Is<StartJobRunRequest>(r =>
                r.JobName == startJobRunRequest.JobName &&
                r.Arguments["--arg1"] == "value1"), default))
            .ReturnsAsync(mockResponse);

        // If you have a class that uses IAmazonGlue, you would inject the mock here
        var yourClass = new YourClass(mockAmazonGlueClient.Object);

        // Act
        var result = await yourClass.YourMethodThatCallsStartJobRunAsync(startJobRunRequest);

        // Assert
        Assert.NotNull(result);
        Assert.Equal("mockJobRunId", result.JobRunId);
    }
}
