@isTest
private class TestContactUpdateComparison {

    // This method tests the addTelefone functionality
    @isTest
    static void testAddTelefone() {
        
        // Setup: Create mock data for phones and emails
        List<FS1_ContactUpdateInfo> initialPhones = new List<FS1_ContactUpdateInfo>{
            new FS1_ContactUpdateInfo('1234567890', 'Mobile')
        };
        
        List<FS1_ContactUpdateInfo> initialEmails = new List<FS1_ContactUpdateInfo>{
            new FS1_ContactUpdateInfo('test@example.com', 'Work')
        };
        
        // Instantiate ContactUpdateComparison with mock data
        ContactUpdateComparison contactUpdate = new ContactUpdateComparison(
            'John Doe', 
            '12345678901', 
            'Lead001', 
            initialPhones, 
            initialEmails
        );
        
        // Check that the phones list has one entry initially
        System.assertEquals(1, contactUpdate.phones.size(), 'Phone list should initially have one entry');
        
        // Add a new phone using the addTelefone method
        contactUpdate.addTelefone('9876543210', 'Home');
        
        // Test: Verify that the phone list has been updated (now it should have two entries)
        System.assertEquals(2, contactUpdate.phones.size(), 'Phone list should have two entries after adding a new phone');
        
        // Verify that the new phone's value and type are correct
        FS1_ContactUpdateInfo addedPhone = contactUpdate.phones[1];
        System.assertEquals('9876543210', addedPhone.value, 'New phone number should be 9876543210');
        System.assertEquals('Home', addedPhone.type, 'New phone type should be Home');
    }
}
