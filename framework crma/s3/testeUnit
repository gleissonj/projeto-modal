package br.com.itau.app.services;

import org.apache.commons.lang3.SystemUtils;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledIfSystemProperty;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * Testes que forçam o ramo 'else' sem alterar a classe sob teste.
 * Observação: garantimos setar 'os.name' ANTES de inicializar SystemUtils.
 */
public class ArquivoServiceElseOnlyTest {

    @BeforeAll
    static void forceNonUnixInThisJvm() throws Exception {
        // 1) Define o SO "Windows" nesta JVM de testes
        System.setProperty("os.name", "Windows 10");

        // 2) Garante que SystemUtils será inicializada só agora, já com o os.name novo
        Class.forName("org.apache.commons.lang3.SystemUtils");

        // 3) Se por algum motivo já estava carregada antes (outro teste), avisamos no log do teste
        //    e deixamos a assertion para o próprio teste decidir (assumption).
    }

    @Test
    void else_sucesso_comArquivoReal(@TempDir Path tempDir) throws Exception {
        // Se por algum motivo IS_OS_UNIX for true (classe já carregada antes), este teste não vale
        org.junit.jupiter.api.Assumptions.assumeFalse(SystemUtils.IS_OS_UNIX,
                "SystemUtils já foi inicializada como UNIX em outra parte da suíte; " +
                "rode este teste em JVM isolada ou sem reuso de forks para cobrir o else.");

        Path destino = tempDir.resolve("arquivo.txt");
        Files.writeString(destino, "teste");

        assertDoesNotThrow(() -> ArquivoService.ajustarPermissoesPosCopia(destino));

        File f = destino.toFile();
        assertTrue(f.canRead(),  "Esperado que o arquivo esteja legível");
        assertTrue(f.canWrite(), "Esperado que o arquivo esteja gravável");
        // Executável varia entre FS/SO, então não assertamos rigidamente
    }

    @Test
    void else_falhaAlgumaPermissao_entraNoIfInterno() {
        org.junit.jupiter.api.Assumptions.assumeFalse(SystemUtils.IS_OS_UNIX);

        // Usamos mock de Path/File (no else só chamamos toFile(), não tocamos em POSIX)
        Path path = mock(Path.class);
        File file = mock(File.class);
        when(path.toFile()).thenReturn(file);

        when(file.setReadable(true, true)).thenReturn(true);
        when(file.setWritable(true, true)).thenReturn(false); // força falha
        when(file.setExecutable(false, true)).thenReturn(true);

        assertDoesNotThrow(() -> ArquivoService.ajustarPermissoesPosCopia(path));

        verify(file).setReadable(true, true);
        verify(file).setWritable(true, true);
        verify(file).setExecutable(false, true);
        // Não precisamos checar log; a execução do bloco já está coberta
    }

    @Test
    void else_excecaoEhCapturada_noCatch() {
        org.junit.jupiter.api.Assumptions.assumeFalse(SystemUtils.IS_OS_UNIX);

        Path path = mock(Path.class);
        File file = mock(File.class);
        when(path.toFile()).thenReturn(file);

        when(file.setReadable(true, true)).thenThrow(new RuntimeException("boom"));

        assertDoesNotThrow(() -> ArquivoService.ajustarPermissoesPosCopia(path));

        // writable/executable podem não ser chamados por causa da exceção, então não verificamos
        verify(file).setReadable(true, true);
    }
}
