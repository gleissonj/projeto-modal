import { createElement } from 'lwc';
import Teste1 from 'c/teste1';
import SearchApontamento from 'c/searchApontamento';
import getApontamento from '@salesforce/apex/ApontamentoController.getApontamento';
import { ShowToastEventName } from 'lightning/platformShowToastEvent';

jest.mock('@salesforce/apex/ApontamentoController.getApontamento', () => {
    return { default: jest.fn() };
}, { virtual: true });
describe('c-teste1', () => {
    jest.setTimeout(10000);
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        jest.clearAllMocks();
    });

    it('should handle successful data fetch and show success toast', async () => {
        const MOCK_APONTAMENTO = [{ id: '001', name: 'Test Apontamento' }];
        getApontamento.mockResolvedValue(MOCK_APONTAMENTO);

        const element = createElement('c-search-apontamento', {
            is: SearchApontamento
        });
        document.body.appendChild(element);

        // Call the method to fetch data
        element.getApontamentoCadastrais();

        // Wait for all promises and microtasks to complete
        await flushPromises();

        // Check if the data is handled correctly
        console.log('apontamentos:', element._apontamentos); // Log component state
        expect(element.apontamentos).toEqual(MOCK_APONTAMENTO);
        // expect(element.enableView).toBe(true);
        // expect(element.isLoading).toBe(false);

        // // Verify toast event
        // const toastEvents = [...document.body.querySelectorAll('lightning-toast')];
        // expect(toastEvents.length).toBe(1);
        // expect(toastEvents[0].title).toBe('Sucesso!');
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        // Arrange
        const element = createElement('c-teste1', {
            is: Teste1
        });

        // Act
        document.body.appendChild(element);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });
});

function flushPromises() {
    return new Promise(resolve => setTimeout(resolve, 0));
}