import { ComponentFixture, TestBed } from '@angular/core/testing';
import { YourComponent } from './your.component'; // Substitua pelo nome do seu componente

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [YourComponent]
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
  });

  it('deve chamar updateFileOne se nameFunc não for "OPP"', async () => {
    component.nameFunc = 'OTHER';
    const updateFileOneSpy = jest.spyOn(component, 'updateFileOne');

    await component.uploadArquivoAWS();

    expect(updateFileOneSpy).toHaveBeenCalled();
  });

  it('deve exibir mensagem de erro se selectedFiles não tiver 5 arquivos e nameFunc for "OPP"', async () => {
    component.nameFunc = 'OPP';
    component.selectedFiles = [{}, {}, {}]; // Menos de 5 arquivos
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    await component.uploadArquivoAWS();

    expect(showMessageSpy).toHaveBeenCalledWith('Você deve anexar 5 arquivos', 'error');
  });

  it('deve exibir mensagem de erro se validaNameArquivo retornar false', async () => {
    component.nameFunc = 'OPP';
    component.selectedFiles = [{}, {}, {}, {}, {}]; // Exatamente 5 arquivos
    const validaNameArquivoSpy = jest.spyOn(component, 'validaNameArquivo').mockReturnValue(false);
    component.valueNotFind = 'nome_incorreto';
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    await component.uploadArquivoAWS();

    expect(validaNameArquivoSpy).toHaveBeenCalled();
    expect(showMessageSpy).toHaveBeenCalledWith('O nome do arquivo enviado não corresponde ao nome esperado: nome_incorreto', 'error');
  });

  it('deve chamar updateFileMultiple se selectedFiles tiver 5 arquivos e validaNameArquivo retornar true', async () => {
    component.nameFunc = 'OPP';
    component.selectedFiles = [{}, {}, {}, {}, {}]; // Exatamente 5 arquivos
    jest.spyOn(component, 'validaNameArquivo').mockReturnValue(true);
    const updateFileMultipleSpy = jest.spyOn(component, 'updateFileMultiple');

    await component.uploadArquivoAWS();

    expect(updateFileMultipleSpy).toHaveBeenCalled();
  });
});
