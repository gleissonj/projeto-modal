import { createElement } from 'lwc';
import YourComponent from 'c/yourComponent'; // Altere para o nome correto do seu componente
import { updateLeadsFromSelection } from 'c/api'; // Altere conforme necessário para importar a função

jest.mock('c/api', () => ({
    updateLeadsFromSelection: jest.fn() // Mock da função updateLeadsFromSelection
}));

describe('YourComponent - handleConfirm', () => {
    let element;

    beforeEach(() => {
        // Cria o componente antes de cada teste
        element = createElement('c-your-component', {
            is: YourComponent
        });

        // Adiciona o componente ao corpo do documento para que ele seja montado
        document.body.appendChild(element);
    });

    it('should show toast and stop loading when phone is not selected', () => {
        // Mock de dados de entrada
        element.processedData = [
            {
                idLead: 1,
                telefoneOptions: [{ label: 'Atual: 123', value: '123' }],
                selectedPhone: '', // Não preenchido
                emailOptions: [],
                selectedEmail: '',
                mobilePhoneOptions: [],
                selectedMobilePhone: ''
            }
        ];

        // Mock de showToast para verificar se é chamado
        const showToastSpy = jest.spyOn(element, 'showToast');

        // Chama o método handleConfirm
        element.handleConfirm();

        // Verifica se showToast foi chamado com a mensagem correta
        expect(showToastSpy).toHaveBeenCalledWith(
            'Por favor, preencha o campo telefone',
            'warning',
            'Atenção!'
        );

        // Verifica se isLoading foi desativado
        expect(element.isLoading).toBe(false);
    });

    it('should call updateLeadsFromSelection when all fields are selected and valid', async () => {
        // Mock de dados de entrada
        element.processedData = [
            {
                idLead: 1,
                telefoneOptions: [{ label: 'Atual: 123', value: '123' }],
                selectedPhone: '123', // Preenchido
                emailOptions: [{ label: 'Atual: email@example.com', value: 'email@example.com' }],
                selectedEmail: 'email@example.com', // Preenchido
                mobilePhoneOptions: [{ label: 'Atual: 111', value: '111' }],
                selectedMobilePhone: '111' // Preenchido
            }
        ];

        // Mock de showToast para verificar se é chamado
        const showToastSpy = jest.spyOn(element, 'showToast');
        const refreshPageSpy = jest.spyOn(element, 'refreshPage');

        // Mock da função updateLeadsFromSelection
        updateLeadsFromSelection.mockResolvedValue({});

        // Chama o método handleConfirm
        await element.handleConfirm();

        // Verifica se showToast foi chamado com a mensagem de sucesso
        expect(showToastSpy).toHaveBeenCalledWith(
            'Dados Atualizados, aguarde a pagina atualizar',
            'success',
            'Sucesso!'
        );

        // Verifica se refreshPage foi chamado
        expect(refreshPageSpy).toHaveBeenCalled();

        // Verifica se isLoading foi desativado
        expect(element.isLoading).toBe(false);

        // Verifica se updateLeadsFromSelection foi chamado com os dados corretos
        expect(updateLeadsFromSelection).toHaveBeenCalledWith({
            leadsData: [
                {
                    idLead: 1,
                    selectedPhone: '123',
                    selectedEmail: 'email@example.com',
                    selectedMobilePhone: '111'
                }
            ],
            recordIdPage: element.recordId
        });
    });

    it('should stop loading and handle error correctly when updateLeadsFromSelection fails', async () => {
        // Mock de dados de entrada
        element.processedData = [
            {
                idLead: 1,
                telefoneOptions: [{ label: 'Atual: 123', value: '123' }],
                selectedPhone: '123', // Preenchido
                emailOptions: [{ label: 'Atual: email@example.com', value: 'email@example.com' }],
                selectedEmail: 'email@example.com', // Preenchido
                mobilePhoneOptions: [{ label: 'Atual: 111', value: '111' }],
                selectedMobilePhone: '111' // Preenchido
            }
        ];

        // Mock de showToast para verificar se é chamado
        const showToastSpy = jest.spyOn(element, 'showToast');
        const refreshPageSpy = jest.spyOn(element, 'refreshPage');

        // Mock da função updateLeadsFromSelection para simular erro
        updateLeadsFromSelection.mockRejectedValue(new Error('Erro ao atualizar dados'));

        // Chama o método handleConfirm
        await element.handleConfirm();

        // Verifica se isLoading foi desativado
        expect(element.isLoading).toBe(false);

        // Verifica se a mensagem de erro não foi chamada (pois não houve erro)
        expect(showToastSpy).not.toHaveBeenCalledWith(
            'Erro ao atualizar dados',
            'error',
            'Erro!'
        );
    });
});
