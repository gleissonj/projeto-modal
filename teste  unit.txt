using Amazon.S3;
using Amazon.S3.Model;
using Moq;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

public class S3ServiceTests
{
    [Fact]
    public async Task CompleteMultipartUploadAsync_ShouldReturnExpectedResult()
    {
        // Arrange
        var mockS3Client = new Mock<IAmazonS3>();

        var expectedResponse = new CompleteMultipartUploadResponse
        {
            HttpStatusCode = System.Net.HttpStatusCode.OK,
            BucketName = "my-test-bucket",
            Key = "my-test-file",
            Location = "https://my-test-bucket.s3.amazonaws.com/my-test-file"
        };

        mockS3Client
            .Setup(client => client.CompleteMultipartUploadAsync(It.IsAny<CompleteMultipartUploadRequest>(), It.IsAny<CancellationToken>()))
            .ReturnsAsync(expectedResponse);

        var s3Service = new S3Service(mockS3Client.Object);

        var request = new CompleteMultipartUploadRequest
        {
            BucketName = "my-test-bucket",
            Key = "my-test-file",
            UploadId = "my-upload-id",
            MultipartUpload = new MultipartUpload
            {
                Parts = new List<PartETag>
                {
                    new PartETag(1, "etag-1"),
                    new PartETag(2, "etag-2")
                }
            }
        };

        // Act
        var result = await s3Service.CompleteUploadAsync(request);

        // Assert
        Assert.NotNull(result);
        Assert.Equal("https://my-test-bucket.s3.amazonaws.com/my-test-file", result.Location);
    }
}

public class S3Service
{
    private readonly IAmazonS3 _s3Client;

    public S3Service(IAmazonS3 s3Client)
    {
        _s3Client = s3Client;
    }

    public async Task<CompleteMultipartUploadResponse> CompleteUploadAsync(CompleteMultipartUploadRequest request)
    {
        return await _s3Client.CompleteMultipartUploadAsync(request);
    }
}
