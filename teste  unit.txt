using System;
using System.Threading.Tasks;
using Amazon.Glue;
using Amazon.Glue.Model;
using Moq;
using Xunit;

public class GlueJobServiceTests
{
    private readonly Mock<IAmazonGlue> _glueClientMock;
    private readonly GlueJobService _glueJobService;

    public GlueJobServiceTests()
    {
        _glueClientMock = new Mock<IAmazonGlue>();
        _glueJobService = new GlueJobService(_glueClientMock.Object);
    }

    [Fact]
    public async Task ExecutarJob_ReturnsDomainResponse_WithSuccessStatus()
    {
        // Arrange
        var jobName = "TestJob";
        var startJobRunResponse = new StartJobRunResponse();
        _glueClientMock.Setup(x => x.StartJobRunAsync(It.IsAny<StartJobRunRequest>(), default))
                       .ReturnsAsync(startJobRunResponse);

        // Act
        var result = await _glueJobService.ExecutarJob(jobName);

        // Assert
        Assert.NotNull(result);
        Assert.Equal("O Servico iniciou", result.Status);
        _glueClientMock.Verify(x => x.StartJobRunAsync(It.Is<StartJobRunRequest>(r => r.JobName == jobName), default), Times.Once);
    }

    [Fact]
    public async Task ExecutarJob_InvalidJobName_ThrowsException()
    {
        // Arrange
        var jobName = "InvalidJob";
        _glueClientMock.Setup(x => x.StartJobRunAsync(It.IsAny<StartJobRunRequest>(), default))
                       .ThrowsAsync(new Exception("Job not found"));

        // Act & Assert
        var exception = await Assert.ThrowsAsync<Exception>(() => _glueJobService.ExecutarJob(jobName));
        Assert.Equal("o nome do job esta incorreto", exception.Message);
    }
}
