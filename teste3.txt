import { YourComponent } from './your-component.component';

describe('YourComponent - escolherArquivo', () => {
  let component: YourComponent;

  beforeEach(() => {
    component = new YourComponent();
    component.selectedFiles = []; // Inicializa o array antes de cada teste
  });

  it('deve adicionar arquivos ao selectedFiles e atualizar file e hash', () => {
    // Mock de evento com arquivos
    const mockFile1 = new File(['content1'], 'file1.txt', { type: 'text/plain' });
    const mockFile2 = new File(['content2'], 'file2.txt', { type: 'text/plain' });
    const mockEvent = {
      target: {
        files: [mockFile1, mockFile2],
      },
    };

    // Executa o método
    component.escolherArquivo(mockEvent);

    // Verifica se os arquivos foram adicionados corretamente ao selectedFiles
    expect(component.selectedFiles.length).toBe(2);
    expect(component.selectedFiles).toContain(mockFile1);
    expect(component.selectedFiles).toContain(mockFile2);

    // Verifica se a propriedade file foi atualizada para o primeiro arquivo
    expect(component.file).toBe(mockFile1);

    // Verifica se a hash foi atualizada para o nome do primeiro arquivo
    expect(component.hash).toBe(mockFile1.name);
  });

  it('não deve atualizar hash se o nome do arquivo for igual ao hash atual', () => {
    // Mock de evento com arquivo
    const mockFile = new File(['content'], 'file.txt', { type: 'text/plain' });
    const mockEvent = {
      target: {
        files: [mockFile],
      },
    };

    // Configura um hash inicial
    component.hash = 'file.txt';

    // Executa o método
    component.escolherArquivo(mockEvent);

    // Verifica que o hash não mudou
    expect(component.hash).toBe('file.txt');
  });

  it('deve lidar com eventos sem arquivos (sem falhas)', () => {
    // Mock de evento sem arquivos
    const mockEvent = {
      target: {
        files: [],
      },
    };

    // Executa o método
    component.escolherArquivo(mockEvent);

    // Verifica que o selectedFiles permanece vazio
    expect(component.selectedFiles.length).toBe(0);

    // Verifica que file e hash não foram atualizados
    expect(component.file).toBeUndefined();
    expect(component.hash).toBeUndefined();
  });

  it('deve lidar com eventos inválidos ou nulos', () => {
    // Executa o método com evento nulo
    expect(() => component.escolherArquivo(null)).not.toThrow();

    // Verifica que selectedFiles, file e hash permanecem inalterados
    expect(component.selectedFiles.length).toBe(0);
    expect(component.file).toBeUndefined();
    expect(component.hash).toBeUndefined();
  });
});
