import { createElement } from 'lwc';
import Fs1SearchContact from 'c/fs1SearchContact';

describe('Fs1SearchContact - handleSelectChange', () => {
  let element;

  beforeEach(() => {
    // Criação do componente
    element = createElement('c-fs1-search-contact', {
      is: Fs1SearchContact,
    });

    // Adicionando o elemento ao DOM
    document.body.appendChild(element);
  });

  it('deve atualizar selectedPhone no processedData quando o telefone for alterado', () => {
    // Definindo o estado inicial de processedData
    element.processedData = [
      { id: 1, selectedPhone: '12345', selectedEmail: 'test@example.com', selectedMobilePhone: '67890' },
    ];

    // Criando o evento de mudança com os dados do target (simulando a interação do usuário)
    const mockEvent = {
      target: {
        dataset: { id: '1' },
        name: 'selectedPhone',
        value: '54321',
      },
    };

    // Chamando handleSelectChange com o evento simulado
    element.handleSelectChange(mockEvent);

    // Verificando se o valor de selectedPhone foi alterado corretamente no processedData
    expect(element.processedData[0].selectedPhone).toBe('54321');
  });

  it('deve atualizar selectedEmail no processedData quando o email for alterado', () => {
    // Definindo o estado inicial de processedData
    element.processedData = [
      { id: 1, selectedPhone: '12345', selectedEmail: 'test@example.com', selectedMobilePhone: '67890' },
    ];

    // Criando o evento de mudança com os dados do target (simulando a interação do usuário)
    const mockEvent = {
      target: {
        dataset: { id: '1' },
        name: 'selectedEmail',
        value: 'newemail@example.com',
      },
    };

    // Chamando handleSelectChange com o evento simulado
    element.handleSelectChange(mockEvent);

    // Verificando se o valor de selectedEmail foi alterado corretamente no processedData
    expect(element.processedData[0].selectedEmail).toBe('newemail@example.com');
  });

  it('deve atualizar selectedMobilePhone no processedData quando o telefone móvel for alterado', () => {
    // Definindo o estado inicial de processedData
    element.processedData = [
      { id: 1, selectedPhone: '12345', selectedEmail: 'test@example.com', selectedMobilePhone: '67890' },
    ];

    // Criando o evento de mudança com os dados do target (simulando a interação do usuário)
    const mockEvent = {
      target: {
        dataset: { id: '1' },
        name: 'selectedMobilePhone',
        value: '98765',
      },
    };

    // Chamando handleSelectChange com o evento simulado
    element.handleSelectChange(mockEvent);

    // Verificando se o valor de selectedMobilePhone foi alterado corretamente no processedData
    expect(element.processedData[0].selectedMobilePhone).toBe('98765');
  });

  it('não deve fazer nada se o id não for encontrado no processedData', () => {
    // Definindo o estado inicial de processedData
    element.processedData = [
      { id: 1, selectedPhone: '12345', selectedEmail: 'test@example.com', selectedMobilePhone: '67890' },
    ];

    // Criando o evento de mudança com um id que não existe no processedData
    const mockEvent = {
      target: {
        dataset: { id: '999' }, // id que não existe no processedData
        name: 'selectedPhone',
        value: '54321',
      },
    };

    // Chamando handleSelectChange com o evento simulado
    element.handleSelectChange(mockEvent);

    // Verificando se nada foi alterado no processedData
    expect(element.processedData[0].selectedPhone).toBe('12345');
  });
});
