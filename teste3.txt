import { YourComponent } from './your-component.component';

describe('YourComponent - getAddreessS3', () => {
  let component: YourComponent;

  beforeEach(() => {
    component = new YourComponent();

    // Mock da função auxiliar
    component.getValueNameOperation = jest.fn();
  });

  it('deve gerar o endereço S3 correto para "OPP"', () => {
    // Configuração dos mocks e propriedades
    const mockFile = new File(['content'], 'example.txt', { type: 'text/plain' });
    const mockHash = 'example.txt';
    (component.getValueNameOperation as jest.Mock).mockReturnValue('exampleFolder');

    component.file = mockFile;
    component.nameFunc = 'OPP';
    component.hash = mockHash;

    // Executa o método
    component.getAddreessS3();

    // Verifica o endereço S3 gerado
    expect(component.addressS3).toMatch(
      /^multipartupload\/OPP\/ nameSubFolder \/exampleFolder-\d+\.[a-zA-Z0-9]+$/
    );
    expect(component.getValueNameOperation).toHaveBeenCalledWith(mockFile.name);
  });

  it('deve gerar o endereço S3 correto para "oportunidadesibba360"', () => {
    // Configuração dos mocks e propriedades
    const mockFile = new File(['content'], 'example.csv', { type: 'text/csv' });
    const mockHash = 'example.csv';
    (component.getValueNameOperation as jest.Mock).mockReturnValue('exampleFolder');

    component.file = mockFile;
    component.nameFunc = 'oportunidadesibba360';
    component.hash = mockHash;

    // Executa o método
    component.getAddreessS3();

    // Verifica o endereço S3 gerado
    expect(component.addressS3).toMatch(
      /^multipartupload\/oportunidadesibba360\/exampleFolder-\d+\.[a-zA-Z0-9]+$/
    );
    expect(component.getValueNameOperation).toHaveBeenCalledWith(mockFile.name);
  });

  it('deve gerar o endereço S3 correto para outras "nameFunc"', () => {
    // Configuração dos mocks e propriedades
    const mockFile = new File(['content'], 'example.docx', {
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    });
    const mockHash = 'example.docx';

    component.file = mockFile;
    component.nameFunc = 'OTHER_FUNCTION';
    component.hash = mockHash;
    component.selectedTeam = 'TeamA';

    // Executa o método
    component.getAddreessS3();

    // Verifica o endereço S3 gerado
    expect(component.addressS3).toMatch(
      /^multipartupload\/OTHER_FUNCTION\/OTHER_FUNCTION-TeamA-\d+\.[a-zA-Z0-9]+$/
    );
    expect(component.getValueNameOperation).not.toHaveBeenCalled();
  });

  it('deve lidar com file ou hash indefinidos sem falhar', () => {
    component.file = undefined;
    component.nameFunc = 'OPP';
    component.hash = undefined;

    // Executa o método
    expect(() => component.getAddreessS3()).not.toThrow();

    // Verifica que addressS3 permanece vazio
    expect(component.addressS3).toBe('');
  });
});
