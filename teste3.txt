import { TestBed } from '@angular/core/testing';
import { YourComponent } from './your-component.component';
import { MultipartUploadService } from './multipartupload.service'; // Caminho para o serviço

describe('YourComponent - generateMapMultipartUpload', () => {
  let component: YourComponent;
  let mockMultipartUploadService: jest.Mocked<MultipartUploadService>;

  beforeEach(() => {
    // Cria o mock do serviço
    mockMultipartUploadService = {
      generatListOfMapValueMultipartUpload: jest.fn(),
    } as unknown as jest.Mocked<MultipartUploadService>;

    TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MultipartUploadService, useValue: mockMultipartUploadService }, // Substituir pelo mock
      ],
    });

    const fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;

    // Configurar mocks iniciais no componente
    component.file = { name: 'testfile.txt' } as File;
    component.hash = 'hashvalue.ext';
    component.multipartuploadService = {}; // Caso você tenha outro serviço auxiliar
    component.selectedTeam = 'team1';
    component.bucket = 'bucket1';
  });

  it('deve gerar o mapa corretamente para nameFunc == "OPP"', () => {
    // Mock do método auxiliar
    jest.spyOn(component, 'getValueNameOperation').mockReturnValue('subfolder1');

    // Mock do método do serviço
    const mockMultipartUpload = [{ key: 'value1' }];
    mockMultipartUploadService.generatListOfMapValueMultipartUpload.mockReturnValue(mockMultipartUpload);

    // Configurar o cenário
    component.nameFunc = 'OPP';

    // Chamada da função a ser testada
    const result = component.generateMapMultipartUpload();

    // Verificações
    expect(mockMultipartUploadService.generatListOfMapValueMultipartUpload).toHaveBeenCalledWith(
      { file: component.file, hash: component.addressS3 },
      component.multipartuploadService,
      'FileData',
      'OPP',
      component.selectedTeam,
      component.bucket
    );

    const expectedHash = `multipartupload/OPP/subfolder1/subfolder1-${Date.now()}.ext`;

    // Validar o endereço S3
    expect(component.addressS3).toContain('multipartupload/OPP/subfolder1');
    expect(component.filePath).toBe(component.addressS3);

    // Validar o mapa gerado
    expect(result.has(component.addressS3)).toBe(true);
    expect(result.get(component.addressS3)).toEqual(mockMultipartUpload);
  });
});
