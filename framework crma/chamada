import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.opentelemetry.api.GlobalOpenTelemetry;
import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Scope;

public class MensagemFilaMap {

    private static final ObjectMapper mapper = new ObjectMapper();
    private static final Tracer tracer = GlobalOpenTelemetry.getTracer("mensagemfila.parser");

    public MensagemFila fromJson(String json) {
        // Cria e ativa um novo span
        Span span = tracer.spanBuilder("json.to.MensagemFila").startSpan();

        try (Scope scope = span.makeCurrent()) {
            JsonNode node = mapper.readTree(json);

            String nomeDataset = node.get("nomeDataset").asText();
            String emailTimeResponsavel = node.get("emailTimeResponsavel").asText();

            if (!MensagemEmailValidator.isValid(emailTimeResponsavel)) {
                throw new Exception("Email do time responsável inválido");
            }

            MensagemFila mensagemFila = new MensagemFila(nomeDataset, nomeApp, emailTimeResponsavel);

            // Adiciona o email ao span como atributo
            ServiceExceptionAspect.adicionarObjetoLog(mensagemFila);

            return mensagemFila;

        } catch (Exception e) {
            span.recordException(e);
            span.setStatus(io.opentelemetry.api.trace.StatusCode.ERROR);

            throw new RuntimeException("Falha não mapeada na conversão de JSON: " + e.getMessage(), e);

        } finally {
            span.end(); // Finaliza o span mesmo em caso de erro
        }
    }
}
