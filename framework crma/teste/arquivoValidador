import org.junit.jupiter.api.Test;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipOutputStream;

import static org.junit.jupiter.api.Assertions.*;

class ArquivoValidatorTest {

    @Test
    void deveLancarExcecaoQuandoZipEstiverVazio() throws IOException {
        // Arrange: cria um ZIP vazio temporário
        File zipVazio = File.createTempFile("arquivo_vazio", ".zip");
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipVazio))) {
            // não adiciona nenhum entry → zip ficará vazio
        }

        // Act + Assert: ao validar, deve lançar exceção do if isZipVazio
        IllegalArgumentException ex = assertThrows(
            IllegalArgumentException.class,
            () -> ArquivoValidator.validarArquivoDados(zipVazio.getAbsolutePath())
        );

        assertEquals("O arquivo ZIP está vazio.", ex.getMessage());
    }
}



teste 2

import org.junit.jupiter.api.Test;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;

class ArquivoValidatorTest {

    @Test
    void deveLancarExcecaoQuandoJsonNaoForValido() throws IOException {
        // Arrange: cria arquivo .json com conteúdo inválido
        File jsonInvalido = File.createTempFile("metadados", ".json");
        try (FileWriter writer = new FileWriter(jsonInvalido)) {
            writer.write("{ chaveSemAspas: valor }"); // JSON malformado
        }

        // Act + Assert: espera IllegalArgumentException no segundo if
        IllegalArgumentException ex = assertThrows(
            IllegalArgumentException.class,
            () -> ArquivoValidator.validarArquivoMetadados(jsonInvalido.getAbsolutePath())
        );

        assertEquals("O arquivo JSON não é válido.", ex.getMessage());
    }
}



teste 5


import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.jupiter.api.Assertions.*;

class ArquivoValidatorTest {

    @Test
    void deveRetornarTrueParaArquivoZipValido() throws IOException {
        // Arrange: cria um arquivo ZIP válido temporário
        File zipFile = File.createTempFile("teste", ".zip");
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))) {
            zos.putNextEntry(new ZipEntry("teste.txt"));
            zos.write("conteudo".getBytes());
            zos.closeEntry();
        }

        // Act
        boolean resultado = ArquivoValidator.isArquivoZip(zipFile.getAbsolutePath());

        // Assert
        assertTrue(resultado);
    }

    @Test
    void deveRetornarFalseParaArquivoNaoZip() throws IOException {
        // Arrange: cria um arquivo .txt qualquer
        File txtFile = File.createTempFile("teste", ".txt");
        Files.writeString(txtFile.toPath(), "isso não é um zip");

        // Act
        boolean resultado = ArquivoValidator.isArquivoZip(txtFile.getAbsolutePath());

        // Assert
        assertFalse(resultado);
    }

    @Test
    void deveRetornarFalseQuandoArquivoNaoExiste() {
        // Act
        boolean resultado = ArquivoValidator.isArquivoZip("caminho/inexistente.zip");

        // Assert
        assertFalse(resultado);
    }
}
