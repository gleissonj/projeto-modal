// ðŸ‘‡ MOCKA o mÃ³dulo lightning/flowSupport ANTES de importar o componente
jest.mock('lightning/flowSupport', () => {
    return {
        FlowAttributeChangeEvent: jest.fn().mockImplementation((attributeName, value) => {
            return {
                detail: {
                    attributeName,
                    value
                }
            };
        })
    };
});

import { createElement } from 'lwc';
import Jx1AssetListToFlow from 'c/jx1AssetListToFlow'; // ajuste para o nome correto do seu componente

describe('c-jx1-asset-list-to-flow', () => {
    let element;

    beforeEach(() => {
        element = createElement('c-jx1-asset-list-to-flow', {
            is: Jx1AssetListToFlow
        });
        document.body.appendChild(element);
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('should dispatch FlowAttributeChangeEvent with selected rows', () => {
        const mockSelectedRows = [{ id: '002', Name: 'Ativo 2' }];
        const handler = jest.fn();

        element.addEventListener('flowattributechange', handler);

        const event = {
            detail: {
                selectedRows: mockSelectedRows
            }
        };

        element.handlerRowSelection(event);

        expect(handler).toHaveBeenCalled();
        const eventDetail = handler.mock.calls[0][0].detail;
        expect(eventDetail.attributeName).toBe('assetswithcheck');
        expect(eventDetail.value).toEqual(mockSelectedRows);
    });
});





import { createElement } from 'lwc';
import Jx1AssetListToFlow from 'c/jx1AssetListToFlow';

describe('c-jx1-asset-list-to-flow', () => {
    it('should dispatch any event when handlerRowSelection is called', () => {
        const element = createElement('c-jx1-asset-list-to-flow', {
            is: Jx1AssetListToFlow
        });
        document.body.appendChild(element);

        // Mock do dispatchEvent
        element.dispatchEvent = jest.fn();

        const mockSelectedRows = [{ id: '001', Name: 'Asset' }];
        element.handlerRowSelection({ detail: { selectedRows: mockSelectedRows } });

        expect(element.dispatchEvent).toHaveBeenCalled();
    });
});
