import { ComponentFixture, TestBed } from '@angular/core/testing';
import { YourComponent } from './your-component.component';

describe('YourComponent - generateMapMultipartUpload', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [YourComponent],
      // Inclua módulos necessários, se houver
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;

    // Configurar mocks iniciais
    component.file = { name: 'testfile.txt' } as File;
    component.hash = 'hashvalue.ext';
    component.multipartupload = {
      generatListOfMapValueMultipartUpload: jest.fn(),
    };
    component.multipartuploadService = {};
    component.nameFunc = '';
    component.selectedTeam = 'team1';
    component.bucket = 'bucket1';
  });

  it('deve gerar o mapa corretamente para nameFunc == "OPP"', () => {
    jest.spyOn(component, 'getValueNameOperation').mockReturnValue('subfolder1');
    const mockMultipartUpload = [{ key: 'value' }];
    jest
      .spyOn(component.multipartupload, 'generatListOfMapValueMultipartUpload')
      .mockReturnValue(mockMultipartUpload);

    component.nameFunc = 'OPP';
    const result = component.generateMapMultipartUpload();

    // Verifique o caminho S3
    const expectedHash = `multipartupload/OPP/subfolder1/subfolder1-${Date.now()}.ext`;
    expect(component.addressS3).toContain('multipartupload/OPP/subfolder1'); // Validar padrão sem se preocupar com o timestamp exato
    expect(component.filePath).toBe(component.addressS3);

    // Verifique o mapa gerado
    expect(result.get(component.addressS3)).toEqual(mockMultipartUpload);

    // Verifique se a função auxiliar foi chamada
    expect(component.getValueNameOperation).toHaveBeenCalledWith('testfile.txt');
    expect(
      component.multipartupload.generatListOfMapValueMultipartUpload
    ).toHaveBeenCalledWith(
      { file: component.file, hash: component.addressS3 },
      component.multipartuploadService,
      'FileData',
      'OPP',
      component.selectedTeam,
      component.bucket
    );
  });

  it('deve gerar o mapa corretamente para nameFunc == "oportunidadesibba360"', () => {
    jest.spyOn(component, 'getValueNameOperation').mockReturnValue('subfolder2');
    const mockMultipartUpload = [{ key: 'value2' }];
    jest
      .spyOn(component.multipartupload, 'generatListOfMapValueMultipartUpload')
      .mockReturnValue(mockMultipartUpload);

    component.nameFunc = 'oportunidadesibba360';
    const result = component.generateMapMultipartUpload();

    // Verifique o caminho S3
    const expectedHash = `multipartupload/oportunidadesibba360/subfolder2-${Date.now()}.ext`;
    expect(component.addressS3).toContain(
      'multipartupload/oportunidadesibba360/subfolder2'
    ); // Validar padrão sem se preocupar com o timestamp exato
    expect(component.filePath).toBe(component.addressS3);

    // Verifique o mapa gerado
    expect(result.get(component.addressS3)).toEqual(mockMultipartUpload);

    // Verifique se a função auxiliar foi chamada
    expect(component.getValueNameOperation).toHaveBeenCalledWith('testfile.txt');
    expect(
      component.multipartupload.generatListOfMapValueMultipartUpload
    ).toHaveBeenCalledWith(
      { file: component.file, hash: component.addressS3 },
      component.multipartuploadService,
      'FileData',
      'oportunidadesibba360',
      component.selectedTeam,
      component.bucket
    );
  });
});
