@isTest
public class LeadProcessorTest {
    
    @isTest
    static void testProcessLeads() {
        
        // Step 1: Create mock data for the existing leads
        Lead existingLead1 = new Lead(
            FirstName = 'John',
            LastName = 'Doe',
            HU7_CPF__c = '12345678901',
            Prospect__c = 'someRecordId'
        );
        
        Lead existingLead2 = new Lead(
            FirstName = 'Jane',
            LastName = 'Doe',
            HU7_CPF__c = '98765432100',
            Prospect__c = 'someRecordId'
        );
        
        // Step 2: Create mock ContactResponse data (new leads)
        ContactResponse newLead1 = new ContactResponse();
        newLead1.nome = 'Carlos Silva';
        newLead1.cpf = '12345678901'; // Existing lead in the map

        ContactResponse newLead2 = new ContactResponse();
        newLead2.nome = 'Ana Pereira';
        newLead2.cpf = '55555555555'; // New lead

        List<ContactResponse> leads = new List<ContactResponse>{newLead1, newLead2};
        
        // Initialize the list properties if needed
        for (ContactResponse lead : leads) {
            lead.telefones = new List<Telephone>();
            lead.emails = new List<Email>();
            lead.optOut = new List<OptOut>();
            lead.optOutTelefone = new optOutTelefoneResponse();
        }
        
        // Step 3: Prepare the map of existing leads
        Map<String, Lead> mapLeadExisting = new Map<String, Lead>{
            '12345678901' => existingLead1,
            '98765432100' => existingLead2
        };
        
        // Step 4: Prepare the lists for ContactUpdateComparison and newLeadsToInsert
        List<ContactUpdateComparison> leadToFrontChoice = new List<ContactUpdateComparison>();
        List<Lead> newLeadsToInsert = new List<Lead>();
        
        Id recordIdPage = 'someRecordId'; // Using a valid record ID for the test
        
        // Step 5: Call the method to be tested (processLeads)
        Test.startTest();
        LeadProcessor.processLeads(leads, mapLeadExisting, leadToFrontChoice, newLeadsToInsert, recordIdPage);
        Test.stopTest();
        
        // Step 6: Assertions
        // Assert that the leadToFrontChoice list was populated with updated leads
        System.assertEquals(1, leadToFrontChoice.size(), 'The leadToFrontChoice should have 1 entry for the updated existing lead.');
        
        // Check if the first entry in leadToFrontChoice corresponds to the updated lead
        ContactUpdateComparison comparison1 = leadToFrontChoice[0];
        System.assertEquals('12345678901', comparison1.cpf, 'The CPF of the updated lead should be 12345678901.');

        // Assert that no new lead was inserted (since newLead2 has no matching CPF in the map)
        System.assertEquals(1, newLeadsToInsert.size(), 'There should be 1 new lead inserted.');
        System.assertEquals('55555555555', newLeadsToInsert[0].HU7_CPF__c, 'The CPF of the new lead should be 55555555555.');
    }
}
