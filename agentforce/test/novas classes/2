@isTest
private class BuscarResponsaveisDoGrupoTest {

    private class MockBuscarResponsaveisDoGrupo extends BuscarResponsaveisDoGrupo {
        override protected Map<Id, List<DadosResponsavel>> buscarResponsaveis(Set<Id> grupoIds) {
            Map<Id, List<DadosResponsavel>> resultado = new Map<Id, List<DadosResponsavel>>();
            for (Id id : grupoIds) {
                DadosResponsavel d = new DadosResponsavel();
                d.nome = 'Fulano Simulado';
                d.role = 'NEC';
                d.territorio = 'SP001';
                resultado.put(id, new List<DadosResponsavel>{ d });
            }
            return resultado;
        }
    }

    @isTest
    static void testExecutar_ComDadosSimulados() {
        Account grupo = new Account(
            Name = 'Grupo Teste',
            RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('HU7_Grupo_Economico').getRecordTypeId(),
            Hu7IDExterno__c = 'GRP123',
            IsExcluidoFinancas__c = false
        );
        insert grupo;

        BuscarResponsaveisDoGrupo.Request req = new BuscarResponsaveisDoGrupo.Request();
        req.accountId = grupo.Id;

        MockBuscarResponsaveisDoGrupo instancia = new MockBuscarResponsaveisDoGrupo();
        List<BuscarResponsaveisDoGrupo.Response> resposta = instancia.executar(new List<BuscarResponsaveisDoGrupo.Request>{ req });

        System.assertEquals(1, resposta.size());
        System.assertEquals('Fulano Simulado', resposta[0].dadosresponsaveis[0].nome);
    }
}
