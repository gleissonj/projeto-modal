using Moq;
using Amazon.S3;
using Amazon.S3.Model;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;

public class S3ServiceTests
{
    [Fact]
    public async Task ListObjectsV2Async_Should_Return_Correct_Response()
    {
        // Arrange
        var mockS3Client = new Mock<IAmazonS3>();

        var expectedResponse = new ListObjectsV2Response
        {
            HttpStatusCode = System.Net.HttpStatusCode.OK,
            IsTruncated = false, // Indicates whether there are more objects to retrieve
            NextContinuationToken = null, // For pagination, if needed
            S3Objects = new List<S3Object>
            {
                new S3Object
                {
                    Key = "object1.txt",
                    Size = 1234,
                    ETag = "\"etag1\"",
                    LastModified = DateTime.UtcNow
                },
                new S3Object
                {
                    Key = "object2.jpg",
                    Size = 5678,
                    ETag = "\"etag2\"",
                    LastModified = DateTime.UtcNow
                }
            }
        };

        mockS3Client
            .Setup(x => x.ListObjectsV2Async(It.Is<ListObjectsV2Request>(r =>
                r.BucketName == "example-bucket"), default))
            .ReturnsAsync(expectedResponse);

        var s3Service = new S3Service(mockS3Client.Object);

        // Act
        var response = await s3Service.ListObjectsV2Async("example-bucket");

        // Assert
        Assert.NotNull(response);
        Assert.Equal(System.Net.HttpStatusCode.OK, response.HttpStatusCode);
        Assert.False(response.IsTruncated);

        // Check S3Objects
        Assert.NotNull(response.S3Objects);
        Assert.Equal(2, response.S3Objects.Count);

        var object1 = response.S3Objects[0];
        Assert.Equal("object1.txt", object1.Key);
        Assert.Equal(1234, object1.Size);

        var object2 = response.S3Objects[1];
        Assert.Equal("object2.jpg", object2.Key);
        Assert.Equal(5678, object2.Size);
    }
}

public class S3Service
{
    private readonly IAmazonS3 _s3Client;

    public S3Service(IAmazonS3 s3Client)
    {
        _s3Client = s3Client;
    }

    public async Task<ListObjectsV2Response> ListObjectsV2Async(string bucketName)
    {
        var request = new ListObjectsV2Request
        {
            BucketName = bucketName
        };

        return await _s3Client.ListObjectsV2Async(request);
    }
}
