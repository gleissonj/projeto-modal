import { TestBed } from '@angular/core/testing';
import { MyComponent } from './my-component'; // Replace with your component path
import { MultipartUploadService } from './multipart-upload.service'; // Replace with your service path

// Mock for multipartUploadService
const mockMultipartUploadService = {
  generatListOfMapValueMultipartUpload: jest.fn()
};

describe('MyComponent', () => {
  let component: MyComponent;
  let multipartUploadService: MultipartUploadService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        MyComponent,
        { provide: MultipartUploadService, useValue: mockMultipartUploadService }
      ]
    });

    component = TestBed.inject(MyComponent);
    multipartUploadService = TestBed.inject(MultipartUploadService);
  });

  it('should generate a correct map for multipart upload', () => {
    // Setup the component state
    component.file = new File(['content'], 'example.txt'); // Create a mock File object
    component.hash = 'some-hash';
    component.typeFunc = 'Cadastro Cliente';
    component.typeSubFunc = 'SubFunction';

    // Prepare mock return value for the service method
    const expectedMapValue = [{ /* your expected map value structure */ }];
    mockMultipartUploadService.generatListOfMapValueMultipartUpload.mockReturnValue(expectedMapValue);

    // Calculate expected hash
    const expectedHash = 'job-parameters/cadastrocliente/example.txt';

    // Call the method
    const result = component['generateMapMultipartUpload'](); // Access private method if needed

    // Assertions
    expect(result).toBeInstanceOf(Map); // Ensure the result is a Map
    expect(result.size).toBe(1); // Check the size of the Map
    expect(result.has(expectedHash)).toBe(true); // Check if the Map contains the expected hash
    expect(result.get(expectedHash)).toEqual(expectedMapValue); // Check if the Map value is as expected
  });
});
