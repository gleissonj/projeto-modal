processData() {
    this.processedData = this.contacts.map((item, index) => {
        // Processa os telefones
        const telefoneOptions = item.phones && item.phones.length > 0
            ? item.phones.map(p => {
                const label = p.type === 'Atual' ? `Atual: ${p.value}` : `Novo: ${p.value}`;
                return { label, value: p.value };
            }).filter(option => option.value) // Filtra opções vazias
            : [];

        // Processa os emails
        const emailOptions = item.emails && item.emails.length > 0
            ? item.emails.map(e => {
                const label = e.type === 'Atual' ? `Atual: ${e.value}` : `Novo: ${e.value}`;
                return { label, value: e.value };
            }).filter(option => option.value) // Filtra opções vazias
            : [];

        // Processa os celulares
        const mobilePhoneOptions = item.mobilePhones && item.mobilePhones.length > 0
            ? item.mobilePhones.map(e => {
                const label = e.type === 'Atual' ? `Atual: ${e.value}` : `Novo: ${e.value}`;
                return { label, value: e.value };
            }).filter(option => option.value) // Filtra opções vazias
            : [];

        // Inicializa as variáveis para armazenar os valores selecionados
        let selectedEmail = '';
        if (emailOptions.length === 1 && emailOptions[0].value) {
            selectedEmail = emailOptions[0].value;
            emailOptions.length = 0; // Limpa as opções de email
        }

        let selectedPhone = '';
        if (telefoneOptions.length === 1 && telefoneOptions[0].value) {
            selectedPhone = telefoneOptions[0].value;
            telefoneOptions.length = 0; // Limpa as opções de telefone
        }

        let selectedMobilePhone = '';
        if (mobilePhoneOptions.length === 1 && mobilePhoneOptions[0].value) {
            selectedMobilePhone = mobilePhoneOptions[0].value;
            mobilePhoneOptions.length = 0; // Limpa as opções de mobilePhone
        }

        return {
            ...item,
            id: `${item.name}-${index}`,
            idLead: item.idLead,
            selectedPhone,
            selectedEmail,
            selectedMobilePhone,
            telefoneOptions,
            emailOptions,
            mobilePhoneOptions
        };
    });

    // Verifica se há pelo menos uma opção válida em cada coluna
    this.hasPhoneColumn = this.contacts.some(item => {
        const telefoneOptions = item.phones && item.phones.length > 0
            ? item.phones.map(p => ({ label: p.type === 'Atual' ? `Atual: ${p.value}` : `Novo: ${p.value}`, value: p.value }))
            .filter(option => option.value) // Filtra opções vazias
            : [];
        return telefoneOptions.length > 0; // Verifica se existem opções válidas
    });

    this.hasEmailColumn = this.contacts.some(item => {
        const emailOptions = item.emails && item.emails.length > 0
            ? item.emails.map(e => ({ label: e.type === 'Atual' ? `Atual: ${e.value}` : `Novo: ${e.value}`, value: e.value }))
            .filter(option => option.value) // Filtra opções vazias
            : [];
        return emailOptions.length > 0; // Verifica se existem opções válidas
    });

    this.hasMobilePhone = this.contacts.some(item => {
        const mobilePhoneOptions = item.mobilePhones && item.mobilePhones.length > 0
            ? item.mobilePhones.map(e => ({ label: e.type === 'Atual' ? `Atual: ${e.value}` : `Novo: ${e.value}`, value: e.value }))
            .filter(option => option.value) // Filtra opções vazias
            : [];
        return mobilePhoneOptions.length > 0; // Verifica se existem opções válidas
    });
}
