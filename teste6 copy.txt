@isTest
public class LeadServiceTest {

    @isTest
    static void testCreateNewLead() {
        
        // Step 1: Create a mock ContactResponse

        // Criando EmailRegistrationData
        EmailRegistrationData emailData = new EmailRegistrationData();
        emailData.email = 'carlos.silva@example.com';  // Campo de email na classe EmailRegistrationData
        
        // Criando Email
        Email email = new Email();
        email.id_email = '1';  // Atribuindo um ID fictício para o email
        email.valor_dado_cadastral = emailData;  // Associando o EmailRegistrationData
        
        // Criando TelephoneRegistrationData
        TelephoneRegistrationData phoneData = new TelephoneRegistrationData();
        phoneData.numero = '1234567890';  // O número de telefone
        phoneData.ddi = '55';  // DDI (Exemplo)
        phoneData.ddd = '11';  // DDD (Exemplo)
        phoneData.tipo = 'Mobile';  // Tipo de telefone
        
        // Criando Telephone
        Telephone phone = new Telephone();
        phone.id_telefone = '1';  // Atribuindo um ID fictício para o telefone
        phone.valor_dado_cadastral = phoneData;  // Associando o TelephoneRegistrationData
        
        // Criando ContactResponse
        ContactResponse newLead = new ContactResponse();
        newLead.nome = 'Carlos Silva';
        newLead.cpf = '12345678901';
        newLead.emails = new List<Email>{email};  // Lista de emails
        newLead.telefones = new List<Telephone>{phone};  // Lista de telefones
        newLead.optOutTelefone = false;  // Definindo opt-out de telefone
        
        Id recordPageId = 'someRecordId';  // Use a valid Record Id for testing
        
        // Step 2: Mock or stub external methods
        // We will assume that splitName, formatCPF, and FS1_LeadRecordType.prospectId() work as expected
        // So we will just call the method directly without stubbing
        
        // Step 3: Call the method under test
        Test.startTest();
        Lead createdLead = LeadService.createNewLead(newLead, recordPageId);
        Test.stopTest();
        
        // Step 4: Assertions
        
        // Check if the created Lead's fields are correctly populated
        System.assertNotEquals(createdLead, null, 'The created lead should not be null.');
        
        // Check if CPF was set correctly
        System.assertEquals('12345678901', createdLead.HU7_CPF__c, 'The CPF should be correctly set.');
        
        // Check if name was split and set correctly
        System.assertEquals('Carlos', createdLead.FirstName, 'The first name should be correctly set.');
        System.assertEquals('Silva', createdLead.LastName, 'The last name should be correctly set.');
        
        // Check if the email was set correctly
        System.assertEquals('carlos.silva@example.com', createdLead.Email, 'The email should be correctly set.');
        
        // Check if RecordTypeId is assigned correctly (assuming this works as expected)
        System.assertNotEquals(createdLead.RecordTypeId, null, 'The RecordTypeId should be set.');
        
        // Check if the Prospect__c field is correctly set
        System.assertEquals(recordPageId, createdLead.Prospect__c, 'The Prospect__c should be set correctly.');
        
        // Check if phone number is correctly set
        System.assertEquals('1234567890', createdLead.Phone, 'The phone number should be correctly assigned.');
        
        // Check the phone opt-out field (if it should not opt-out)
        System.assertEquals(false, createdLead.HasOptedOutOfPhone, 'The phone opt-out flag should be correctly set.');
    }
}
