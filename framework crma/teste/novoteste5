import unittest
from unittest.mock import MagicMock

# ----- Código sob teste (idêntico ao que você mostrou) -----
DATABASE = "meu_db"
TABELA = "minha_tabela"

class MeuServico:
    def __init__(self, glue_client):
        self.glue_client = glue_client

    def get_last_partition(self) -> str:
        result = ""

        def funct_map(values):
            return values["Values"][0]

        response = self.glue_client.get_partitions(
            DatabaseName=DATABASE,
            TableName=TABELA,
            Segment={"SegmentNumber": 0, "TotalSegments": 1},
        )

        t_particoes = list(map(funct_map, response["Partitions"]))
        if t_particoes:
            t_particoes = sorted(t_particoes)
            result = t_particoes[len(t_particoes) - 1]
            result = int(result)
        return result

# ----- Testes -----
class TestGetLastPartition(unittest.TestCase):

    def test_retorna_maior_particao_quando_vem_varias(self):
        # Arrange
        glue_client = MagicMock()
        glue_client.get_partitions.return_value = {
            "Partitions": [
                {"Values": ["20240101"]},
                {"Values": ["20231231"]},
                {"Values": ["20240715"]},  # maior
            ]
        }
        service = MeuServico(glue_client)

        # Act
        result = service.get_last_partition()

        # Assert
        self.assertEqual(result, 20240715)
        glue_client.get_partitions.assert_called_once_with(
            DatabaseName=DATABASE,
            TableName=TABELA,
            Segment={"SegmentNumber": 0, "TotalSegments": 1},
        )

    def test_retorna_unica_particao_quando_so_tem_uma(self):
        glue_client = MagicMock()
        glue_client.get_partitions.return_value = {
            "Partitions": [{"Values": ["20240630"]}]
        }
        service = MeuServico(glue_client)

        result = service.get_last_partition()

        self.assertEqual(result, 20240630)

    def test_sem_particoes_retorna_string_vazia(self):
        glue_client = MagicMock()
        glue_client.get_partitions.return_value = {"Partitions": []}
        service = MeuServico(glue_client)

        result = service.get_last_partition()

        self.assertEqual(result, "")

if __name__ == "__main__":
    unittest.main()
