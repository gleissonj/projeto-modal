@isTest
private class FS1_ProposalTrackingControllerTest {

    @isTest
    static void testGetContato_Success() {
        // Arrange
        HU7_Group_Lead__c mockProspect = new HU7_Group_Lead__c(FS1_Cnpj14__c = '12.345.678/0001-95');
        Test.setMock(RepositorGroupLead.class, new RepositorGroupLeadMock(mockProspect));

        FS1_OutboundResponse mockResponse = new FS1_OutboundResponse();
        mockResponse.setStatusCode(200);
        mockResponse.setResponseBody('[{"someField": "someValue"}]');
        Test.setMock(Service.class, new ServiceMock(mockResponse));
        
        // Act
        List<ContactResponse> result = FS1_ProposalTrackingController.GetContato();
        
        // Assert
        System.assertNotEquals(null, result, 'Expected non-null result');
        System.assertEquals(1, result.size(), 'Expected one contact in the result');
    }

    @isTest
    static void testGetContato_NoContacts() {
        // Arrange
        HU7_Group_Lead__c mockProspect = new HU7_Group_Lead__c(FS1_Cnpj14__c = '12.345.678/0001-95');
        Test.setMock(RepositorGroupLead.class, new RepositorGroupLeadMock(mockProspect));

        FS1_OutboundResponse mockResponse = new FS1_OutboundResponse();
        mockResponse.setStatusCode(200);
        mockResponse.setResponseBody('[]'); // Empty list response
        Test.setMock(Service.class, new ServiceMock(mockResponse));
        
        // Act
        List<ContactResponse> result = FS1_ProposalTrackingController.GetContato();
        
        // Assert
        System.assertEquals(null, result, 'Expected null result');
    }

    @isTest
    static void testGetContato_ServiceFailure() {
        // Arrange
        HU7_Group_Lead__c mockProspect = new HU7_Group_Lead__c(FS1_Cnpj14__c = '12.345.678/0001-95');
        Test.setMock(RepositorGroupLead.class, new RepositorGroupLeadMock(mockProspect));

        FS1_OutboundResponse mockResponse = new FS1_OutboundResponse();
        mockResponse.setStatusCode(500); // Simulate service failure
        Test.setMock(Service.class, new ServiceMock(mockResponse));
        
        // Act
        Test.startTest();
        try {
            FS1_ProposalTrackingController.GetContato();
            System.assert(false, 'Expected AuraHandledException to be thrown');
        } catch (AuraHandledException ex) {
            System.assertEquals('exceptionText', ex.getMessage(), 'Expected specific exception message');
        }
        Test.stopTest();
    }

    @isTest
    static void testGetContato_JSONException() {
        // Arrange
        HU7_Group_Lead__c mockProspect = new HU7_Group_Lead__c(FS1_Cnpj14__c = '12.345.678/0001-95');
        Test.setMock(RepositorGroupLead.class, new RepositorGroupLeadMock(mockProspect));

        FS1_OutboundResponse mockResponse = new FS1_OutboundResponse();
        mockResponse.setStatusCode(200);
        mockResponse.setResponseBody('Invalid JSON'); // Simulate invalid JSON response
        Test.setMock(Service.class, new ServiceMock(mockResponse));
        
        // Act
        Test.startTest();
        try {
            FS1_ProposalTrackingController.GetContato();
            System.assert(false, 'Expected AuraHandledException to be thrown');
        } catch (AuraHandledException ex) {
            System.assertEquals('exceptionText', ex.getMessage(), 'Expected specific exception message');
        }
        Test.stopTest();
    }
}
