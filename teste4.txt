import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of } from 'rxjs'; // For creating a mock observable
import { YourComponent } from './your.component'; // Replace with actual component
import { MultipartUploadService } from './multipart-upload.service'; // Replace with actual service

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let mockMultipartUploadService: Partial<MultipartUploadService>;

  beforeEach(async () => {
    // Mock MultipartUploadService
    mockMultipartUploadService = {
      getJson: jest.fn().mockReturnValue(of({ key: 'value' })) // mock the JSON data returned
    };

    await TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [{ provide: MultipartUploadService, useValue: mockMultipartUploadService }]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should download the JSON file', () => {
    const createElementSpy = jest.spyOn(document, 'createElement');
    const appendChildSpy = jest.spyOn(document.body, 'appendChild');
    const removeChildSpy = jest.spyOn(document.body, 'removeChild');
    const clickSpy = jest.fn();

    const mockElement = {
      setAttribute: jest.fn(),
      click: clickSpy,
      style: { display: '' }
    };

    // Mock createElement to return our mockElement
    createElementSpy.mockReturnValue(mockElement as unknown as HTMLElement);

    // Trigger the baixarJson function
    component.baixarJson();

    // Check that the JSON data was set properly
    expect(component.dataJson).toEqual({ key: 'value' });

    // Check if the element was created and set correctly
    expect(createElementSpy).toHaveBeenCalledWith('a');
    expect(mockElement.setAttribute).toHaveBeenCalledWith('href', expect.stringContaining('data:text/json'));
    expect(mockElement.setAttribute).toHaveBeenCalledWith('download', 'exemplo.json');
    expect(mockElement.style.display).toBe('none');

    // Check if the element was appended, clicked, and removed
    expect(appendChildSpy).toHaveBeenCalledWith(mockElement);
    expect(clickSpy).toHaveBeenCalled();
    expect(removeChildSpy).toHaveBeenCalledWith(mockElement);

    // Restore spies if necessary
    createElementSpy.mockRestore();
    appendChildSpy.mockRestore();
    removeChildSpy.mockRestore();
  });
});
