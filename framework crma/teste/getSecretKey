package br.seu.pacote;

import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import java.lang.reflect.Field;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClientBuilder;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;

class SeuServicoTest {

    // Helper para setar o campo salesforceLogin se for privado
    private static void setSalesforceLogin(Object target, String value) throws Exception {
        Field f = target.getClass().getDeclaredField("salesforceLogin");
        f.setAccessible(true);
        f.set(target, value);
    }

    @Test
    void getSecretKey_deveRetornarMapaQuandoSegredoValido() throws Exception {
        // Arrange
        SeuServico servico = new SeuServico(); // ajuste para sua classe concreta
        setSalesforceLogin(servico, "arn:aws:secretsmanager:sa-east-1:123456789012:secret:my/secret");

        SecretsManagerClient mockClient = mock(SecretsManagerClient.class);
        SecretsManagerClientBuilder mockBuilder = mock(SecretsManagerClientBuilder.class);

        String json = "{\"username\":\"foo\",\"password\":\"bar\"}";
        GetSecretValueResponse response = GetSecretValueResponse.builder()
                .secretString(json)
                .build();

        try (MockedStatic<SecretsManagerClient> mockedStatic = mockStatic(SecretsManagerClient.class)) {
            // Mock da chamada est√°tica builder()
            mockedStatic.when(SecretsManagerClient::builder).thenReturn(mockBuilder);
            when(mockBuilder.region(Region.SA_EAST_1)).thenReturn(mockBuilder);
            when(mockBuilder.build()).thenReturn(mockClient);

            // Mock da chamada getSecretValue
            when(mockClient.getSecretValue(any(GetSecretValueRequest.class))).thenReturn(response);

            // Act
            Map<String, String> mapa = servico.getSecretKey();

            // Assert
            assertNotNull(mapa);
            assertEquals("foo", mapa.get("username"));
            assertEquals("bar", mapa.get("password"));

            // Verifica que chamou com o secretId correto
            verify(mockClient, times(1)).getSecretValue(argThat(req ->
                    "arn:aws:secretsmanager:sa-east-1:123456789012:secret:my/secret".equals(req.secretId())));
            // Fecha o client (try-with-resources)
            verify(mockClient, times(1)).close();
        }
    }

    @Test
    void getSecretKey_deveReempacotarEmRuntimeExceptionQuandoFalhar() throws Exception {
        // Arrange
        SeuServico servico = new SeuServico(); // ajuste para sua classe
        setSalesforceLogin(servico, "my/secret");

        SecretsManagerClient mockClient = mock(SecretsManagerClient.class);
        SecretsManagerClientBuilder mockBuilder = mock(SecretsManagerClientBuilder.class);

        try (MockedStatic<SecretsManagerClient> mockedStatic = mockStatic(SecretsManagerClient.class)) {
            mockedStatic.when(SecretsManagerClient::builder).thenReturn(mockBuilder);
            when(mockBuilder.region(Region.SA_EAST_1)).thenReturn(mockBuilder);
            when(mockBuilder.build()).thenReturn(mockClient);

            when(mockClient.getSecretValue(any(GetSecretValueRequest.class)))
                    .thenThrow(new RuntimeException("falha AWS"));

            // Act + Assert
            RuntimeException ex = assertThrows(RuntimeException.class, servico::getSecretKey);
            assertTrue(ex.getMessage().contains("Erro ao obter a chave secreta do Salesforce"));
            assertNotNull(ex.getCause());
            assertEquals("falha AWS", ex.getCause().getMessage());

            verify(mockClient, times(1)).close();
        }
    }
}
