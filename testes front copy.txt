processData() {
    this.processedData = this.contacts.map((item, index) => {
        // Processa os telefones
        const telefoneOptions = item.phones && item.phones.length > 0 
            ? item.phones.map(p => {
                const label = p.type == 'Atual' ? `Atual: ${p.value}` : `Novo: ${p.value}`;
                return { label, value: p.value };
            })
            : [];
        
        // Processa os emails
        const emailOptions = item.emails && item.emails.length > 0 
            ? item.emails.map(e => {
                const label = e.type === 'Atual' ? `Atual: ${e.value}` : `Novo: ${e.value}`;
                return { label, value: e.value };
            })
            : [];

        // Processa os celulares
        const mobilePhoneOptions = item.mobilePhones && item.mobilePhones.length > 0 
            ? item.mobilePhones.map(e => {
                const label = e.type === 'Atual' ? `Atual: ${e.value}` : `Novo: ${e.value}`;
                return { label, value: e.value };
            })
            : [];

        // Verifica se existem apenas um valor preenchido, e ajusta os campos selecionados
        let selectedEmail = '';
        if (emailOptions.length === 1 && emailOptions[0].value) {
            selectedEmail = emailOptions[0].value;
            emailOptions.length = 0; // Limpa as opções de email
        }

        let selectedPhone = '';
        if (telefoneOptions.length === 1 && telefoneOptions[0].value) {
            selectedPhone = telefoneOptions[0].value;
            telefoneOptions.length = 0; // Limpa as opções de telefone
        }

        let selectedMobilePhone = '';
        if (mobilePhoneOptions.length === 1 && mobilePhoneOptions[0].value) {
            selectedMobilePhone = mobilePhoneOptions[0].value;
            mobilePhoneOptions.length = 0; // Limpa as opções de mobilePhone
        }

        return {
            ...item,
            id: `${item.name}-${index}`,
            idLead: item.idLead,
            selectedPhone,
            selectedEmail,
            selectedMobilePhone,
            telefoneOptions,
            emailOptions,
            mobilePhoneOptions
        };
    });

    this.hasPhoneColumn = this.contacts.some(item => item.phones.length > 0);
    this.hasEmailColumn = this.contacts.some(item => item.emails.length > 0);
    this.hasMobilePhone = this.contacts.some(item => item.mobilePhones.length > 0);
}
