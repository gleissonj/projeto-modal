@AuraEnabled(cacheable=false)
public static List<ContactResponse> GetContato() {
    // Chama o serviço externo e desserializa a resposta
    List<ContactResponse> leads = getContactsFromService();
    
    // Cria um conjunto com os CPFs
    Set<String> cpfs = getCPFs(leads);
    
    // Busca os contatos existentes no Salesforce
    Map<String, Lead> mapLeadExisting = getExistingLeads(cpfs);
    
    // Inicializa listas
    List<ContactUpdateComparison> leadToFrontChoice2 = new List<ContactUpdateComparison>();
    List<Lead> newLeadsToInsert = new List<Lead>();
    
    // Processa os contatos da API
    processLeads(leads, mapLeadExisting, leadToFrontChoice2, newLeadsToInsert);
    
    // Insere novos contatos
    insertNewLeads(newLeadsToInsert);
    
    // Retorna o resultado
    return leadToFrontChoice2;
}

// Função para obter os contatos do serviço externo
private static List<ContactResponse> getContactsFromService() {
    OutbondResponse response = service.getContact('212121');
    return (List<ContactResponse>) JSON.deserialize(GetResponse().toString(), List<ContactResponse>.class);
}

// Função para criar um Set de CPFs a partir dos leads
private static Set<String> getCPFs(List<ContactResponse> leads) {
    Set<String> cpfs = new Set<String>();
    for (ContactResponse lead : leads) {
        if (String.isNotBlank(lead.cpf)) {
            cpfs.add(formatCPF(lead.cpf));
        }
    }
    return cpfs;
}

// Função para buscar os leads existentes no Salesforce e criar um mapa
private static Map<String, Lead> getExistingLeads(Set<String> cpfs) {
    List<Lead> leadsExisting = [SELECT id, CPF__c, Phone, Email, MobilePhone FROM Lead WHERE CPF__c IN :cpfs];
    Map<String, Lead> mapLeadExisting = new Map<String, Lead>();
    for (Lead lead : leadsExisting) {
        mapLeadExisting.put(lead.CPF__c, lead);
    }
    return mapLeadExisting;
}

// Função para processar cada lead da API
private static void processLeads(
    List<ContactResponse> leads, 
    Map<String, Lead> mapLeadExisting, 
    List<ContactUpdateComparison> leadToFrontChoice2, 
    List<Lead> newLeadsToInsert) 
{
    for (ContactResponse newLead : leads) {
        ContactUpdateComparison respostaContato = new ContactUpdateComparison(
            newLead.nome,
            newLead.cpf,
            new List<ContactUpdateInfo>(),
            new List<ContactUpdateInfo>()
        );

        if (mapLeadExisting.containsKey(formatCPF(newLead.cpf))) {
            // O contato já existe no Salesforce
            Lead leadCurrent = mapLeadExisting.get(formatCPF(newLead.cpf));
            compareAndUpdateContact(newLead, leadCurrent, respostaContato);

            if (!respostaContato.telefones.isEmpty() || !respostaContato.emails.isEmpty()) {
                leadToFrontChoice2.add(respostaContato);
            }
        } else {
            // Criar novo lead
            Lead newLeadInsert = createNewLead(newLead);
            newLeadsToInsert.add(newLeadInsert);
        }
    }
}

// Função para comparar e atualizar os contatos
private static void compareAndUpdateContact(ContactResponse newLead, Lead leadCurrent, ContactUpdateComparison respostaContato) {
    Lead newLead1 = new Lead();
    assignPhoneNumbers(newLead1, newLead.telefones, newLead.optOutTelefone);
    
    Set<String> phonesCurrent = new Set<String>{leadCurrent.Phone};
    Set<String> emailsCurrent = new Set<String>{leadCurrent.Email};

    // Comparar telefones
    if (!phonesCurrent.contains(newLead1.Phone)) {
        respostaContato.addTelefone(leadCurrent.Phone, 'Atual');
        respostaContato.addTelefone(newLead1.Phone, 'Novo');
    }

    // Comparar emails
    if (newLead.emails != null && !newLead.emails.isEmpty()) {
        if (!emailsCurrent.contains(newLead.emails[0].valor_dado_cadastral.email)) {
            respostaContato.addEmail(leadCurrent.Email, 'Atual');
            respostaContato.addEmail(newLead.emails[0].valor_dado_cadastral.email, 'Novo');
        }
    }
}

// Função para criar um novo Lead a partir de um ContactResponse
private static Lead createNewLead(ContactResponse newLead) {
    Lead newLeadInsert = new Lead(
        Email = newLead.emails[0].valor_dado_cadastral.email
    );
    assignPhoneNumbers(newLeadInsert, newLead.telefones, newLead.optOutTelefone);
    return newLeadInsert;
}

// Função para inserir novos leads no Salesforce
private static void insertNewLeads(List<Lead> newLeadsToInsert) {
    if (!newLeadsToInsert.isEmpty()) {
        insert newLeadsToInsert;
    }
}
