import { YourClass } from './YourClass'; // Import the class containing the handleConfirm method
import { updateLeadsFromSelection } from './someModule'; // Import the module that contains updateLeadsFromSelection

jest.mock('./someModule', () => ({
  updateLeadsFromSelection: jest.fn(),
}));

describe('YourClass - handleConfirm', () => {
  let instance: YourClass;

  beforeEach(() => {
    // Create a fresh instance of the class before each test
    instance = new YourClass();

    // Mock methods to prevent side effects and control flow
    instance.showToast = jest.fn();
    instance.refreshPage = jest.fn();
    instance.closedModal = jest.fn();
  });

  it('should show a warning when phone is not selected', () => {
    instance.hasPhoneColumn = true;
    instance.processedData = [{ selectedPhone: null, selectedEmail: 'test@example.com', selectedMobilePhone: '12345' }];
    
    instance.handleConfirm();

    expect(instance.showToast).toHaveBeenCalledWith(
      'Por favor, preencha o campo telefone',
      'warning',
      'Atenção!'
    );
    expect(instance.isLoading).toBe(false);
    expect(instance.isValid).toBe(false); // The validation should be set to false
  });

  it('should show a warning when email is not selected', () => {
    instance.hasEmailColumn = true;
    instance.processedData = [{ selectedPhone: '12345', selectedEmail: null, selectedMobilePhone: '67890' }];
    
    instance.handleConfirm();

    expect(instance.showToast).toHaveBeenCalledWith(
      'Por favor, preencha o campo email',
      'warning',
      'Atenção!'
    );
    expect(instance.isLoading).toBe(false);
    expect(instance.isValid).toBe(false); // The validation should be set to false
  });

  it('should show a warning when mobile phone is not selected', () => {
    instance.hasMobilePhoneColumn = true;
    instance.processedData = [{ selectedPhone: '12345', selectedEmail: 'test@example.com', selectedMobilePhone: null }];
    
    instance.handleConfirm();

    expect(instance.showToast).toHaveBeenCalledWith(
      'Por favor, preencha o campo mobile',
      'warning',
      'Atenção!'
    );
    expect(instance.isLoading).toBe(false);
    expect(instance.isValid).toBe(false); // The validation should be set to false
  });

  it('should update leads if all required fields are selected', async () => {
    instance.hasPhoneColumn = true;
    instance.hasEmailColumn = true;
    instance.hasMobilePhoneColumn = true;
    instance.processedData = [{ selectedPhone: '12345', selectedEmail: 'test@example.com', selectedMobilePhone: '67890', idLead: 1 }];
    instance.isValid = true;

    updateLeadsFromSelection.mockResolvedValueOnce('success'); // Mock successful update

    await instance.handleConfirm();

    expect(instance.isLoading).toBe(false);
    expect(instance.showToast).toHaveBeenCalledWith(
      'Dados Atualizados, aguarde a pagina atualizar',
      'success',
      'Sucesso!'
    );
    expect(instance.refreshPage).toHaveBeenCalled();
    expect(instance.closedModal).toHaveBeenCalled();
  });

  it('should handle errors when updateLeadsFromSelection fails', async () => {
    instance.hasPhoneColumn = true;
    instance.hasEmailColumn = true;
    instance.hasMobilePhoneColumn = true;
    instance.processedData = [{ selectedPhone: '12345', selectedEmail: 'test@example.com', selectedMobilePhone: '67890', idLead: 1 }];
    instance.isValid = true;

    updateLeadsFromSelection.mockRejectedValueOnce(new Error('Some error'));

    await instance.handleConfirm();

    expect(instance.isLoading).toBe(false);
    expect(instance.showToast).not.toHaveBeenCalled();
    expect(instance.refreshPage).not.toHaveBeenCalled();
    expect(instance.closedModal).toHaveBeenCalled();
  });
});
