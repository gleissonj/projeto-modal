import { TestBed } from '@angular/core/testing';
import { MatSnackBar } from '@angular/material/snack-bar'; // Importa o MatSnackBar
import { SeuComponente } from './seu-componente.component'; // Substitua pelo caminho correto

describe('SeuComponente', () => {
  let component: SeuComponente;
  let snackBarMock: any;

  beforeEach(() => {
    snackBarMock = {
      open: jest.fn() // Mocka o método 'open' do MatSnackBar
    };

    TestBed.configureTestingModule({
      declarations: [SeuComponente],
      providers: [
        { provide: MatSnackBar, useValue: snackBarMock }
      ]
    }).compileComponents();

    const fixture = TestBed.createComponent(SeuComponente);
    component = fixture.componentInstance;
  });

  it('deve abrir o snackbar com a mensagem e o tipo correto', () => {
    const message = 'Mensagem de teste';
    const type = 'error';

    // Chama o método a ser testado
    component.showMessage(message, type);

    // Verifica se o snackBar.open foi chamado com os parâmetros corretos
    expect(snackBarMock.open).toHaveBeenCalledWith(
      message, 
      'Ok', 
      {
        duration: 3000,
        horizontalPoisition: 'end', // Verifica a posição horizontal
        verticalPosition: 'bottom', // Verifica a posição vertical
        panelClass: ['error-snackbar'] // Verifica a classe de estilo
      }
    );

    // Verifica se o 'loading' foi setado para false
    expect(component.loading).toBe(false);
  });

  it('deve abrir o snackbar com o tipo info', () => {
    const message = 'Mensagem de informação';
    const type = 'info';

    component.showMessage(message, type);

    // Verifica se o snackBar.open foi chamado com a classe de info
    expect(snackBarMock.open).toHaveBeenCalledWith(
      message,
      'Ok',
      {
        duration: 3000,
        horizontalPoisition: 'end',
        verticalPosition: 'bottom',
        panelClass: ['info-snackbar'] // Verifica a classe de estilo 'info'
      }
    );
  });
});
