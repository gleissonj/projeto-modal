/**
 * @description       :
 * @author            : ChangeMeIn@UserSettingsUnder.SFDoc
 * @group             :
 * @last modified on  : 02-03-2025
 * @last modified by  : ChangeMeIn@UserSettingsUnder.SFDoc
 **/
public with sharing class ContactController {

    //public static ApontamentoRepository repository;
    public static ContactService service;
    static {
       // repository = new ApontamentoRepository();
        service = new ContactService();
    }


    @AuraEnabled(cacheable=false)
    public static List<ContactResponse> GetContato(){

        OutbondResponse response = service.getContact('212121');
        
        List<ContactResponse>
            leads = (List<ContactResponse>) JSON.deserialize(GetResponse().toString(), List<ContactResponse>.class);

        System.debug('Adcionado o nome : ' + leads);

        System.debug('tamanho array : ' + leads.size());

         // Criar um Set com os CPFs para buscar no Salesforce
        Set<String> cpfs = new Set<String>();
        for (ContactResponse lead : leads) {
            if(String.isNotBlank(lead.cpf)){
                cpfs.add(formatCPF(lead.cpf));
            }
        }

        System.debug('cpf : ' + cpfs);

        // Buscar contatos existentes no Salesforce
        List<Lead> leadsExisting = [Select id, CPF__c , Phone, Email, MobilePhone from Lead where CPF__c IN :cpfs];

        System.debug('encontrou cpf na sales : ' + leadsExisting);

        // Criar um mapa CPF -> Contato existente
        Map<String, Lead> mapLeadExisting = new Map<String, Lead>();
        for (Lead lead : leadsExisting) {
            mapLeadExisting.put(lead.CPF__c, lead);
        }

        System.debug('se existe vou criar um map mapLeadExisting : ' + mapLeadExisting);

        // Lista para armazenar contatos diferentes para o front
        List<ContactResponse> leadToFrontChoice = new List<ContactResponse>();
        List<ContactUpdateComparison> leadToFrontChoice2 = new List<ContactUpdateComparison>();

        // Lista para inserir novos contatos diretamente
        List<Lead> newLeadsToInsert = new List<Lead>();

        // for rodando dentro dos dados retornados da api
        for (ContactResponse newLead : leads) {
            System.debug('newLead.cpf : ' + formatCPF(newLead.cpf));
            System.debug('mapLeadExisting2Contem : ' + mapLeadExisting.containsKey(formatCPF(newLead.cpf)));

            ContactUpdateComparison respostaContato = new ContactUpdateComparison(
                newLead.nome,
                newLead.cpf,
                new List<ContactUpdateInfo>(),
                new List<ContactUpdateInfo>()
            );
            // nesse if confirma se o cpf da api tem no mapa de contatos existentes. Se tiver ele entra no if
            if (mapLeadExisting.containsKey(formatCPF(newLead.cpf))) {
                // O contato já existe no Salesforce
                Lead leadCurrent = mapLeadExisting.get(formatCPF(newLead.cpf));
                System.debug('lead q encontrou na sales, procurando pelo cpf q veio da api : ' + leadCurrent);

                Lead newLead1 = new Lead();
                assignPhoneNumbers(newLead1, newLead.telefones, newLead.optOutTelefone);
                // // Criar sets para comparação
                Set<String> phonesCurrent = new Set<String>{leadCurrent.Phone};
                Set<String> emailsCurrent = new Set<String>{leadCurrent.Email};
                
                //Comparar telefones
                if (!phonesCurrent.contains(newLead1.Phone)) {
                    // Adicionar o telefone atual e o novo para o front
                    respostaContato.addTelefone(leadCurrent.Phone, 'Atual');
                    respostaContato.addTelefone(newLead1.Phone, 'Novo');
                }
                
                if (newLead.emails != null && !newLead.emails.isEmpty()) {
                    // for (String emailNovo : newLead.emails) {
                        if (!emailsCurrent.contains(newLead.emails[0].valor_dado_cadastral.email)) {
                            // Adicionar o email atual e o novo para o front
                            respostaContato.addEmail(leadCurrent.Email, 'Atual');
                            respostaContato.addEmail(newLead.emails[0].valor_dado_cadastral.email, 'Novo');
                        }
                   // }
                }

                // Se encontrou alterações, adiciona o contato à lista
                if (!respostaContato.telefones.isEmpty() || !respostaContato.emails.isEmpty()) {
                    leadToFrontChoice2.add(respostaContato);
                }

                System.debug('leadToFrontChoice2 : ' + leadToFrontChoice2);

            } else {
                Lead newLeadInsert = new Lead(
                    Email = newLead.emails[0].valor_dado_cadastral.email
                );
                assignPhoneNumbers(newLeadInsert, newLead.telefones, newLead.optOutTelefone);
                newLeadsToInsert.add(newLeadInsert);
                System.debug('lead q caiu no else : ');
            }
        }

        // Inserir novos contatos no Salesforce
        if (!newLeadsToInsert.isEmpty()) {
            System.debug('insert newLeadsToInsert ');
            //insert newLeadsToInsert;
        }
         
        //descomentar essa linha abaixo
        //return leadToFrontChoice2;
        return new List<ContactResponse>();
    }

    private static String formatPhoneNumber(Telephone telefone){
        return '+' + telefone.valor_dado_cadastral?.ddi + telefone.valor_dado_cadastral?.ddd + telefone.valor_dado_cadastral?.numero;
    }

    public static string formatCPF(String cpf){
        String cleanCPF = cpf.replaceAll('[^0-9]', '');
        
        if (cleanCPF.length() != 11) {
            throw new IllegalArgumentException('CPF must have 11 digits.');
        }
        
        String formattedCPF = cleanCPF.substring(0, 3) + '.' +
                             cleanCPF.substring(3, 6) + '.' +
                             cleanCPF.substring(6, 9) + '-' +
                              cleanCPF.substring(9, 11);
                              
        return formattedCPF;
    }

    

    public static Map<String, String> splitName(String fullName) {
        Map<String, String> nameParts = new Map<String, String>();

        if (String.isEmpty(fullName)) {
            nameParts.put('firstName', '');
            nameParts.put('lastName', '');
            return nameParts;
        }

        // Dividindo o nome completo por espaço
        List<String> nameArray = fullName.split(' ');

        if (nameArray.size() > 1) {
            // O primeiro elemento será o primeiro nome
            nameParts.put('firstName', nameArray[0]);

            // O restante será considerado como o sobrenome
            nameArray.remove(0);
            nameParts.put('lastName', String.join(nameArray, ' '));
        } else {
            // Se só houver um nome, assume que é o primeiro nome
            nameParts.put('firstName', fullName);
            nameParts.put('lastName', '');
        }

        return nameParts;
    }

    public static void assignPhoneNumbers(Lead lead, List<Telephone> telefones, optOutTelefoneResponse optOutTelefone){
        if(telefones.isEmpty() || isPhoneBlocked(optOutTelefone)){
            return;
        }

        boolean isFirstMobile = telefones.size() > 0 && isMobile(telefones.get(0).valor_dado_cadastral.numero);
        boolean isSecondMobile = telefones.size() > 1 && isMobile(telefones.get(1).valor_dado_cadastral.numero);

        String[] formattedPhones = getFormattedPhonesNumbers(telefones);
        System.debug('formattedPhones: ' + formattedPhones);
        if(isFirstMobile && isSecondMobile){
            lead.MobilePhone = formattedPhones[0];
            lead.Phone = formattedPhones[1];
        }
        else if (!isFirstMobile && isSecondMobile){
            lead.Phone = formattedPhones[0];
        }else {
            lead.MobilePhone = isFirstMobile ? formattedPhones[0] : formattedPhones[1];
            lead.Phone = isFirstMobile ? formattedPhones[1] : formattedPhones[0];
        }
    }

    public static boolean isPhoneBlocked(optOutTelefoneResponse optOutTelefone){
        return optOutTelefone.data.indicador_possui_telefone_bloqueado == 'S';
    }
    
    public static boolean isMobile(String phone){
        return phone != null && (phone.length() > 8);
    }

    public static String[] getFormattedPhonesNumbers(List<Telephone> telefones){
        String[] formattedPhones = new String[2];

        if(!telefones.isEmpty()){
            formattedPhones[0] = formatPhoneNumber(telefones.get(0));
            if(telefones.size() > 1){
                formattedPhones[1] = formatPhoneNumber(telefones.get(1));
        }
    } 
    return formattedPhones;  
    }
    
    public static String GetResponse(){
        String te = '['+
            '{'+
                '"nome": "Gleisson de Jesus Evangelista",'+
                '"origem": "F",'+
                '"cpf": "41657158080",'+
                '"cnpjEmpresa": "4a843b13-ea23-42d8-a905-64f44f350d36",'+
                '"descricaoCargo": "002",'+
                '"tipoPessoa": "TESTE INSPETORIA",'+
                '"ideq3": "00",'+
                '"telefones": ['+
                    '{'+
                        '"id_telefone": "1",'+
                        '"valor_dado_cadastral": {'+
                            '"principal": "false",'+
                            '"ddi": "55",'+
                            '"ddd": "35",'+
                            '"numero": "999996666",'+
                            '"ramal": "87,48",'+
                            '"data_atualizacao": "2022-10-07T18:23:47",'+
                            '"data_criacao": "2022-10-07T18:23:47"'+
                        '}'+
                    '},'+
                    '{'+
                        '"id_telefone": "2",'+
                        '"valor_dado_cadastral": {'+
                                '"principal": "false",'+
                                '"ddi": "55",'+
                                '"ddd": "45",'+
                                '"numero": "999996667",'+
                                '"ramal": "87,48",'+
                                '"data_atualizacao": "2022-10-07T18:23:47",'+
                                '"data_criacao": "2022-10-07T18:23:47"'+
                            '}'+
                    '}'+
                '],'+
                '"emails": [' +
                    '{' +
                        '"id_email": "123",'+
                        '"valor_dado_cadastral": {' +
                            '"principal": "false",'+
                            '"email": "teste3@hotmail.com",'+
                            '"data_atualizacao": "2022-10-07T18:23:47"'+
                        '}'+
                    '},' +
                    '{' +
                        '"id_email": "456",'+
                        '"valor_dado_cadastral": {' +
                            '"principal": "false",'+
                            '"email": "teste4@hotmail.com",'+
                            '"data_atualizacao": "2022-10-07T18:23:47"'+
                        '}'+
                    '}' +
                '],'+
                '"optOut": [' +
                    '{' +
                        '"id_pessoa": "434",'+
                        '"codigo_grupo": "1",'+
                        '"nome_grupo": "TESTE INSPETORIA",'+
                        '"codigo_assunto": "002",'+
                        '"nome_assunto": "teste",'+
                        '"descricao_resumida_assunto": "434",'+
                        '"descricao_completa_assunto": "434",'+
                        '"codigo_meio_comunicacao": "434",'+
                        '"nome_meio_comunicacao": "434",'+
                        '"nome_meio_comunicacao_canais": "434",'+
                        '"codigo_canal": "434",'+
                        '"nome_canal": "434",'+
                        '"codigo_aplicativo": "434",'+
                        '"nome_aplicativo": "434",'+
                        '"numero_funcional_colaborador": "434",'+
                        '"indicador_preferencia": "434",'+
                        '"data_atualizacao": "434"'+
                    '}' +
                '],' +
                '"optOutTelefone":' +
                    '{' +
                        '"data":{' +
                            '"indicador_possui_telefone_bloqueado": "N"'+
                            '}' +
                    '}' +
            '},' +
            '{'+
                '"nome": "Joao teste",'+
                '"origem": "F",'+
                '"cpf": "53614302008",'+
                '"cnpjEmpresa": "4a843b13-ea23-42d8-a905-64f44f350d36",'+
                '"descricaoCargo": "002",'+
                '"tipoPessoa": "TESTE INSPETORIA",'+
                '"ideq3": "00",'+
                '"telefones": ['+
                    '{'+
                        '"id_telefone": "1",'+
                        '"valor_dado_cadastral": {'+
                            '"principal": "false",'+
                            '"ddi": "55",'+
                            '"ddd": "35",'+
                            '"numero": "999996666",'+
                            '"ramal": "87,48",'+
                            '"data_atualizacao": "2022-10-07T18:23:47",'+
                            '"data_criacao": "2022-10-07T18:23:47"'+
                        '}'+
                    '},'+
                    '{'+
                        '"id_telefone": "2",'+
                        '"valor_dado_cadastral": {'+
                                '"principal": "false",'+
                                '"ddi": "55",'+
                                '"ddd": "35",'+
                                '"numero": "999998888",'+
                                '"ramal": "87,48",'+
                                '"data_atualizacao": "2022-10-07T18:23:47",'+
                                '"data_criacao": "2022-10-07T18:23:47"'+
                            '}'+
                    '}'+
                '],'+
                '"emails": [' +
                    '{' +
                        '"id_email": "123",'+
                        '"valor_dado_cadastral": {' +
                            '"principal": "false",'+
                            '"email": "teste5@hotmail.com",'+
                            '"data_atualizacao": "2022-10-07T18:23:47"'+
                        '}'+
                    '},' +
                    '{' +
                        '"id_email": "456",'+
                        '"valor_dado_cadastral": {' +
                            '"principal": "false",'+
                            '"email": "teste6@hotmail.com",'+
                            '"data_atualizacao": "2022-10-07T18:23:47"'+
                        '}'+
                    '}' +
                '],'+
                '"optOut": [' +
                    '{' +
                        '"id_pessoa": "434",'+
                        '"codigo_grupo": "1",'+
                        '"nome_grupo": "TESTE INSPETORIA",'+
                        '"codigo_assunto": "002",'+
                        '"nome_assunto": "teste",'+
                        '"descricao_resumida_assunto": "434",'+
                        '"descricao_completa_assunto": "434",'+
                        '"codigo_meio_comunicacao": "434",'+
                        '"nome_meio_comunicacao": "434",'+
                        '"nome_meio_comunicacao_canais": "434",'+
                        '"codigo_canal": "434",'+
                        '"nome_canal": "434",'+
                        '"codigo_aplicativo": "434",'+
                        '"nome_aplicativo": "434",'+
                        '"numero_funcional_colaborador": "434",'+
                        '"indicador_preferencia": "434",'+
                        '"data_atualizacao": "434"'+
                    '}' +
                '],' +
                '"optOutTelefone":' +
                    '{' +
                        '"data":{' +
                            '"indicador_possui_telefone_bloqueado": "N"'+
                            '}' +
                    '}' +
            '}' +
       ']';
        
        
        
        return te;
    }
}