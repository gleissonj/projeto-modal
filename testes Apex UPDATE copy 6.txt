import { Component } from '@angular/core';
import { S3Service } from './s3.service';

@Component({
  selector: 'app-download',
  templateUrl: './download.component.html',
  styleUrls: ['./download.component.css']
})
export class DownloadComponent {
  bucketName: string = '';  // Nome do bucket
  files: string[] = [];     // Lista de arquivos

  constructor(private s3Service: S3Service) {}

  ngOnInit() {
    // Inicializa o bucket (se necessário)
    this.bucketName = 'bucketX';  // Definindo "bucketX" como o padrão
  }

  // Atualiza o método para retornar uma Promise
  loadFiles(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.bucketName) {
        this.s3Service.listFiles(this.bucketName).subscribe(
          (files) => {
            this.files = files;
            resolve();  // Resolve quando os arquivos são carregados
          },
          (error) => {
            console.error('Erro ao listar arquivos', error);
            reject(error);  // Reject em caso de erro
          }
        );
      } else {
        reject('Bucket não definido');
      }
    });
  }

  // Método para baixar todos os arquivos
  async downloadFileMigration() {
    try {
      if (this.bucketName) {
        // Espera carregar os arquivos antes de continuar
        await this.loadFiles();  // Espera até que a Promise de loadFiles seja resolvida

        // Agora, faz o download de todos os arquivos
        this.files.forEach(fileName => {
          this.s3Service.downloadFile(this.bucketName, fileName).subscribe(
            (response) => {
              const link = document.createElement('a');
              link.href = response.url;
              link.download = fileName;
              link.click();
            },
            (error) => {
              console.error(`Erro ao baixar o arquivo ${fileName}`, error);
            }
          );
        });
      }
    } catch (error) {
      console.error('Erro ao carregar os arquivos', error);
    }
  }

  // Baixa o arquivo individualmente
  download(fileName: string) {
    this.s3Service.downloadFile(this.bucketName, fileName).subscribe(
      (response) => {
        const link = document.createElement('a');
        link.href = response.url;
        link.download = fileName;
        link.click();
      },
      (error) => {
        console.error('Erro ao baixar arquivo', error);
      }
    );
  }
}
