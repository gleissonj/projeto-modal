@AuraEnabled(cacheable=false)
public static List<ContactResponse> GetContato() {
    System.debug('Bateu na API');

    // Chamada da API externa
    OutbondResponse response = service.getContact('212121');
    List<ContactResponse> novosContatos = (List<ContactResponse>) JSON.deserialize(GetResponse().toString(), List<ContactResponse>.class);

    // Criar um Set com os CPFs para buscar no Salesforce
    Set<String> cpfs = new Set<String>();
    for (ContactResponse contato : novosContatos) {
        cpfs.add(contato.CPF__c);
    }

    // Buscar contatos existentes no Salesforce
    List<Contact> contatosExistentes = [SELECT Id, CPF__c, Phone, Email FROM Contact WHERE CPF__c IN :cpfs];

    // Criar um mapa CPF -> Contato existente
    Map<String, Contact> contatosMap = new Map<String, Contact>();
    for (Contact contato : contatosExistentes) {
        contatosMap.put(contato.CPF__c, contato);
    }

    // Lista para armazenar contatos diferentes
    List<ContactResponse> contatosParaFront = new List<ContactResponse>();

    for (ContactResponse novoContato : novosContatos) {
        // Verificar se já existe no Salesforce
        if (contatosMap.containsKey(novoContato.CPF__c)) {
            Contact contatoAtual = contatosMap.get(novoContato.CPF__c);

            // Converter os telefones e e-mails para Set para facilitar comparação
            Set<String> telefonesAtuais = new Set<String>{contatoAtual.Phone};
            Set<String> emailsAtuais = new Set<String>{contatoAtual.Email};

            Set<String> telefonesNovos = new Set<String>(novoContato.telefones);
            Set<String> emailsNovos = new Set<String>(novoContato.emails);

            // Verificar se há diferenças entre os dados existentes e os novos
            Boolean telefoneDiferente = !telefonesNovos.equals(telefonesAtuais);
            Boolean emailDiferente = !emailsNovos.equals(emailsAtuais);

            // Se houver diferença, adicionar à lista de retorno
            if (telefoneDiferente || emailDiferente) {
                contatosParaFront.add(novoContato);
            }
        } else {
            // Se o contato não existe, ele precisa ser criado -> enviar para o front
            contatosParaFront.add(novoContato);
        }
    }

    return contatosParaFront;
}
