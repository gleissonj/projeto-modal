@isTest
private class TestGetContato {

    @isTest
    static void testGetContato() {
        // Configura o mock para o repositório e o serviço
        Test.startTest();

        // Cria um mock para o repositório
        HU7_Group_Lead__c mockGroupLead = new HU7_Group_Lead__c(
            FS1_Cnpj14__c = '12.345.678/0001-90' // Um CNPJ fictício
        );
        // Mock do método getProspect
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator(mockGroupLead));

        // Cria um mock para a resposta do serviço
        FS1_OutboundResponse mockResponse = new FS1_OutboundResponse();
        mockResponse.setStatusCode(200);
        mockResponse.setBody(JSON.serialize(new List<FS1_ContactSocioResponse>{
            new FS1_ContactSocioResponse(
                // Preencha com dados fictícios conforme necessário
            )
        }));
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator(mockResponse));

        // Chama o método a ser testado
        List<ContactResponse> result = YourClass.GetContato(); // Substitua 'YourClass' pelo nome da sua classe

        // Verifique se o resultado é como esperado
        System.assertNotEquals(null, result, 'O resultado não deve ser null');
        System.assertEquals(0, result.size(), 'A lista de resultados deve estar vazia'); // Ajuste conforme o comportamento esperado

        Test.stopTest();
    }
    
    // Mock para HttpCallout
    private class MockHttpResponseGenerator implements HttpCalloutMock {
        private HU7_Group_Lead__c groupLead;
        private FS1_OutboundResponse response;
        
        MockHttpResponseGenerator(HU7_Group_Lead__c groupLead) {
            this.groupLead = groupLead;
        }
        
        MockHttpResponseGenerator(FS1_OutboundResponse response) {
            this.response = response;
        }
        
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            if (groupLead != null) {
                res.setHeader('Content-Type', 'application/json');
                res.setBody(JSON.serialize(groupLead));
                res.setStatusCode(200);
            } else if (response != null) {
                res.setHeader('Content-Type', 'application/json');
                res.setBody(response.toString());
                res.setStatusCode(response.getStatusCode());
            }
            return res;
        }
    }
}
