import boto3
import csv
import io

# Cliente S3
s3 = boto3.client('s3')

def lambda_handler(event, context):
    bucket = event['bucket']
    key = event['key']
    
    try:
        # Recuperando o arquivo do S3
        response = s3.get_object(Bucket=bucket, Key=key)
        file_content = response['Body'].read()
        
        # Abrindo o arquivo CSV
        csv_file = io.StringIO(file_content.decode('utf-8'))
        csv_reader = csv.reader(csv_file)
        
        # Processando cada linha do CSV
        for row_index, row in enumerate(csv_reader):
            print(f"Linha {row_index + 1}: {row}")
            
            # Se você souber que o CSV tem colunas específicas, pode acessar assim:
            if row:
                coluna_1 = row[0]  # Primeira coluna
                coluna_2 = row[1]  # Segunda coluna
                print(f"Coluna 1: {coluna_1}, Coluna 2: {coluna_2}")
        
        return {
            "statusCode": 200,
            "body": "Arquivo CSV lido com sucesso."
        }

    except Exception as e:
        print(f"Erro ao processar o arquivo: {str(e)}")
        return {
            "statusCode": 500,
            "body": f"Erro ao processar o arquivo: {str(e)}"
        }





import unittest
from unittest.mock import patch
from handler import lambda_handler

class TestLambdaHandler(unittest.TestCase):

    @patch("handler.logger")
    def test_lambda_handler(self, mock_logger):
        # Arrange
        event = {"key": "value"}
        context = None

        # Act
        response = lambda_handler(event, context)

        # Assert
        mock_logger.info.assert_called_once_with(f"Evento recebido: {event}")
        self.assertEqual(response, {"statusCode": 200, "body": "Evento processado"})

if __name__ == "__main__":
    unittest.main()
