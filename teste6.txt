import { ComponentFixture, TestBed } from '@angular/core/testing';
import { BehaviorSubject } from 'rxjs'; // BehaviorSubject for mocking
import { YourComponent } from './your.component'; // Replace with your actual component
import { MultipartUploadService } from './multipart-upload.service'; // Replace with actual service

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let mockMultipartUploadService: Partial<MultipartUploadService>;
  let responseSubject: BehaviorSubject<{ success: boolean }>;

  beforeEach(async () => {
    // Initialize the BehaviorSubject with a default value
    responseSubject = new BehaviorSubject<{ success: boolean }>({ success: true });

    mockMultipartUploadService = {
      responseWithSuccessOrError$: responseSubject // Use the BehaviorSubject
    };

    await TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MultipartUploadService, useValue: mockMultipartUploadService }
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should show a success message when upload is successful', () => {
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    // Trigger the subscription
    component.subscribeToResponse();

    // Expect a success message to be shown
    expect(showMessageSpy).toHaveBeenCalledWith('Upload successful', 'success');
  });

  it('should show an error message when upload fails', () => {
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    // Trigger a new value with success = false
    responseSubject.next({ success: false });

    // Expect an error message to be shown
    expect(showMessageSpy).
