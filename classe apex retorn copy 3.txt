public class GrupoHandler_Contatos_Dinamico {
    @InvocableMethod(label='Buscar contatos do grupo (DinÃ¢mico - Real)')
    public static List<Response> buscarContatos(List<Request> requests) {
        List<Response> responses = new List<Response>();

        for (Request req : requests) {
            if (String.isBlank(req.groupName) || String.isBlank(req.groupId)) continue;

            Map<String, Object> payload = new Map<String, Object>();
            payload.put('groupName', req.groupName);

            List<Contato> listaContatos = new List<Contato>();

            // ðŸ”” SimulaÃ§Ã£o de consulta real (substitua pela query correta para sua org)
            // Exemplo de como seria se o objeto fosse AccountRelationContact
            List<AccountContactRelation__c> contatosEncontrados = [
                SELECT Email__c 
                FROM AccountContactRelation__c 
                WHERE Account.IdExternoGroup__c = :req.groupId
            ];

            for (AccountContactRelation__c  arc : contatosEncontrados) {
                if (arc.Contact != null) {
                    Contato contato = new Contato();
                    contato.nome = arc.Contact.Name;
                    listaContatos.add(contato);
                }
            }

            payload.put('contatos', listaContatos);

            Response r = new Response();
            r.prompt = JSON.serializePretty(payload);
            responses.add(r);
        }

        return responses;
    }

    public class Request {
        @InvocableVariable(required=true)
        public String groupName;

        @InvocableVariable(required=true)
        public String groupId;
    }

    public class Contato {
        public String email;
        
    }

    public class Response {
        @InvocableVariable(label='Prompt' description='Prompt')
        public String Prompt;
    }

}
