public static void compareAndUpdateContact(ContactResponse newLead, Lead leadCurrent, ContactUpdateComparison respostaContato) {
    Lead contactLead = new Lead();
    assignPhoneNumbers(contactLead, newLead.telefones, newLead.optOutTelefone);
    
    Set<String> phonesCurrent = new Set<String>{leadCurrent.Phone};
    Set<String> emailsCurrent = new Set<String>{leadCurrent.Email};
    Set<String> mobilePhonesCurrent = new Set<String>{leadCurrent.MobilePhone};

    // Comparar telefones
    if (!phonesCurrent.contains(contactLead.Phone)) {
        respostaContato.addTelefone(leadCurrent.Phone, 'Atual');
        respostaContato.addTelefone(contactLead.Phone, 'Novo');
    }

    // Comparar mobile phones
    if (!mobilePhonesCurrent.contains(contactLead.MobilePhone)) {
        respostaContato.addMobilePhones(leadCurrent.MobilePhone, 'Atual');
        respostaContato.addMobilePhones(contactLead.MobilePhone, 'Novo');
    }

    // Comparar emails
    if (newLead.emails != null && !newLead.emails.isEmpty()) {
        if (!emailsCurrent.contains(newLead.emails[0].valor_dado_cadastral.email)) {
            respostaContato.addEmail(leadCurrent.Email, 'Atual');
            respostaContato.addEmail(newLead.emails[0].valor_dado_cadastral.email, 'Novo');
        }
    }

    // Verificar se todos os três tipos de listas não têm o tipo 'Novo'
    if (!hasNovoType(respostaContato.phones) && !hasNovoType(respostaContato.mobilePhones) && !hasNovoType(respostaContato.emails)) {
        // Se todos estiverem sem 'Novo', removemos os itens
        removeIfNovo(respostaContato.phones);
        removeIfNovo(respostaContato.mobilePhones);
        removeIfNovo(respostaContato.emails);
    }
}

// Método para verificar se algum item na lista tem o tipo 'Novo'
private static Boolean hasNovoType(List<ContactUpdateInfo> items) {
    for (ContactUpdateInfo item : items) {
        if (item.type == 'Novo') {
            return true;
        }
    }
    return false;
}

// Método para remover valores com tipo 'Novo' nas listas
private static void removeIfNovo(List<ContactUpdateInfo> items) {
    // Criando uma lista para armazenar os itens que não têm o tipo 'Novo' (só 'Atual')
    List<ContactUpdateInfo> itemsToKeep = new List<ContactUpdateInfo>();

    // Iterando sobre os itens e mantendo os que têm status diferente de 'Novo' (somente 'Atual')
    for (ContactUpdateInfo item : items) {
        if (item.type != 'Novo') {
            itemsToKeep.add(item);
        }
    }

    // Atualizando a lista original para conter apenas os itens com status diferente de 'Novo'
    items.clear();
    items.addAll(itemsToKeep);
}




tested



@isTest
public class ContactUpdateComparisonTest {

    @isTest
    public static void testHasNovoType() {
        // Caso 1: Nenhum item com tipo 'Novo' e valor preenchido
        List<ContactUpdateInfo> list1 = new List<ContactUpdateInfo>{
            new ContactUpdateInfo('123456789', 'Atual'),
            new ContactUpdateInfo('987654321', 'Atual')
        };
        Boolean result1 = ContactUpdateComparison.hasNovoType(list1);
        System.assertEquals(false, result1, 'Esperado: false, pois nenhum item tem tipo "Novo" e valor preenchido.');

        // Caso 2: Um item com tipo 'Novo' e valor preenchido
        List<ContactUpdateInfo> list2 = new List<ContactUpdateInfo>{
            new ContactUpdateInfo('123456789', 'Novo'),
            new ContactUpdateInfo('987654321', 'Atual')
        };
        Boolean result2 = ContactUpdateComparison.hasNovoType(list2);
        System.assertEquals(true, result2, 'Esperado: true, pois existe um item com tipo "Novo" e valor preenchido.');

        // Caso 3: Um item com tipo 'Novo' mas valor vazio
        List<ContactUpdateInfo> list3 = new List<ContactUpdateInfo>{
            new ContactUpdateInfo('', 'Novo'),
            new ContactUpdateInfo('987654321', 'Atual')
        };
        Boolean result3 = ContactUpdateComparison.hasNovoType(list3);
        System.assertEquals(false, result3, 'Esperado: false, pois o item com tipo "Novo" tem valor vazio.');

        // Caso 4: Vários itens com tipo 'Novo' e valor preenchido
        List<ContactUpdateInfo> list4 = new List<ContactUpdateInfo>{
            new ContactUpdateInfo('123456789', 'Novo'),
            new ContactUpdateInfo('987654321', 'Novo')
        };
        Boolean result4 = ContactUpdateComparison.hasNovoType(list4);
        System.assertEquals(true, result4, 'Esperado: true, pois todos os itens têm tipo "Novo" e valor preenchido.');

        // Caso 5: Nenhum item na lista
        List<ContactUpdateInfo> list5 = new List<ContactUpdateInfo>();
        Boolean result5 = ContactUpdateComparison.hasNovoType(list5);
        System.assertEquals(false, result5, 'Esperado: false, pois a lista está vazia.');
    }
}

