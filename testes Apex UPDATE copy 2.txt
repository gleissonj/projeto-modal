@isTest
private class FS1_ContactSocioControllerTest {

    @isTest
    static void testEnsureLeadToFrontChoiceIsNotEmpty() {
        // Teste 1: Passar uma lista vazia
        List<ContactUpdateComparison> leadToFrontChoice2 = new List<ContactUpdateComparison>();
        
        // Chamar o método a ser testado
        LeadService.ensureLeadToFrontChoiceIsNotEmpty(leadToFrontChoice2);
        
        // Verificar que a lista foi preenchida com um objeto
        System.assertEquals(1, leadToFrontChoice2.size(), 'A lista deveria ter 1 item após a execução');
        System.assertEquals('', leadToFrontChoice2[0].name, 'O nome do objeto deveria ser uma string vazia');
        System.assertEquals('', leadToFrontChoice2[0].cpf, 'O CPF do objeto deveria ser uma string vazia');
        System.assertEquals(0, leadToFrontChoice2[0].phones.size(), 'A lista de telefones deveria estar vazia');
        System.assertEquals(0, leadToFrontChoice2[0].emails.size(), 'A lista de emails deveria estar vazia');
        System.assertEquals(0, leadToFrontChoice2[0].mobilePhones.size(), 'A lista de telefones móveis deveria estar vazia');
        
        // Teste 2: Passar uma lista já populada com objetos
        List<ContactUpdateInfo> phones = new List<ContactUpdateInfo>();
        List<ContactUpdateInfo> emails = new List<ContactUpdateInfo>();
        List<ContactUpdateInfo> mobilePhones = new List<ContactUpdateInfo>();
        
        // Criar o objeto existente
        ContactUpdateComparison existingComparison = new ContactUpdateComparison('John Doe', '123456789', 'LeadId', phones, emails, mobilePhones);
        leadToFrontChoice2 = new List<ContactUpdateComparison>{existingComparison};
        
        // Chamar o método novamente
        LeadService.ensureLeadToFrontChoiceIsNotEmpty(leadToFrontChoice2);
        
        // Verificar que a lista ainda tem o mesmo número de itens
        System.assertEquals(1, leadToFrontChoice2.size(), 'A lista não deveria adicionar novos itens');
        System.assertEquals('John Doe', leadToFrontChoice2[0].name, 'O nome deveria permanecer o mesmo');
        System.assertEquals('123456789', leadToFrontChoice2[0].cpf, 'O CPF deveria permanecer o mesmo');
        System.assertEquals(0, leadToFrontChoice2[0].phones.size(), 'A lista de telefones deveria continuar vazia');
        System.assertEquals(0, leadToFrontChoice2[0].emails.size(), 'A lista de emails deveria continuar vazia');
        System.assertEquals(0, leadToFrontChoice2[0].mobilePhones.size(), 'A lista de telefones móveis deveria continuar vazia');
    }
}



public static void updateLeadsFromSelection(String phone, String mobilePhone, String email) {
    List<Lead> leadsToUpdate = new List<Lead>();

    for (Map<String, Object> leadData : leadsData) {
        Id idLead = (Id) leadData.get('idLead');
        Lead lead = repositoryLead.findLeadById(idLead);

        // Atualizando os campos se o valor não for vazio ou nulo
        if (String.isNotBlank((String) leadData.get('selectedMobilePhone'))) {
            lead.MobilePhone = (String) leadData.get('selectedMobilePhone');
        }
        if (String.isNotBlank((String) leadData.get('selectedPhone'))) {
            lead.Phone = (String) leadData.get('selectedPhone');
        }
        if (String.isNotBlank((String) leadData.get('selectedEmail'))) {
            lead.Email = (String) leadData.get('selectedEmail');
        }

        leadsToUpdate.add(lead);
    }

    repositoryLead.updateLeads(leadsToUpdate);
}
