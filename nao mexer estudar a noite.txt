public class CNPJValidator {

    public class Request {
        @InvocableVariable(required=true)
        public String cnpj;
    }

    public class ValidationResult {
        @InvocableVariable
        public Boolean isValid;

        @InvocableVariable
        public String message;
    }

    @InvocableMethod(label='Validar CNPJ')
    public static List<ValidationResult> validateCNPJ(List<Request> requestList) {
        List<ValidationResult> results = new List<ValidationResult>();

        for (Request req : requestList) {
            ValidationResult result = runValidations(req.cnpj);
            results.add(result);
        }

        return results;
    }

    private static ValidationResult runValidations(String cnpj) {
        ValidationResult result = new ValidationResult();

        String errorMessage = getValidationError(cnpj);

        if (errorMessage != null) {
            result.isValid = false;
            result.message = errorMessage;
        } else {
            result.isValid = true;
            result.message = 'CNPJ válido.';
        }

        return result;
    }

    private static String getValidationError(String cnpj) {
        if (String.isBlank(cnpj)) {
            return 'CNPJ inválido: valor nulo ou vazio.';
        }

        if (!Pattern.matches('^[0-9\\.\\-/]*$', cnpj)) {
            return 'CNPJ inválido: contém caracteres não numéricos ou inválidos.';
        }

        String cleanCNPJ = cnpj.replaceAll('[^0-9]', '');

        if (cleanCNPJ.length() != 14) {
            return 'CNPJ inválido: quantidade de dígitos incorreta (esperado: 14).';
        }

        if (cleanCNPJ == String.valueOf(cleanCNPJ.substring(0,1)).repeat(14)) {
            return 'CNPJ inválido: todos os dígitos são iguais.';
        }

        if (!validateCheckDigits(cleanCNPJ)) {
            return 'CNPJ inválido: dígitos verificadores não conferem.';
        }

        return null;  // Se passou todas as validações
    }

    private static Boolean validateCheckDigits(String cnpj) {
        Integer[] weights1 = new Integer[] {5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2};
        Integer[] weights2 = new Integer[] {6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2};

        String numbers = cnpj.substring(0, 12);
        Integer sum = 0;

        for (Integer i = 0; i < 12; i++) {
            sum += Integer.valueOf(String.valueOf(numbers.charAt(i))) * weights1[i];
        }
        Integer digit1 = (sum % 11 < 2) ? 0 : 11 - (sum % 11);

        numbers += String.valueOf(digit1);
        sum = 0;
        for (Integer i = 0; i < 13; i++) {
            sum += Integer.valueOf(String.valueOf(numbers.charAt(i))) * weights2[i];
        }
        Integer digit2 = (sum % 11 < 2) ? 0 : 11 - (sum % 11);

        String checkDigits = String.valueOf(digit1) + String.valueOf(digit2);

        return cnpj.endsWith(checkDigits);
    }
}
