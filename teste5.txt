import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of, throwError } from 'rxjs'; // For creating mock observables
import { YourComponent } from './your.component'; // Replace with your actual component
import { MultipartUploadService } from './multipart-upload.service'; // Replace with actual service

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let mockMultipartUploadService: Partial<MultipartUploadService>;

  beforeEach(async () => {
    mockMultipartUploadService = {
      responseWithSuccessOrError$: of({ success: true }) // Mock observable with default success response
    };

    await TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MultipartUploadService, useValue: mockMultipartUploadService }
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should show a success message when upload is successful', () => {
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    // Trigger the subscription
    component.subscribeToResponse();

    // Expect a success message to be shown
    expect(showMessageSpy).toHaveBeenCalledWith('Upload successful', 'success');
  });

  it('should show an error message when upload fails', () => {
    mockMultipartUploadService.responseWithSuccessOrError$ = of({ success: false });
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    // Trigger the subscription again with the new mock value
    component.subscribeToResponse();

    // Expect an error message to be shown
    expect(showMessageSpy).toHaveBeenCalledWith('Upload failed', 'error');
  });

  it('should show an error message when an error occurs', () => {
    mockMultipartUploadService.responseWithSuccessOrError$ = throwError(() => new Error('Some error'));
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    // Trigger the subscription again with an error
    component.subscribeToResponse();

    // Expect an error message to be shown
    expect(showMessageSpy).toHaveBeenCalledWith('An error occurred', 'error');
  });
});
