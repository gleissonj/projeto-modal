import { TestBed } from '@angular/core/testing';
import { MyComponent } from './my-component'; // Replace with your actual component
import { MapValueMultipartUpload } from './map-value-multipart-upload.model'; // Replace with correct model

describe('MyComponent', () => {
  let component: MyComponent;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [MyComponent],
    });

    component = TestBed.inject(MyComponent);
  });

  it('should return true when all first parts of each multipart upload are successful', () => {
    // Arrange: Mock the mapMultipartUpload with all first parts having successful requests
    const mockFileParts1: MapValueMultipartUpload[] = [
      { successfulRequest: true } as MapValueMultipartUpload
    ];
    const mockFileParts2: MapValueMultipartUpload[] = [
      { successfulRequest: true } as MapValueMultipartUpload
    ];

    const mapMultipartUpload = new Map<string, MapValueMultipartUpload[]>();
    mapMultipartUpload.set('mockHash1', mockFileParts1);
    mapMultipartUpload.set('mockHash2', mockFileParts2);

    // Act: Call checkIfFirstPartRequestPassedSuccessfully
    const result = component.checkIfFirstPartRequestPassedSuccessfully(mapMultipartUpload);

    // Assert: It should return true
    expect(result).toBe(true);
  });

  it('should return false when one of the first parts of a multipart upload is unsuccessful', () => {
    // Arrange: Mock the mapMultipartUpload with one unsuccessful request
    const mockFileParts1: MapValueMultipartUpload[] = [
      { successfulRequest: true } as MapValueMultipartUpload
    ];
    const mockFileParts2: MapValueMultipartUpload[] = [
      { successfulRequest: false } as MapValueMultipartUpload
    ];

    const mapMultipartUpload = new Map<string, MapValueMultipartUpload[]>();
    mapMultipartUpload.set('mockHash1', mockFileParts1);
    mapMultipartUpload.set('mockHash2', mockFileParts2);

    // Act: Call checkIfFirstPartRequestPassedSuccessfully
    const result = component.checkIfFirstPartRequestPassedSuccessfully(mapMultipartUpload);

    // Assert: It should return false
    expect(result).toBe(false);
  });

  it('should return true when mapMultipartUpload is empty', () => {
    // Arrange: Empty mapMultipartUpload
    const mapMultipartUpload = new Map<string, MapValueMultipartUpload[]>();

    // Act: Call checkIfFirstPartRequestPassedSuccessfully
    const result = component.checkIfFirstPartRequestPassedSuccessfully(mapMultipartUpload);

    // Assert: It should return true (since there are no parts to fail)
    expect(result).toBe(true);
  });
});
