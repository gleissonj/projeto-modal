using Moq;
using Xunit;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class ProspectServiceTests
{
    private readonly Mock<IBucketService> _bucketMock;
    private readonly Mock<IMapper> _mapperMock;
    private readonly ProspectService _prospectService;

    public ProspectServiceTests()
    {
        _bucketMock = new Mock<IBucketService>();
        _mapperMock = new Mock<IMapper>();
        _prospectService = new ProspectService(_bucketMock.Object, _mapperMock.Object);
    }

    [Fact]
    public async Task GetProspectBaseCompleta_ShouldReturnMappedProspectList()
    {
        // Arrange
        string cnpj = "12345678000199";
        string prefix = "some-prefix";
        var prospectBaseCompletaList = new List<ProspectBaseCompleta>
        {
            new ProspectBaseCompleta { Cnpj = cnpj, Name = "Prospect 1" },
            new ProspectBaseCompleta { Cnpj = cnpj, Name = "Prospect 2" }
        };
        var prospectViewModelList = new List<ProspectBaseCompletaViewModel>
        {
            new ProspectBaseCompletaViewModel { Name = "Prospect 1" },
            new ProspectBaseCompletaViewModel { Name = "Prospect 2" }
        };

        _bucketMock.Setup(b => b.GetLastSubFolder(It.IsAny<string>(), It.IsAny<string>()))
                   .Returns(prefix);

        _bucketMock.Setup(b => b.GetGeneric<ProspectBaseCompleta>(It.IsAny<string>(), prefix))
                   .ReturnsAsync(prospectBaseCompletaList);

        _mapperMock.Setup(m => m.Map<ProspectBaseCompletaViewModel>(It.IsAny<ProspectBaseCompleta>()))
                   .Returns((ProspectBaseCompleta source) => 
                       prospectViewModelList.FirstOrDefault(vm => vm.Name == source.Name));

        // Act
        var result = await _prospectService.GetProspectBaseCompleta(cnpj);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(prospectViewModelList.Count, result.Count);
        Assert.Equal(prospectViewModelList[0].Name, result[0].Name);
    }
}
