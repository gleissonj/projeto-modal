GETCPFs

@IsTest
    static void getString(){
        // Arrange: create mock data (ContactResponse list)
        // Arrange: Create a list of ContactResponse with direct property assignment
        List<ContactResponse> leads = new List<ContactResponse>();

        ContactResponse lead1 = new ContactResponse();
        lead1.cpf = '123.456.789-00'; // Assign CPF directly

        ContactResponse lead2 = new ContactResponse();
        lead2.cpf = '987.654.321-00'; // Assign CPF directly

        leads.add(lead1);
        leads.add(lead2);


        // Act: Call the method to test
        Set<String> result = ContactController.getCPFs(leads);

        // Assert: Check that the Set contains the correct formatted CPF values
        System.assertEquals(2, result.size(), 'Should contain 2 CPF values');
    }

    @isTest
    static void testInvalidCPFs() {
        // Arrange: Create a list of ContactResponse with invalid CPFs
        List<ContactResponse> leads = new List<ContactResponse>();

        ContactResponse lead1 = new ContactResponse();
        lead1.cpf = ''; // Empty CPF

        ContactResponse lead2 = new ContactResponse();
        lead2.cpf = null; // Null CPF

        ContactResponse lead3 = new ContactResponse();
        lead3.cpf = '    '; // Whitespace CPF

        leads.add(lead1);
        leads.add(lead2);
        leads.add(lead3);

        // Act: Call the method to test
        Set<String> result = ContactController.getCPFs(leads);

        // Assert: Check that the Set is empty as there are no valid CPFs
        System.assertEquals(0, result.size(), 'Should not contain any valid CPF values');
    }


////////////////////////////////////////


GETEXISTINGLEAD


@isTest
public class LeadServiceTest {
    
    @isTest
    static void testGetExistingLeads() {
        
        // Step 1: Create mock Lead data
        Lead lead1 = new Lead(
            FirstName = 'John',
            LastName = 'Doe',
            HU7_CPF__c = '12345678901',
            Company = 'Test Company 1'
        );
        
        Lead lead2 = new Lead(
            FirstName = 'Jane',
            LastName = 'Doe',
            HU7_CPF__c = '98765432100',
            Company = 'Test Company 2'
        );
        
        Lead lead3 = new Lead(
            FirstName = 'Jim',
            LastName = 'Beam',
            HU7_CPF__c = '12345678901',
            Company = 'Test Company 3'
        );
        
        insert new List<Lead>{lead1, lead2, lead3};

        // Step 2: Mock the repository call
        // We are assuming that the repositoryLead.findCPFLeadsExisting method would return a list of Leads based on the provided Set of CPFs
        // Since this is just a unit test, we will mock the return value of the repository method
        Test.startTest();
        
        Set<String> cpfSet = new Set<String>{'12345678901', '98765432100'};
        
        // Assuming repositoryLead.findCPFLeadsExisting returns leads based on CPF match
        // Mock the repository call here if needed.
        
        // Step 3: Call the method you want to test
        Map<String, Lead> resultMap = LeadService.getExistingLeads(cpfSet);
        
        Test.stopTest();
        
        // Step 4: Assertions
        // Assert that the map has two entries based on the CPF set
        System.assertEquals(2, resultMap.size(), 'The map should contain 2 leads.');

        // Assert that the correct CPF is used as the key and the corresponding Lead is returned
        System.assert(resultMap.containsKey('12345678901'), 'The map should contain CPF 12345678901.');
        System.assert(resultMap.containsKey('98765432100'), 'The map should contain CPF 98765432100.');
        
        // Ensure that no duplicate CPF (for example, '12345678901' should only be in the map once)
        Lead leadFromMap = resultMap.get('12345678901');
        System.assertNotEquals(leadFromMap, null, 'Lead for CPF 12345678901 should be found.');
        System.assertEquals('Test Company 1', leadFromMap.Company, 'The lead company should match the first lead.');
    }
}


@isTest
public class LeadServiceTest {
    
    @isTest
    static void testGetExistingLeads() {
        
        // Step 1: Create test Lead records
        Lead lead1 = new Lead(
            FirstName = 'John',
            LastName = 'Doe',
            HU7_CPF__c = '12345678901',
            Company = 'Company 1'
        );
        
        Lead lead2 = new Lead(
            FirstName = 'Jane',
            LastName = 'Doe',
            HU7_CPF__c = '98765432100',
            Company = 'Company 2'
        );
        
        Lead lead3 = new Lead(
            FirstName = 'Jim',
            LastName = 'Beam',
            HU7_CPF__c = '12345678901',
            Company = 'Company 3'
        );
        
        // Insert the records
        insert new List<Lead>{lead1, lead2, lead3};
        
        // Step 2: Create a mock Set of CPFs to pass to the method
        Set<String> cpfSet = new Set<String>{'12345678901', '98765432100'};
        
        // Step 3: Mock repositoryLead.findCPFLeadsExisting call
        // For the purposes of this test, we don't need to mock the actual repository call if you're working with real data.
        // But if repositoryLead is using a custom class, you'd mock it here.
        
        // Step 4: Call the method we want to test
        Test.startTest();
        Map<String, Lead> resultMap = LeadService.getExistingLeads(cpfSet);
        Test.stopTest();
        
        // Step 5: Validate the results using assertions
        System.assertEquals(2, resultMap.size(), 'The map should contain 2 leads.');
        
        // Assert that the CPF keys in the map match the expected CPFs
        System.assert(resultMap.containsKey('12345678901'), 'The map should contain CPF 12345678901.');
        System.assert(resultMap.containsKey('98765432100'), 'The map should contain CPF 98765432100.');
        
        // Ensure that no duplicate CPF (like '12345678901') is in the map (it should appear once only)
        Lead leadFromMap = resultMap.get('12345678901');
        System.assertNotEquals(leadFromMap, null, 'Lead for CPF 12345678901 should be found.');
        System.assertEquals('Company 1', leadFromMap.Company, 'The company for CPF 12345678901 should match Company 1.');
        
        // Assert that the second CPF is present in the map and its corresponding company is correct
        Lead leadFromMap2 = resultMap.get('98765432100');
        System.assertNotEquals(leadFromMap2, null, 'Lead for CPF 98765432100 should be found.');
        System.assertEquals('Company 2', leadFromMap2.Company, 'The company for CPF 98765432100 should match Company 2.');
        
        // Ensure the duplicate CPF '12345678901' returns only one result
        System.assertNotEquals(leadFromMap, lead3, 'Lead for CPF 12345678901 should only appear once in the result.');
    }
}


//////////////////////////////////////


PROCESS LEAD

@isTest
public class LeadProcessorTest {

    @isTest
    static void testProcessLeads() {
        
        // Step 1: Create test data
        // Create existing leads in Salesforce
        Lead existingLead1 = new Lead(
            FirstName = 'John',
            LastName = 'Doe',
            HU7_CPF__c = '12345678901',
            Prospect__c = 'someRecordId'
        );
        insert existingLead1;

        // Create another lead for testing, with a different CPF
        Lead existingLead2 = new Lead(
            FirstName = 'Jane',
            LastName = 'Doe',
            HU7_CPF__c = '98765432100',
            Prospect__c = 'someRecordId'
        );
        insert existingLead2;

        // Step 2: Create ContactResponse list (new leads)
        ContactResponse newLead1 = new ContactResponse(
            nome = 'Carlos Silva',
            cpf = '12345678901'
        );
        ContactResponse newLead2 = new ContactResponse(
            nome = 'Ana Pereira',
            cpf = '55555555555'
        );
        
        List<ContactResponse> leads = new List<ContactResponse>{newLead1, newLead2};
        
        // Step 3: Prepare the map of existing leads
        Map<String, Lead> mapLeadExisting = new Map<String, Lead>{
            '12345678901' => existingLead1,
            '98765432100' => existingLead2
        };
        
        // Step 4: Prepare the lists for ContactUpdateComparison and newLeadsToInsert
        List<ContactUpdateComparison> leadToFrontChoice = new List<ContactUpdateComparison>();
        List<Lead> newLeadsToInsert = new List<Lead>();
        
        Id recordIdPage = 'someRecordId'; // Use any valid record Id

        // Step 5: Call the method to be tested
        Test.startTest();
        LeadProcessor.processLeads(leads, mapLeadExisting, leadToFrontChoice, newLeadsToInsert, recordIdPage);
        Test.stopTest();
        
        // Step 6: Assert the results
        
        // Check if the leadToFrontChoice list was populated with updated leads
        System.assertEquals(1, leadToFrontChoice.size(), 'The leadToFrontChoice should have 1 entry for existing lead.');
        
        ContactUpdateComparison comparison1 = leadToFrontChoice[0];
        System.assertEquals('12345678901', comparison1.cpf, 'The CPF of the updated lead should be 12345678901.');
        
        // Assert that a new lead was inserted for newLead2
        System.assertEquals(1, newLeadsToInsert.size(), 'There should be one new lead inserted.');
        System.assertEquals('55555555555', newLeadsToInsert[0].HU7_CPF__c, 'The CPF of the new lead should be 55555555555.');
    }

}



///////////////////////////////


CREATENEWLEADS


@isTest
public class LeadServiceTest {

    @isTest
    static void testCreateNewLead() {
        
        // Step 1: Create a mock ContactResponse
        ContactResponse newLead = new ContactResponse(
            nome = 'Carlos Silva',
            cpf = '12345678901',
            emails = new List<EmailData>{ new EmailData('carlos.silva@example.com') },
            telefones = new List<PhoneData>{ new PhoneData('1234567890') },
            optOutTelefone = false
        );
        
        Id recordPageId = 'someRecordId';  // Use a valid Record Id for testing
        
        // Step 2: Mock or stub external methods
        // We will assume that `splitName`, `formatCPF`, and `FS1_LeadRecordType.prospectId()` work as expected
        // So we will just call the method directly without stubbing
        
        // Step 3: Call the method under test
        Test.startTest();
        Lead createdLead = LeadService.createNewLead(newLead, recordPageId);
        Test.stopTest();
        
        // Step 4: Assertions
        
        // Check if the created Lead's fields are correctly populated
        System.assertNotEquals(createdLead, null, 'The created lead should not be null.');
        
        System.assertEquals('12345678901', createdLead.HU7_CPF__c, 'The CPF should be correctly set.');
        System.assertEquals('Carlos', createdLead.FirstName, 'The first name should be correctly set.');
        System.assertEquals('Silva', createdLead.LastName, 'The last name should be correctly set.');
        System.assertEquals('carlos.silva@example.com', createdLead.Email, 'The email should be correctly set.');
        
        // The RecordTypeId should be assigned to the lead (this assumes that FS1_LeadRecordType.prospectId() works as expected)
        // So we just check if it's not null
        System.assertNotEquals(createdLead.RecordTypeId, null, 'The RecordTypeId should be set.');
        
        // Ensure the Prospect__c is correctly set to the recordPageId
        System.assertEquals(recordPageId, createdLead.Prospect__c, 'The Prospect__c should be set correctly.');
        
        // Check if phone number assignment was done correctly
        System.assertEquals('1234567890', createdLead.Phone, 'The phone number should be correctly assigned.');
        
        // Ensure assignPhoneNumbers handled the "optOutTelefone" field (if it's not opting out)
        System.assertEquals(false, createdLead.HasOptedOutOfPhone, 'The phone opt-out flag should be correctly set.');
    }
}


/////////////////////////////////////////

INSERT NEW LEADS

@isTest
public class LeadServiceTest {

    @isTest
    static void testInsertNewLeads() {
        
        // Step 1: Create test Lead data
        Lead lead1 = new Lead(
            FirstName = 'John',
            LastName = 'Doe',
            HU7_CPF__c = '12345678901',
            Company = 'Company 1'
        );
        
        Lead lead2 = new Lead(
            FirstName = 'Jane',
            LastName = 'Doe',
            HU7_CPF__c = '98765432100',
            Company = 'Company 2'
        );
        
        List<Lead> newLeadsToInsert = new List<Lead>{ lead1, lead2 };
        
        // Step 2: Mock repository.insertLeads method
        // To isolate this test, we'll use a mock implementation for repository.insertLeads.
        Test.startTest();
        
        // Execute the method under test
        LeadService.insertNewLeads(newLeadsToInsert);
        
        Test.stopTest();
        
        // Step 3: Assertions
        
        // Verify that the insertLeads method was called
        // For unit testing, we check whether leads are inserted into the database.
        List<Lead> insertedLeads = [SELECT FirstName, LastName, HU7_CPF__c, Company FROM Lead WHERE HU7_CPF__c IN ('12345678901', '98765432100')];
        
        // Assert that the leads were inserted
        System.assertEquals(2, insertedLeads.size(), 'Two leads should be inserted.');
        
        // Validate that the inserted leads match the data
        System.assertEquals('John', insertedLeads[0].FirstName, 'First lead should have the correct first name.');
        System.assertEquals('Doe', insertedLeads[0].LastName, 'First lead should have the correct last name.');
        System.assertEquals('12345678901', insertedLeads[0].HU7_CPF__c, 'First lead should have the correct CPF.');
        System.assertEquals('Company 1', insertedLeads[0].Company, 'First lead should have the correct company.');
        
        System.assertEquals('Jane', insertedLeads[1].FirstName, 'Second lead should have the correct first name.');
        System.assertEquals('Doe', insertedLeads[1].LastName, 'Second lead should have the correct last name.');
        System.assertEquals('98765432100', insertedLeads[1].HU7_CPF__c, 'Second lead should have the correct CPF.');
        System.assertEquals('Company 2', insertedLeads[1].Company, 'Second lead should have the correct company.');
    }
    
    @isTest
    static void testInsertNewLeadsEmptyList() {
        
        // Step 1: Create an empty list of new leads
        List<Lead> newLeadsToInsert = new List<Lead>();
        
        // Step 2: Call the method with the empty list
        Test.startTest();
        LeadService.insertNewLeads(newLeadsToInsert);
        Test.stopTest();
        
        // Step 3: Assert that no leads were inserted
        // Query the database to check for any new leads
        List<Lead> insertedLeads = [SELECT Id FROM Lead WHERE CreatedDate = TODAY];
        
        // Assert that no leads were inserted
        System.assertEquals(0, insertedLeads.size(), 'No leads should be inserted when the list is empty.');
    }
}


/////////////////


COMPARE AND UPDATE CONTACT


@isTest
public class LeadServiceTest {

    @isTest
    static void testCompareAndUpdateContact() {
        
        // Step 1: Create test data for ContactResponse (new lead) and Lead (current lead)
        ContactResponse newLead = new ContactResponse(
            nome = 'Carlos Silva',
            cpf = '12345678901',
            emails = new List<EmailData>{ new EmailData('carlos.silva@example.com') },
            telefones = new List<PhoneData>{ new PhoneData('1234567890') },
            optOutTelefone = false
        );
        
        Lead leadCurrent = new Lead(
            FirstName = 'Carlos',
            LastName = 'Silva',
            HU7_CPF__c = '12345678901',
            Phone = '0987654321',
            MobilePhone = '1112223333',
            Email = 'old.email@example.com'
        );
        
        // Step 2: Create a ContactUpdateComparison object (to hold results of the comparison)
        ContactUpdateComparison respostaContato = new ContactUpdateComparison(
            newLead.nome,
            newLead.cpf,
            '',
            new List<ContactUpdateInfo>(),
            new List<ContactUpdateInfo>()
        );
        
        // Step 3: Call the method under test
        Test.startTest();
        LeadService.compareAndUpdateContact(newLead, leadCurrent, respostaContato);
        Test.stopTest();
        
        // Step 4: Assertions to validate the comparison and updates
        
        // Assert that the 'respostaContato' has the correct phone number changes
        System.assertEquals(1, respostaContato.phones.size(), 'There should be 1 phone change.');
        System.assertEquals('0987654321', respostaContato.phones[0].oldValue, 'Old phone should be correct.');
        System.assertEquals('1234567890', respostaContato.phones[0].newValue, 'New phone should be correct.');
        
        // Assert that the 'respostaContato' has the correct mobile phone changes
        System.assertEquals(1, respostaContato.mobilePhones.size(), 'There should be 1 mobile phone change.');
        System.assertEquals('1112223333', respostaContato.mobilePhones[0].oldValue, 'Old mobile phone should be correct.');
        System.assertEquals('1234567890', respostaContato.mobilePhones[0].newValue, 'New mobile phone should be correct.');
        
        // Assert that the 'respostaContato' has the correct email changes
        System.assertEquals(1, respostaContato.emails.size(), 'There should be 1 email change.');
        System.assertEquals('old.email@example.com', respostaContato.emails[0].oldValue, 'Old email should be correct.');
        System.assertEquals('carlos.silva@example.com', respostaContato.emails[0].newValue, 'New email should be correct.');
    }

    @isTest
    static void testCompareAndUpdateContactWithNoChanges() {
        
        // Step 1: Create test data for ContactResponse (new lead) and Lead (current lead)
        ContactResponse newLead = new ContactResponse(
            nome = 'Carlos Silva',
            cpf = '12345678901',
            emails = new List<EmailData>{ new EmailData('old.email@example.com') },
            telefones = new List<PhoneData>{ new PhoneData('0987654321') },
            optOutTelefone = false
        );
        
        Lead leadCurrent = new Lead(
            FirstName = 'Carlos',
            LastName = 'Silva',
            HU7_CPF__c = '12345678901',
            Phone = '0987654321',
            MobilePhone = '1112223333',
            Email = 'old.email@example.com'
        );
        
        // Step 2: Create a ContactUpdateComparison object (to hold results of the comparison)
        ContactUpdateComparison respostaContato = new ContactUpdateComparison(
            newLead.nome,
            newLead.cpf,
            '',
            new List<ContactUpdateInfo>(),
            new List<ContactUpdateInfo>()
        );
        
        // Step 3: Call the method under test
        Test.startTest();
        LeadService.compareAndUpdateContact(newLead, leadCurrent, respostaContato);
        Test.stopTest();
        
        // Step 4: Assertions to validate that no changes occurred
        
        // Assert that no phone changes occurred
        System.assertEquals(0, respostaContato.phones.size(), 'There should be no phone changes.');
        
        // Assert that no mobile phone changes occurred
        System.assertEquals(0, respostaContato.mobilePhones.size(), 'There should be no mobile phone changes.');
        
        // Assert that no email changes occurred
        System.assertEquals(0, respostaContato.emails.size(), 'There should be no email changes.');
    }


    ////////////////////////////////// GetContato

    @isTest
    static void testGetContato_ValidResponse() {
        // Setup mock data for repositoryGroupLead.getProspect
        HU7_Group_Lead__c mockLead = new HU7_Group_Lead__c(FS1_Cnpj14__c = '12345678000195');
        // Mock the call to repositoryGroupLead.getProspect(recordIdPage)
        Test.startTest();
        // Simulate the repository method that fetches the lead
        Test.setMock(HU7_Group_Lead__c.class, new MockRepositoryGroupLead(mockLead));

        // Mock the service.getContactSocio() method response
        FS1_ContactSocioResponse mockSocioResponse = new FS1_ContactSocioResponse();
        mockSocioResponse.setCpf('12345678900');
        mockSocioResponse.setName('Test Lead');
        
        List<FS1_ContactSocioResponse> mockResponseList = new List<FS1_ContactSocioResponse>{mockSocioResponse};
        String mockJsonResponse = JSON.serialize(mockResponseList);
        
        // Simulate the service response
        Test.setMock(FS1_OutboundResponse.class, new MockFS1OutboundResponse(mockJsonResponse));
        
        // Execute the method
        List<FS1_ContactUpdateComparison> result = YourClass.getContato('testRecordId');
        
        // Assert the results
        System.assertEquals(1, result.size(), 'The lead list should have one item');
        System.assertEquals('Test Lead', result[0].Name, 'The lead name should match');
        
        Test.stopTest();
    }

    @isTest
    static void testGetContato_EmptyResponse() {
        // Mock empty response from external service
        String emptyJsonResponse = '[]';  // Empty list
        
        // Simulate the repository method
        HU7_Group_Lead__c mockLead = new HU7_Group_Lead__c(FS1_Cnpj14__c = '12345678000195');
        Test.setMock(HU7_Group_Lead__c.class, new MockRepositoryGroupLead(mockLead));
        
        // Simulate the service response
        Test.setMock(FS1_OutboundResponse.class, new MockFS1OutboundResponse(emptyJsonResponse));
        
        // Execute the method
        List<FS1_ContactUpdateComparison> result = YourClass.getContato('testRecordId');
        
        // Assert the results
        System.assertEquals(0, result.size(), 'The lead list should be empty');
        
        Test.stopTest();
    }

    @isTest
    static void testGetContato_ServiceError() {
        // Simulate a failed external service (non-200 status code)
        
        // Mock the repository method
        HU7_Group_Lead__c mockLead = new HU7_Group_Lead__c(FS1_Cnpj14__c = '12345678000195');
        Test.setMock(HU7_Group_Lead__c.class, new MockRepositoryGroupLead(mockLead));
        
        // Simulate an error response (non-200 status code)
        Test.setMock(FS1_OutboundResponse.class, new MockFS1OutboundResponseWithError());
        
        // Execute the method
        List<FS1_ContactUpdateComparison> result = YourClass.getContato('testRecordId');
        
        // Assert the results
        System.assertEquals(0, result.size(), 'The lead list should be empty due to error');
        
        Test.stopTest();
    }

    // Mock classes to simulate external responses

    public class MockRepositoryGroupLead implements HttpCalloutMock {
        private HU7_Group_Lead__c lead;
        
        public MockRepositoryGroupLead(HU7_Group_Lead__c lead) {
            this.lead = lead;
        }

        public HTTPResponse respond(HTTPRequest req) {
            // Return a mock response as if it were a successful callout
            HTTPResponse res = new HTTPResponse();
            res.setStatusCode(200);
            res.setBody(JSON.serialize(lead));
            return res;
        }
    }

    public class MockFS1OutboundResponse implements HttpCalloutMock {
        private String jsonResponse;
        
        public MockFS1OutboundResponse(String jsonResponse) {
            this.jsonResponse = jsonResponse;
        }

        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setStatusCode(200);
            res.setBody(jsonResponse);
            return res;
        }
    }
    
    public class MockFS1OutboundResponseWithError implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            // Simulate an error response
            HTTPResponse res = new HTTPResponse();
            res.setStatusCode(500); // Internal server error
            res.setBody('Error response');
            return res;
        }
    }




}
