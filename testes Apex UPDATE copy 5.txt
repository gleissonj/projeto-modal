@isTest
public class ContactUpdateFieldTest {

    @isTest
    static void testUpdateContactField_NewValue_NotInCurrentSet() {
        // Create mock current set and values
        Set<String> currentSet = new Set<String>{'1234567890', '0987654321'};
        String newValue = '1122334455';
        String currentValue = '1234567890';
        String fieldType = 'Telefone';

        // Create mock ContactUpdateComparison
        ContactUpdateComparison respostaContato = new ContactUpdateComparison('Test Name', '12345678900', 'Lead123', new List<ContactUpdateInfo>(), new List<ContactUpdateInfo>(), new List<ContactUpdateInfo>());

        // Call the method under test
        Test.startTest();
        YourClassName.updateContactField(respostaContato, currentSet, newValue, currentValue, fieldType);
        Test.stopTest();

        // Assert that the addField method was called for both 'Atual' and 'Novo' (Phone)
        System.assertEquals(respostaContato.phones.size(), 2);  // Should add two phones
        System.assertEquals(respostaContato.phones[0].value, '1234567890');  // 'Atual'
        System.assertEquals(respostaContato.phones[0].type, 'Atual');
        System.assertEquals(respostaContato.phones[1].value, '1122334455');  // 'Novo'
        System.assertEquals(respostaContato.phones[1].type, 'Novo');
    }

    @isTest
    static void testUpdateContactField_NewValue_InCurrentSet() {
        // Create mock current set and values
        Set<String> currentSet = new Set<String>{'1234567890', '0987654321'};
        String newValue = '0987654321';
        String currentValue = '1234567890';
        String fieldType = 'Telefone';

        // Create mock ContactUpdateComparison
        ContactUpdateComparison respostaContato = new ContactUpdateComparison('Test Name', '12345678900', 'Lead123', new List<ContactUpdateInfo>(), new List<ContactUpdateInfo>(), new List<ContactUpdateInfo>());

        // Call the method under test
        Test.startTest();
        YourClassName.updateContactField(respostaContato, currentSet, newValue, currentValue, fieldType);
        Test.stopTest();

        // Assert that only one phone value is added as 'Atual'
        System.assertEquals(respostaContato.phones.size(), 1);  // Should add only one phone
        System.assertEquals(respostaContato.phones[0].value, '0987654321');  // 'Atual'
        System.assertEquals(respostaContato.phones[0].type, 'Atual');
    }

    @isTest
    static void testUpdateContactField_NoNewValue() {
        // Create mock current set and values
        Set<String> currentSet = new Set<String>{'1234567890', '0987654321'};
        String newValue = null; // No new value
        String currentValue = '1234567890';
        String fieldType = 'Telefone';

        // Create mock ContactUpdateComparison
        ContactUpdateComparison respostaContato = new ContactUpdateComparison('Test Name', '12345678900', 'Lead123', new List<ContactUpdateInfo>(), new List<ContactUpdateInfo>(), new List<ContactUpdateInfo>());

        // Call the method under test
        Test.startTest();
        YourClassName.updateContactField(respostaContato, currentSet, newValue, currentValue, fieldType);
        Test.stopTest();

        // Assert that no phone was added since there was no new value
        System.assertEquals(respostaContato.phones.size(), 0);  // Should add nothing
    }
    
    @isTest
    static void testUpdateContactField_EmptyCurrentSet() {
        // Test when the current set is empty
        Set<String> currentSet = new Set<String>();
        String newValue = '1122334455';
        String currentValue = '1234567890';
        String fieldType = 'Telefone';

        // Create mock ContactUpdateComparison
        ContactUpdateComparison respostaContato = new ContactUpdateComparison('Test Name', '12345678900', 'Lead123', new List<ContactUpdateInfo>(), new List<ContactUpdateInfo>(), new List<ContactUpdateInfo>());

        // Call the method under test
        Test.startTest();
        YourClassName.updateContactField(respostaContato, currentSet, newValue, currentValue, fieldType);
        Test.stopTest();

        // Assert that both 'Atual' and 'Novo' values are added since the current set was empty
        System.assertEquals(respostaContato.phones.size(), 2);  // Should add two phones
        System.assertEquals(respostaContato.phones[0].value, '1234567890');  // 'Atual'
        System.assertEquals(respostaContato.phones[0].type, 'Atual');
        System.assertEquals(respostaContato.phones[1].value, '1122334455');  // 'Novo'
        System.assertEquals(respostaContato.phones[1].type, 'Novo');
    }
}
