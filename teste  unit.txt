import { TestBed } from '@angular/core/testing';
import { of } from 'rxjs';
import { SeuComponente } from './seu-componente.component'; // Substitua pelo caminho real
import { MultipartUploadService } from './multipart-upload.service'; // Substitua pelo caminho real

describe('SeuComponente', () => {
  let component: SeuComponente;
  let multipartUploadServiceMock: any;

  beforeEach(() => {
    multipartUploadServiceMock = {
      startStepFunction: jasmine.createSpy('startStepFunction').and.returnValue(of(true)) // Simula o retorno do Observable
    };

    TestBed.configureTestingModule({
      declarations: [SeuComponente],
      providers: [
        { provide: MultipartUploadService, useValue: multipartUploadServiceMock }
      ]
    }).compileComponents();

    const fixture = TestBed.createComponent(SeuComponente);
    component = fixture.componentInstance;
  });

  it('deve chamar startStepFunction para cada item da lista', () => {
    const listStepFunction = ['step1', 'step2', 'step3'];

    component.startMultiplesStepFunction(listStepFunction);

    expect(multipartUploadServiceMock.startStepFunction).toHaveBeenCalledTimes(listStepFunction.length);
    expect(multipartUploadServiceMock.startStepFunction).toHaveBeenCalledWith('step1');
    expect(multipartUploadServiceMock.startStepFunction).toHaveBeenCalledWith('step2');
    expect(multipartUploadServiceMock.startStepFunction).toHaveBeenCalledWith('step3');
  });
});
