using Amazon.StepFunctions;
using Amazon.StepFunctions.Model;
using Moq;
using Xunit;
using System.Threading.Tasks;

public class StepFunctionServiceTests
{
    [Fact]
    public async Task ExecutarStepFunction_ShouldReturnSuccessMessage_WhenExecutionIsStarted()
    {
        // Arrange
        var arn = "arn:aws:states:us-west-2:123456789012:stateMachine:myStateMachine";
        var mockClient = new Mock<AmazonStepFunctionsClient>(MockBehavior.Strict);
        var mockResponse = new StartExecutionResponse();

        mockClient.Setup(client => client.StartExecutionAsync(It.IsAny<StartExecutionRequest>(), default))
                  .ReturnsAsync(mockResponse);

        var service = new StepFunctionService(mockClient.Object);

        // Act
        var result = await service.ExecutarStepFunction(arn);

        // Assert
        Assert.NotNull(result);
        Assert.Equal($"O serviço {arn} iniciou.", result.Status);
        mockClient.Verify(client => client.StartExecutionAsync(It.IsAny<StartExecutionRequest>(), default), Times.Once);
    }

    [Fact]
    public async Task ExecutarStepFunction_ShouldThrowException_WhenExecutionFails()
    {
        // Arrange
        var arn = "arn:aws:states:us-west-2:123456789012:stateMachine:myStateMachine";
        var mockClient = new Mock<AmazonStepFunctionsClient>(MockBehavior.Strict);

        mockClient.Setup(client => client.StartExecutionAsync(It.IsAny<StartExecutionRequest>(), default))
                  .ThrowsAsync(new Exception("Execution failed"));

        var service = new StepFunctionService(mockClient.Object);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<Exception>(() => service.ExecutarStepFunction(arn));
        Assert.Equal("Execution failed", exception.Message);
    }
}

// You may need to modify the constructor of StepFunctionService to accept an IAmazonStepFunctions parameter
public class StepFunctionService
{
    private readonly IAmazonStepFunctions _client;

    public StepFunctionService(IAmazonStepFunctions client)
    {
        _client = client;
    }

    public async Task<DomainResponse> ExecutarStepFunction(string arn)
    {
        try
        {
            var startExecutionRequest = new StartExecutionRequest
            {
                StateMachineArn = arn
            };

            var startExecutionResponse = await _client.StartExecutionAsync(startExecutionRequest);
            
            return new DomainResponse(new { Status = $"O serviço {arn} iniciou." });
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
}
