import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledOnOs;
import org.junit.jupiter.api.condition.OS;

import java.nio.file.*;
import java.nio.file.attribute.PosixFilePermission;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class ArquivoServiceUnixTest {

    @Test
    @EnabledOnOs({OS.LINUX, OS.MAC})
    void deveCriarArquivoComPermissaoUnix() throws Exception {
        // Arrange: cria um arquivo local de origem para usar com esquema file://
        Path origem = Files.createTempFile("origem_unix_test_", ".txt");
        Files.writeString(origem, "conteudo");

        String uri = origem.toUri().toString(); // ex: file:///tmp/origem_unix_test_xxx.txt

        // Act
        String destinoStr = ArquivoService.baixarArquivoParaTemp(uri);
        Path destino = Path.of(destinoStr);

        // Assert
        assertTrue(Files.exists(destino));
        // Em Unix: verifica rwx------
        Set<PosixFilePermission> perms = Files.getPosixFilePermissions(destino);
        assertTrue(perms.contains(PosixFilePermission.OWNER_READ));
        assertTrue(perms.contains(PosixFilePermission.OWNER_WRITE));
        assertTrue(perms.contains(PosixFilePermission.OWNER_EXECUTE));

        // (Opcional) conte√∫do copiado
        assertEquals("conteudo", Files.readString(destino));
    }
}
