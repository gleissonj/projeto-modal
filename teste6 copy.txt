import { MyComponent } from './MyComponent'; // Supondo que você tenha uma classe que contém o método updateSorting

describe('MyComponent', () => {
  let component: MyComponent;

  beforeEach(() => {
    component = new MyComponent();
    component.getGruposUser = ['group1', 'group2']; // Exemplo de dados de grupos
    component.permissionsDownloadBicketS3 = ['group1']; // Apenas group1 tem permissão para BicketS3
    component.permissionsDownloadEvs = ['group2']; // Apenas group2 tem permissão para Evs
  });

  it('deve atualizar typeFunc quando o usuário tem permissão para BicketS3 e selectedIndex é 1', () => {
    const event = { selectedIndex: 1 };
    component.updateSorting(event); // Chama a função original
    expect(component.typeFunc).toBe(1); // Verifica se typeFunc foi atualizado para 1
  });

  it('deve exibir a mensagem de erro quando o usuário não tem permissão para BicketS3 e selectedIndex é 1', () => {
    const event = { selectedIndex: 1 };
    component.getGruposUser = ['group2']; // Agora, o group2 não tem permissão para BicketS3
    const spy = jest.spyOn(component, 'showMessage'); // Espiona a função showMessage
    component.updateSorting(event); // Chama a função original
    expect(spy).toHaveBeenCalledWith('Você precisa de permissão para acessar essa funcionalidade. Entre em contato com o ADM', 'error');
  });

  it('deve atualizar typeFunc quando o usuário tem permissão para Evs e selectedIndex é 2', () => {
    const event = { selectedIndex: 2 };
    component.updateSorting(event); // Chama a função original
    expect(component.typeFunc).toBe(2); // Verifica se typeFunc foi atualizado para 2
  });

  it('deve exibir a mensagem de erro quando o usuário não tem permissão para Evs e selectedIndex é 2', () => {
    const event = { selectedIndex: 2 };
    component.getGruposUser = ['group1']; // Agora, o group1 não tem permissão para Evs
    const spy = jest.spyOn(component, 'showMessage'); // Espiona a função showMessage
    component.updateSorting(event); // Chama a função original
    expect(spy).toHaveBeenCalledWith('Você precisa de permissão para acessar essa funcionalidade. Entre em contato com o ADM', 'error');
  });

  it('deve atualizar typeFunc para outros valores de selectedIndex', () => {
    const event = { selectedIndex: 3 }; // Outro valor de selectedIndex
    component.updateSorting(event); // Chama a função original
    expect(component.typeFunc).toBe(3); // Verifica se typeFunc foi atualizado para 3
  });
});


/////NOVO


import { MyComponent } from './MyComponent'; // Importe o componente onde o método existe

describe('MyComponent', () => {
  let component: MyComponent;
  let mockMultipartUploadService: any;

  beforeEach(() => {
    // Mock da dependência multipartUploadService
    mockMultipartUploadService = {
      downloadFileS3: jest.fn().mockReturnValue({
        subscribe: jest.fn((successCallback, errorCallback) => {
          successCallback(new Blob()); // Mock do sucesso da requisição (retorna um Blob vazio)
        }),
      }),
    };

    component = new MyComponent(mockMultipartUploadService);
  });

  it('deve mostrar uma mensagem de erro se os campos bucket ou caminho estiverem vazios', () => {
    const spyShowMessage = jest.spyOn(component, 'showMessage'); // Espiona a função showMessage
    const bucket = { value: '' }; // Campo vazio
    const caminho = { value: 'valid/path' }; // Campo válido

    component.downloadFileAnyBucket(bucket, caminho);

    expect(spyShowMessage).toHaveBeenCalledWith('Você precisa preencher os valores dos campos', 'error');
    expect(component.loading).toBe(false); // Verifica se o loading foi desmarcado
  });

  it('deve baixar o arquivo quando bucket e caminho forem válidos', () => {
    const spyShowMessage = jest.spyOn(component, 'showMessage');
    const bucket = { value: 'validBucket' };
    const caminho = { value: 'valid/path' };

    const createObjectURLSpy = jest.spyOn(window.URL, 'createObjectURL').mockReturnValue('mock-url');
    const revokeObjectURLSpy = jest.spyOn(window.URL, 'revokeObjectURL');
    const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue({
      href: '',
      download: '',
      click: jest.fn(),
    } as any);

    component.downloadFileAnyBucket(bucket, caminho);

    // Verifica se a função createObjectURL foi chamada corretamente
    expect(createObjectURLSpy).toHaveBeenCalled();

    // Verifica se o link de download foi criado e o click foi chamado
    const linkElement = createElementSpy.mock.results[0].value;
    expect(linkElement.click).toHaveBeenCalled();
    expect(linkElement.download).toBe('file-data.csv');

    // Verifica se o método revokeObjectURL foi chamado
    expect(revokeObjectURLSpy).toHaveBeenCalled();

    expect(component.loading).toBe(false); // Verifica se o loading foi desmarcado
    expect(spyShowMessage).not.toHaveBeenCalled(); // Não deve chamar showMessage em caso de sucesso
  });

  it('deve mostrar uma mensagem de erro se o serviço falhar', () => {
    const spyShowMessage = jest.spyOn(component, 'showMessage');
    const bucket = { value: 'validBucket' };
    const caminho = { value: 'valid/path' };

    // Mock do erro na requisição (callback de erro)
    mockMultipartUploadService.downloadFileS3.mockReturnValueOnce({
      subscribe: jest.fn((_successCallback, errorCallback) => {
        errorCallback('error'); // Força o erro
      }),
    });

    component.downloadFileAnyBucket(bucket, caminho);

    expect(spyShowMessage).toHaveBeenCalledWith('O bucket/caminho especificado não existe', 'error');
    expect(component.loading).toBe(false); // Verifica se o loading foi desmarcado após o erro
  });
});



//novoContato
it('deve atualizar typeFunc quando o usuário tem permissão para Evs e selectedIndex é 2', () => {
  component.getGruposUser = ['group1'];  // Defina os grupos do usuário
  component.permissionsDownloadEvs = ['group1'];  // Defina as permissões para Evs
  const spyShowMessage = jest.spyOn(component, 'showMessage');  // Espiona a função showMessage
  const event = { selectedIndex: 2 };  // Define selectedIndex como 2
  
  component.updateSorting(event);  // Chama a função original

  expect(component.typeFunc).toBe(2);  // Verifica se typeFunc foi atualizado para 2
  expect(spyShowMessage).not.toHaveBeenCalled();  // Verifica se showMessage não foi chamada
});
