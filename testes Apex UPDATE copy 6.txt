async downloadFileMigration() {
  try {
    if (!this.bucketName) {
      console.error('Nenhum bucket selecionado.');
      return;
    }

    // Espera carregar os arquivos antes de continuar
    await this.loadFiles();  // Espera até que a Promise de loadFiles seja resolvida

    // Verifica se há arquivos na lista antes de tentar o download
    if (!this.files || this.files.length === 0) {
      console.log('Nenhum arquivo encontrado para download.');
      return; // Sai da função se não houver arquivos
    }

    // Faz o download de todos os arquivos de maneira paralela (assíncrona)
    const downloadPromises = this.files.map(fileName => 
      this.s3Service.downloadFile(this.bucketName, fileName).toPromise()  // Converte o Observable para Promise
    );

    // Aguarda todos os downloads serem concluídos
    const results = await Promise.all(downloadPromises);

    // Criar o link de download para cada arquivo
    results.forEach((response, index) => {
      const fileName = this.files[index];
      const link = document.createElement('a');
      link.href = response.url;
      link.download = fileName;
      link.click();
    });

    console.log('Todos os arquivos foram baixados com sucesso!');
  } catch (error) {
    console.error('Erro ao carregar ou baixar arquivos', error);
  }
}
