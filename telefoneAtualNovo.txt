processData() {
    this.processedData = this.dataWithOptions.map((item, index) => {
        // Verificar se a lista de telefones não está vazia
        const telefoneOptions = item.phones && item.phones.length > 0 
            ? item.phones.map(p => {
                // Concatenando "Atual" e "Novo" para telefones
                const label = p.type === 'Atual' ? `Atual: ${p.value}` : `Novo: ${p.value}`;
                return { label, value: p.value };
            })
            : []; // Caso contrário, retorna uma lista vazia

        // Verificar se a lista de emails não está vazia
        const emailOptions = item.emails && item.emails.length > 0 
            ? item.emails.map(e => {
                // Concatenando "Atual" e "Novo" para emails
                const label = e.type === 'Atual' ? `Atual: ${e.value}` : `Novo: ${e.value}`;
                return { label, value: e.value };
            })
            : []; // Caso contrário, retorna uma lista vazia

        return {
            ...item,
            id: `${item.name}-${index}`,
            selectedPhone: '',  // Inicializa com vazio (sem telefone selecionado)
            selectedEmail: '',  // Inicializa com vazio (sem email selecionado)
            telefoneOptions,    // Adiciona as opções de telefone concatenadas (pode ser vazio)
            emailOptions,       // Adiciona as opções de email concatenadas (pode ser vazio)
        };
    });

    // Verifica se há pelo menos um telefone em algum item para exibir a coluna de telefone
    this.hasPhoneColumn = this.dataWithOptions.some(item => item.phones && item.phones.length > 0);

    // Verifica se há pelo menos um email em algum item para exibir a coluna de email
    this.hasEmailColumn = this.dataWithOptions.some(item => item.emails && item.emails.length > 0);
}
