package seu.pacote;

import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import java.io.File;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

// ✅ Requer mockito-inline no escopo de teste para mockar métodos estáticos
class SqsServiceTest {

    @Test
    void deveFazerUploadDataset_quandoValidacoesPassarem() throws Exception {
        // Arrange
        CrmaDatasetUploader uploader = mock(CrmaDatasetUploader.class);
        SqsService service = new SqsService(uploader);

        MensagemFila msg = mock(MensagemFila.class);
        when(msg.getUrlArquivoMetadados()).thenReturn("s3://bucket/meta.json");
        when(msg.getUrlArquivoDados()).thenReturn("s3://bucket/dados.zip");
        when(msg.getNomeDataset()).thenReturn("datasetX");
        when(msg.getNomeApp()).thenReturn("appY");
        when(msg.getOperacao()).thenReturn("UPSERT");

        String caminhoMeta = "/tmp/meta.json";
        String caminhoDados = "/tmp/dados.zip";

        try (MockedStatic<ArquivoService> arqSvc = mockStatic(ArquivoService.class);
             MockedStatic<ArquivoValidator> arqVal = mockStatic(ArquivoValidator.class)) {

            // Stubs dos estáticos
            arqSvc.when(() -> ArquivoService.baixarArquivoParaTemp("s3://bucket/meta.json"))
                  .thenReturn(caminhoMeta);
            arqSvc.when(() -> ArquivoService.baixarArquivoParaTemp("s3://bucket/dados.zip"))
                  .thenReturn(caminhoDados);

            arqVal.when(() -> ArquivoValidator.validarArquivoMetadados(caminhoMeta))
                  .thenAnswer(inv -> null);
            arqVal.when(() -> ArquivoValidator.validarArquivoDados(caminhoDados))
                  .thenAnswer(inv -> null);

            // Act
            assertDoesNotThrow(() -> service.processarMensagemCrma(msg));

            // Assert (✅ assinatura permite Exception)
            verify(uploader, times(1)).uploadDataset(
                argThat(f -> new File(caminhoMeta).getPath().equals(f.getPath())),
                argThat(f -> new File(caminhoDados).getPath().equals(f.getPath())),
                eq("datasetX"),
                eq("appY"),
                eq("UPSERT"),
                eq("Incremental")
            );

            // (opcional) checagem de chamadas dos estáticos
            arqSvc.verify(() -> ArquivoService.baixarArquivoParaTemp("s3://bucket/meta.json"));
            arqSvc.verify(() -> ArquivoService.baixarArquivoParaTemp("s3://bucket/dados.zip"));
            arqVal.verify(() -> ArquivoValidator.validarArquivoMetadados(caminhoMeta));
            arqVal.verify(() -> ArquivoValidator.validarArquivoDados(caminhoDados));
        }
    }

    @Test
    void naoDeveFazerUpload_quandoValidacaoMetadadosFalhar() throws Exception {
        // Arrange
        CrmaDatasetUploader uploader = mock(CrmaDatasetUploader.class);
        SqsService service = new SqsService(uploader);

        MensagemFila msg = mock(MensagemFila.class);
        when(msg.getUrlArquivoMetadados()).thenReturn("s3://bucket/meta.json");
        when(msg.getUrlArquivoDados()).thenReturn("s3://bucket/dados.zip");
        when(msg.getNomeDataset()).thenReturn("datasetX");
        when(msg.getNomeApp()).thenReturn("appY");
        when(msg.getOperacao()).thenReturn("UPSERT");

        String caminhoMeta = "/tmp/meta.json";

        try (MockedStatic<ArquivoService> arqSvc = mockStatic(ArquivoService.class);
             MockedStatic<ArquivoValidator> arqVal = mockStatic(ArquivoValidator.class)) {

            arqSvc.when(() -> ArquivoService.baixarArquivoParaTemp("s3://bucket/meta.json"))
                  .thenReturn(caminhoMeta);

            // Força exceção na validação → método cai no catch e apenas loga
            arqVal.when(() -> ArquivoValidator.validarArquivoMetadados(caminhoMeta))
                  .thenThrow(new IllegalArgumentException("JSON inválido"));

            // Act
            assertDoesNotThrow(() -> service.processarMensagemCrma(msg));

            // Assert: upload NUNCA é chamado
            verify(uploader, never()).uploadDataset(any(), any(), any(), any(), any(), any());
        }
    }
}
