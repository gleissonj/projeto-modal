import { TestBed } from '@angular/core/testing';
import { MyComponent } from './my-component.component'; // Adjust the import path

describe('MyComponent', () => {
  let component: MyComponent;
  let fixture: any;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [MyComponent]
    }).compileComponents();

    fixture = TestBed.createComponent(MyComponent);
    component = fixture.componentInstance;
    component.selectedFiles = []; // Initialize selectedFiles array
  });

  it('should handle file selection correctly', () => {
    // Arrange: Create a mock file list
    const mockFile1 = new File([''], 'test1.txt', { type: 'text/plain' });
    const mockFile2 = new File([''], 'test2.txt', { type: 'text/plain' });
    
    const mockEvent = {
      target: {
        files: {
          0: mockFile1,
          1: mockFile2,
          length: 2
        }
      }
    };

    // Act: Call the escolherArquivo method with the mock event
    component.escolherArquivo(mockEvent);

    // Assert: Verify that the selected files are added to the array
    expect(component.selectedFiles.length).toBe(2);
    expect(component.selectedFiles[0]).toBe(mockFile1);
    expect(component.selectedFiles[1]).toBe(mockFile2);

    // Assert: Check if the file property is correctly set
    expect(component.file).toBe(mockFile1);

    // Assert: Check if the hash is set correctly based on the first file name
    expect(component.hash).toBe('test1.txt');
  });

  it('should update hash only if the file name is different from the current hash', () => {
    // Arrange: Initialize the hash with a different value
    component.hash = 'oldHash.txt';

    const mockFile = new File([''], 'newHash.txt', { type: 'text/plain' });

    const mockEvent = {
      target: {
        files: {
          0: mockFile,
          length: 1
        }
      }
    };

    // Act: Call the escolherArquivo method with the mock event
    component.escolherArquivo(mockEvent);

    // Assert: Verify that the hash is updated
    expect(component.hash).toBe('newHash.txt');
  });

  it('should not update hash if the file name is the same as the current hash', () => {
    // Arrange: Initialize the hash with the same value as the file name
    component.hash = 'sameHash.txt';

    const mockFile = new File([''], 'sameHash.txt', { type: 'text/plain' });

    const mockEvent = {
      target: {
        files: {
          0: mockFile,
          length: 1
        }
      }
    };

    // Act: Call the escolherArquivo method with the mock event
    component.escolherArquivo(mockEvent);

    // Assert: Verify that the hash is not updated
    expect(component.hash).toBe('sameHash.txt');
  });
});
