import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of, throwError } from 'rxjs';
import { YourComponent } from './your.component'; // Substitua pelo nome real do seu componente
import { MultipartUploadService } from './multipart-upload.service'; // Substitua pelo serviço correto

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let multipartUploadServiceMock: any;

  beforeEach(() => {
    // Mock do serviço
    multipartUploadServiceMock = {
      updateCronEventBridge: jest.fn()
    };

    // Configuração do TestBed
    TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MultipartUploadService, useValue: multipartUploadServiceMock }
      ]
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
  });

  it('deve exibir mensagem de erro se nameRule e cronName estiverem vazios', () => {
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    component.executadorAlteracaoCron({ value: '' }, { value: '' });

    expect(showMessageSpy).toHaveBeenCalledWith('voce precisa preencher o valor do campo', 'error');
  });

  it('deve chamar o serviço updateCronEventBridge se nameRule e cronName não estiverem vazios', () => {
    multipartUploadServiceMock.updateCronEventBridge.mockReturnValue(of({ data: { status: 'success' } }));
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    component.executadorAlteracaoCron({ value: 'validRule' }, { value: 'validCron' });

    expect(multipartUploadServiceMock.updateCronEventBridge).toHaveBeenCalledWith('validRule', 'validCron');
    setTimeout(() => {
      expect(showMessageSpy).toHaveBeenCalledWith('success', 'error');
    }, 7000); // Teste para o setTimeout
  });

  it('deve exibir mensagem de erro quando o serviço falha', () => {
    const errorMessage = 'Erro ao atualizar o cron';
    multipartUploadServiceMock.updateCronEventBridge.mockReturnValue(throwError({ error: { message: errorMessage } }));
    const showMessageSpy = jest.spyOn(component, 'showMessage');

    component.executadorAlteracaoCron({ value: 'validRule' }, { value: 'validCron' });

    expect(showMessage
