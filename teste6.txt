// Importando o ambiente e a função que queremos testar
import { environment } from '../environment'; // ajuste o caminho conforme necessário
import YourComponent from './YourComponent'; // ajuste o caminho conforme necessário

describe('verificaPermissaoUpload', () => {
  let component;

  beforeEach(() => {
    component = new YourComponent();
    component.gruposAcessos = []; // inicializa com uma lista vazia
    component.showMessage = jest.fn(); // mock da função showMessage
  });

  it('deve exibir mensagem de permissão negada para "Prospect" sem permissão', () => {
    component.gruposAcessos = []; // sem permissões de acesso
    component.verificaPermissaoUpload('Prospect');
    expect(component.showMessage).toHaveBeenCalledWith('Voce nao possui permissao');
  });

  it('deve exibir mensagem de permissão negada para "Opp" sem permissão', () => {
    component.gruposAcessos = []; // sem permissões de acesso
    component.verificaPermissaoUpload('Opp');
    expect(component.showMessage).toHaveBeenCalledWith('Voce nao possui permissao');
  });

  it('deve exibir mensagem de permissão negada para "oportunidadesibba360" sem permissão', () => {
    component.gruposAcessos = []; // sem permissões de acesso
    component.verificaPermissaoUpload('oportunidadesibba360');
    expect(component.showMessage).toHaveBeenCalledWith('Voce nao possui permissao');
  });

  it('deve exibir mensagem de permissão negada para "npsglobaltransacional" sem permissão', () => {
    component.gruposAcessos = []; // sem permissões de acesso
    component.verificaPermissaoUpload('npsglobaltransacional');
    expect(component.showMessage).toHaveBeenCalledWith('Voce nao possui permissao');
  });

  it('deve exibir mensagem de permissão negada para "handover" sem permissão', () => {
    component.gruposAcessos = []; // sem permissões de acesso
    component.verificaPermissaoUpload('handover');
    expect(component.showMessage).toHaveBeenCalledWith('Voce nao possui permissao');
  });

  it('não deve exibir mensagem se o usuário tiver permissão para "Prospect"', () => {
    component.gruposAcessos = [environment.permissionsProspect];
    component.verificaPermissaoUpload('Prospect');
    expect(component.showMessage).not.toHaveBeenCalled();
  });

  it('não deve exibir mensagem se o usuário tiver permissão para "Opp"', () => {
    component.gruposAcessos = [environment.permissionsOpp];
    component.verificaPermissaoUpload('Opp');
    expect(component.showMessage).not.toHaveBeenCalled();
  });

  it('não deve exibir mensagem se o usuário tiver permissão para "oportunidadesibba360"', () => {
    component.gruposAcessos = [environment.permissionsOportunidades];
    component.verificaPermissaoUpload('oportunidadesibba360');
    expect(component.showMessage).not.toHaveBeenCalled();
  });

  it('não deve exibir mensagem se o usuário tiver permissão para "npsglobaltransacional"', () => {
    component.gruposAcessos = [environment.permissionsNps];
    component.verificaPermissaoUpload('npsglobaltransacional');
    expect(component.showMessage).not.toHaveBeenCalled();
  });

  it('não deve exibir mensagem se o usuário tiver permissão para "handover"', () => {
    component.gruposAcessos = [environment.permissionsHandover];
    component.verificaPermissaoUpload('handover');
    expect(component.showMessage).not.toHaveBeenCalled();
  });
});
