using Xunit;
using Moq;
using Amazon.Glue;
using Amazon.Glue.Model;
using System.Threading.Tasks;

public class JobServiceTests
{
    [Fact]
    public async Task ExecutarJob_ShouldReturnSuccessStatus_WhenJobStartsSuccessfully()
    {
        // Arrange
        var jobName = "testJob";
        var mockGlueClient = new Mock<IAmazonGlue>();
        mockGlueClient
            .Setup(client => client.StartJobRunAsync(It.IsAny<StartJobRunRequest>(), default))
            .ReturnsAsync(new StartJobRunResponse());

        var jobService = new JobService(mockGlueClient.Object); // Assuming JobService contains the ExecutarJob method

        // Act
        var result = await jobService.ExecutarJob(jobName);

        // Assert
        Assert.NotNull(result);
        Assert.Equal($"O servico {jobName} iniciou.", result.Status);
    }

    [Fact]
    public async Task ExecutarJob_ShouldThrowException_WhenJobNameIsIncorrect()
    {
        // Arrange
        var jobName = "invalidJob";
        var mockGlueClient = new Mock<IAmazonGlue>();
        mockGlueClient
            .Setup(client => client.StartJobRunAsync(It.IsAny<StartJobRunRequest>(), default))
            .ThrowsAsync(new Exception("o nome do job esta inco"));

        var jobService = new JobService(mockGlueClient.Object);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<Exception>(() => jobService.ExecutarJob(jobName));
        Assert.Equal("o nome do job esta inco", exception.Message);
    }
}
