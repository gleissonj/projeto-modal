private static void processLeads(
    List<ContactResponse> leads, 
    Map<String, Lead> mapLeadExisting, 
    List<ContactUpdateComparison> leadToFrontChoice2, 
    List<Lead> newLeadsToInsert) 
{
    for (ContactResponse newLead : leads) {
        ContactUpdateComparison respostaContato = new ContactUpdateComparison(
            newLead.nome,
            newLead.cpf,
            new List<ContactUpdateInfo>(),
            new List<ContactUpdateInfo>()
        );

        if (mapLeadExisting.containsKey(formatCPF(newLead.cpf))) {
            // O contato já existe no Salesforce
            Lead leadCurrent = mapLeadExisting.get(formatCPF(newLead.cpf));
            compareAndUpdateContact(newLead, leadCurrent, respostaContato);

            boolean hasNovoTelefone = containsNovoType(respostaContato.telefones);
            boolean hasNovoEmail = containsNovoType(respostaContato.emails);

            boolean hasValidTelefone = !respostaContato.telefones.isEmpty();
            boolean hasValidEmail = !respostaContato.emails.isEmpty();

            // Verifique se há "Novo" e se as listas não estão vazias
            if ((hasNovoTelefone && hasValidTelefone) || (hasNovoEmail && hasValidEmail)) {
                leadToFrontChoice2.add(respostaContato);
            }
        } else {
            // Criar novo lead
            Lead newLeadInsert = createNewLead(newLead);
            newLeadsToInsert.add(newLeadInsert);
        }
    }
}

private static boolean containsNovoType(List<ContactUpdateInfo> list) {
    for (ContactUpdateInfo info : list) {
        if ("Novo".equals(info.type)) {
            return true;
        }
    }
    return false;
}
