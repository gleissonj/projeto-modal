@isTest
private class BuscarContatosPorGrupoENome2Test {

    @testSetup
    static void setup() {
        // Cria uma Account (Grupo)
        Account grupo = new Account(
            Name = 'Grupo Ambev',
            RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName()
                .get('HU7_Grupo_Economico').getRecordTypeId(),
            Hu7IDExterno__c = 'GRP001'
        );
        insert grupo;

        // Cria um Contact
        Contact contato = new Contact(
            FirstName = 'João',
            LastName = 'Silva',
            Email = 'joao@ambev.com',
            Phone = '(11) 99999-0000',
            CPF__c = '123.456.789-00'
        );
        insert contato;

        // Cria relação AccountContactRelation__c
        AccountContactRelation__c relacao = new AccountContactRelation__c(
            AccountId__c = grupo.Id,
            Contact__c = contato.Id,
            Name = 'João Silva',
            Email__c = contato.Email,
            CPF__c = contato.CPF__c,
            Perfil__c = 'analista',
            Cargo__c = 'CEO'
        );
        insert relacao;

        // Outro grupo para teste de não correspondência
        Account grupoB = new Account(Name = 'Grupo B');
        insert grupoB;

        Contact contato2 = new Contact(FirstName = 'Maria', LastName = 'Oliveira');
        insert contato2;

        AccountContactRelation__c rel2 = new AccountContactRelation__c(
            AccountId__c = grupoB.Id,
            Contact__c = contato2.Id,
            Name = 'Maria Oliveira'
        );
        insert rel2;

        // Grupo genérico sem filtro (para teste do else do método buscarContatos)
        Account grupoC = new Account(Name = 'Grupo C');
        insert grupoC;

        Contact contato3 = new Contact(FirstName = 'Carlos', LastName = 'Lima');
        insert contato3;

        AccountContactRelation__c rel3 = new AccountContactRelation__c(
            AccountId__c = grupoC.Id,
            Contact__c = contato3.Id,
            Name = 'Carlos Lima'
        );
        insert rel3;
    }

    @isTest
    static void deveRetornarContatosPorGrupoENome() {
        Account grupo = [SELECT Id FROM Account WHERE Name = 'Grupo Ambev' LIMIT 1];

        BuscarContatosPorGrupoENome2.Request req = new BuscarContatosPorGrupoENome2.Request();
        req.accountId = grupo.Id;
        req.nomeContato = 'João';

        List<BuscarContatosPorGrupoENome2.Response> respostas = BuscarContatosPorGrupoENome2.run(new List<BuscarContatosPorGrupoENome2.Request>{ req });

        System.assertEquals(1, respostas.size());
        System.assertEquals(1, respostas[0].dadoscontato.size());

        BuscarContatosPorGrupoENome2.DadosContato contato = respostas[0].dadoscontato[0];
        System.assertEquals('João Silva', contato.nomeContato);
        System.assertEquals('analista', contato.perfilContato);
        System.assertEquals('GRP001', contato.codigoGrupo);
        System.assertEquals('joao@ambev.com', contato.emailContato);
        System.assertEquals('CEO', contato.cargoContato);
    }

    @isTest
    static void deveRetornarNadaSeNaoBaterFiltro() {
        Account grupo = [SELECT Id FROM Account WHERE Name = 'Grupo B' LIMIT 1];

        BuscarContatosPorGrupoENome2.Request req = new BuscarContatosPorGrupoENome2.Request();
        req.accountId = grupo.Id;
        req.nomeContato = 'João';

        List<BuscarContatosPorGrupoENome2.Response> resp = BuscarContatosPorGrupoENome2.run(new List<BuscarContatosPorGrupoENome2.Request>{ req });

        System.assertEquals(1, resp.size());
        System.assertEquals(0, resp[0].dadoscontato.size());
    }

    @isTest
    static void deveBuscarSemFiltroQuandoNaoInformadoNada() {
        BuscarContatosPorGrupoENome2.Request req = new BuscarContatosPorGrupoENome2.Request();
        // Sem accountId nem nomeContato

        List<BuscarContatosPorGrupoENome2.Response> resp = BuscarContatosPorGrupoENome2.run(new List<BuscarContatosPorGrupoENome2.Request>{ req });

        System.assertEquals(1, resp.size());
        System.assert(resp[0].dadoscontato.size() > 0);
    }

    @isTest
    static void deveTratarListaVazia() {
        List<BuscarContatosPorGrupoENome2.Response> resp = BuscarContatosPorGrupoENome2.run(new List<BuscarContatosPorGrupoENome2.Request>());
        System.assertEquals(0, resp.size());
    }

    @isTest
    static void deveTratarListaNull() {
        List<BuscarContatosPorGrupoENome2.Response> resp = BuscarContatosPorGrupoENome2.run(null);
        System.assertEquals(0, resp.size());
    }
}
