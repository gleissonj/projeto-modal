@IsTest
private class HU7_GetAccountIdsByCnpj_V1_Test {

    static Id rtGrupoId;

    @TestSetup
    static void setup() {
        // Buscar o RecordType de Grupo Econômico
        rtGrupoId = [
            SELECT Id
            FROM RecordType
            WHERE DeveloperName = 'HU7_Grupo_Economico'
            AND SobjectType = 'Account'
            LIMIT 1
        ].Id;

        // Criar um Grupo Econômico (Account com RecordType correto)
        Account grupoEconomico = new Account(
            Name = 'Grupo Teste',
            RecordTypeId = rtGrupoId,
            Hu7IDExterno__c = 'GRUPO123'
        );
        insert grupoEconomico;

        // Criar uma empresa com CNPJ e IdGrupo vinculado
        Account empresa = new Account(
            Name = 'Empresa Teste',
            AccountNumber = '12345678000190',  // CNPJ mockado
            Hu7IdGrupo__c = 'GRUPO123'
        );
        insert empresa;
    }

    @IsTest
    static void test_CnpjEncontrado() {
        List<HU7_GetAccountIdsByCnpj_V1.Request> requests = new List<HU7_GetAccountIdsByCnpj_V1.Request>();

        HU7_GetAccountIdsByCnpj_V1.Request req = new HU7_GetAccountIdsByCnpj_V1.Request();
        req.accountCNPJ = '12345678000190';
        requests.add(req);

        Test.startTest();
        List<HU7_GetAccountIdsByCnpj_V1.Response> responses = HU7_GetAccountIdsByCnpj_V1.run(requests);
        Test.stopTest();

        System.assertEquals(1, responses.size(), 'Deveria retornar uma resposta');
        System.assertEquals(1, responses[0].accountIds.size(), 'Deveria retornar um grupo');
        System.assertNotEquals(null, responses[0].accountIds[0], 'ID do grupo não deveria ser nulo');
    }

    @IsTest
    static void test_CnpjNaoEncontrado() {
        List<HU7_GetAccountIdsByCnpj_V1.Request> requests = new List<HU7_GetAccountIdsByCnpj_V1.Request>();

        HU7_GetAccountIdsByCnpj_V1.Request req = new HU7_GetAccountIdsByCnpj_V1.Request();
        req.accountCNPJ = '99999999999999';  // CNPJ inexistente
        requests.add(req);

        Test.startTest();
        List<HU7_GetAccountIdsByCnpj_V1.Response> responses = HU7_GetAccountIdsByCnpj_V1.run(requests);
        Test.stopTest();

        System.assertEquals(1, responses.size(), 'Deveria retornar uma resposta');
        System.assertEquals(0, responses[0].accountIds.size(), 'Não deveria retornar grupos');
    }

    @IsTest
    static void test_GrupoSemIdExterno() {
        // Criar um Grupo sem IdExterno
        Account grupoSemIdExterno = new Account(
            Name = 'Grupo Sem ID Externo',
            RecordTypeId = rtGrupoId
            // Sem Hu7IDExterno__c
        );
        insert grupoSemIdExterno;

        // Empresa apontando para esse grupo (sem IdGrupo definido)
        Account empresa = new Account(
            Name = 'Empresa Sem Id Externo',
            AccountNumber = '11111111000111',
            Hu7IdGrupo__c = null
        );
        insert empresa;

        List<HU7_GetAccountIdsByCnpj_V1.Request> requests = new List<HU7_GetAccountIdsByCnpj_V1.Request>();
        HU7_GetAccountIdsByCnpj_V1.Request req = new HU7_GetAccountIdsByCnpj_V1.Request();
        req.accountCNPJ = '11111111000111';
        requests.add(req);

        Test.startTest();
        List<HU7_GetAccountIdsByCnpj_V1.Response> responses = HU7_GetAccountIdsByCnpj_V1.run(requests);
        Test.stopTest();

        System.assertEquals(1, responses.size(), 'Deveria retornar uma resposta');
        System.assertEquals(0, responses[0].accountIds.size(), 'Sem ID externo, não deveria retornar grupo');
    }

    @IsTest
    static void test_ListaVazia() {
        List<HU7_GetAccountIdsByCnpj_V1.Request> requests = new List<HU7_GetAccountIdsByCnpj_V1.Request>();

        Test.startTest();
        List<HU7_GetAccountIdsByCnpj_V1.Response> responses = HU7_GetAccountIdsByCnpj_V1.run(requests);
        Test.stopTest();

        System.assertEquals(0, responses.size(), 'Sem requisições, a lista de respostas deveria ser vazia');
    }
}
