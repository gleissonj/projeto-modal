public with sharing class BuscarContatosPorGrupoENome2 {

    public class Request {
        @InvocableVariable public Id accountId;
        @InvocableVariable public String nomeContato;
        @InvocableVariable public String emailContato;
        @InvocableVariable public String cpfContato;
    }

    public class DadosContato {
        @InvocableVariable public String nomeContato;
        @InvocableVariable public String perfilContato;
        @InvocableVariable public String telefoneContato;
        @InvocableVariable public String emailContato;
        @InvocableVariable public String nomeGrupo;
        @InvocableVariable public String codigoGrupo;
        @InvocableVariable public String cargoContato;
    }

    public class Response {
        @InvocableVariable public List<DadosContato> dadoscontato;
    }

    @InvocableMethod(label='Buscar Contatos por Grupo e Nome2')
    public static List<Response> run(List<Request> requisicoes) {
        List<Response> respostas = new List<Response>();
        if (requisicoes == null || requisicoes.isEmpty()) return respostas;

        for (Request req : requisicoes) {
            List<DadosContato> dados = buscarContatos(req);
            Response resp = new Response();
            resp.dadoscontato = dados;
            respostas.add(resp);
        }

        return respostas;
    }

    private static List<DadosContato> buscarContatos(Request req) {
        if (req.accountId == null) return new List<DadosContato>();

        // Buscar ContactId relacionados à conta
        List<AccountContactRelation> relacoes = [
            SELECT ContactId
            FROM AccountContactRelation
            WHERE AccountId = :req.accountId
        ];

        Set<Id> contactIds = new Set<Id>();
        for (AccountContactRelation rel : relacoes) {
            if (rel.ContactId != null) contactIds.add(rel.ContactId);
        }

        if (contactIds.isEmpty()) return new List<DadosContato>();

        // Montar filtros dinâmicos
        Map<String, String> filtros = new Map<String, String>{
            'Name' => req.nomeContato,
            'Email' => req.emailContato,
            'CPF__c' => req.cpfContato
        };

        String query = buildContactQuery(filtros, contactIds);
        if (String.isBlank(query)) return new List<DadosContato>();

        List<Contact> contatos = Database.query(query);

        // Buscar dados do grupo
        Account grupo = [
            SELECT Name, Hu7IDExterno__c
            FROM Account
            WHERE Id = :req.accountId
            LIMIT 1
        ];

        List<DadosContato> resultado = new List<DadosContato>();
        for (Contact c : contatos) {
            DadosContato d = new DadosContato();
            d.nomeContato     = c.Name;
            d.emailContato    = c.Email;
            d.telefoneContato = c.Phone;
            d.perfilContato   = c.Perfil__c;
            d.cargoContato    = c.Cargo__c;
            d.nomeGrupo       = grupo.Name;
            d.codigoGrupo     = grupo.Hu7IDExterno__c;

            resultado.add(d);
        }

        return resultado;
    }

    // Monta a query dinamicamente com os filtros preenchidos
    private static String buildContactQuery(Map<String, String> filtros, Set<Id> contactIds) {
        List<String> conditions = new List<String>();

        // Sempre restringe pelos ContactIds permitidos
        conditions.add('Id IN (\'' + String.join(new List<String>(contactIds), '\',\'') + '\')');

        // Filtros adicionais por nome/email/cpf
        for (String campo : filtros.keySet()) {
            String valor = filtros.get(campo);
            if (!String.isBlank(valor)) {
                conditions.add(campo + ' LIKE \'' + String.escapeSingleQuotes(valor) + '%\'');
            }
        }

        if (conditions.isEmpty()) return null;

        return 'SELECT Id, Name, Email, CPF__c, Phone, Perfil__c, Cargo__c FROM Contact WHERE ' +
               String.join(conditions, ' AND ');
    }
}
