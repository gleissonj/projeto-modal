import { ComponentFixture, TestBed } from '@angular/core/testing';
import { YourComponent } from './your.component';
import { MultipartUploadService } from './multipart-upload.service';
import { of } from 'rxjs';

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let mockMultipartUploadService: Partial<MultipartUploadService>;
  let startStepFunctionSpy: jest.SpyInstance;

  beforeEach(async () => {
    mockMultipartUploadService = {
      startStepFunction: jest.fn()
    };

    await TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: MultipartUploadService, useValue: mockMultipartUploadService }
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;

    // Spy on the startStepFunction method
    startStepFunctionSpy = jest.spyOn(mockMultipartUploadService, 'startStepFunction').mockReturnValue(of('response'));
    fixture.detectChanges();
  });

  it('should call startStepFunction for each step function in the list', () => {
    const stepFunctions = ['step1', 'step2', 'step3'];

    component.startMultiplesStepFunction(stepFunctions);

    stepFunctions.forEach(stepFunction => {
      expect(startStepFunctionSpy).toHaveBeenCalledWith(stepFunction);
    });
  });

  it('should handle the subscription callback correctly', () => {
    // Spy on console.log to verify it's called
    const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();

    const stepFunctions = ['step1'];
    component.startMultiplesStepFunction(stepFunctions);

    // Check if the console log is called with "bateu"
    expect(consoleLogSpy).toHaveBeenCalledWith('bateu');

    // Restore original console.log
    consoleLogSpy.mockRestore();
  });
});
