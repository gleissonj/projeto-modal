public class testeApex {

    @InvocableMethod(label='Buscar contatos do grupo (Din√¢mico - Real)')
    public static List<Response> buscarContatos(List<Request> requests) {
        List<Response> responses = new List<Response>();

        Set<Id> groupIds = coletarGroupIdsValidos(requests);

        if (groupIds.isEmpty()) return responses;

        Map<Id, List<AccountContactRelation__c>> contatosPorGrupo = buscarContatosPorGrupo(groupIds);

        for (Request req : requests) {
            if (String.isBlank(req.groupId)) continue;

            List<AccountContactRelation__c> contatosDoGrupo = contatosPorGrupo.get(req.groupId);
            Map<String, Object> payload = new Map<String, Object>();

            // Inclui o groupName se veio preenchido
            if (!String.isBlank(req.groupName)) {
                payload.put('groupName', req.groupName);
            }

            List<Contato> listaContatos = new List<Contato>();
            if (contatosDoGrupo != null) {
                for (AccountContactRelation__c arc : contatosDoGrupo) {
                    if (arc.Contact != null) {
                        Contato contato = new Contato();
                        contato.email = arc.Contact.Name;
                        listaContatos.add(contato);
                    }
                }
            }

            payload.put('contatos', listaContatos);

            Response r = new Response();
            r.prompt = JSON.serializePretty(payload);
            responses.add(r);
        }

        return responses;
    }

    private static Set<Id> coletarGroupIdsValidos(List<Request> requests) {
        Set<Id> ids = new Set<Id>();
        for (Request req : requests) {
            if (!String.isBlank(req.groupId)) {
                ids.add(req.groupId);
            }
        }
        return ids;
    }

    private static Map<Id, List<AccountContactRelation__c>> buscarContatosPorGrupo(Set<Id> groupIds) {
        Map<Id, List<AccountContactRelation__c>> result = new Map<Id, List<AccountContactRelation__c>>();

        for (AccountContactRelation__c arc : [
            SELECT AccountId__c, Contact.Name, Email__c
            FROM AccountContactRelation__c
            WHERE AccountId__c IN :groupIds
        ]) {
            if (arc.AccountId__c != null) {
                if (!result.containsKey(arc.AccountId__c)) {
                    result.put(arc.AccountId__c, new List<AccountContactRelation__c>());
                }
                result.get(arc.AccountId__c).add(arc);
            }
        }
        return result;
    }

    public class Request {
        @InvocableVariable(required=true)
        public String groupId;

        @InvocableVariable(required=false)
        public String groupName;
    }

    public class Contato {
        public String email;
    }

    public class Response {
        @InvocableVariable(label='Prompt', description='Prompt')
        public String Prompt;
    }
}
